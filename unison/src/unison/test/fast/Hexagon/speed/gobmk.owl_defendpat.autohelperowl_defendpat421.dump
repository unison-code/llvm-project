# After Instruction Selection:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Expand ISel Pseudo-instructions:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Tail Duplication:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Optimize machine instruction PHIs:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Merge disjoint stack slots:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Local Stack Slot Allocation:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Remove dead machine instructions:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Loop Invariant Code Motion:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Common Subexpression Elimination:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine code sinking:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Peephole Optimizations:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Remove dead machine instructions:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon Store Widening:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon Hardware Loops:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Process Implicit Definitions:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2; IntRegs:%vreg2
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6; IntRegs:%vreg6
	%R1<def> = COPY %vreg7; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Live Variable Analysis:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2<kill>; IntRegs:%vreg2
	%vreg1<def> = COPY %R1<kill>; IntRegs:%vreg1
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<kill,tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1<kill>; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2<kill>; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6<kill>; IntRegs:%vreg6
	%R1<def> = COPY %vreg7<kill>; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0<kill>; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8<kill>, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9<kill>; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function autohelperowl_defendpat421.

# After Machine Natural Loop Construction:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2<kill>; IntRegs:%vreg2
	%vreg1<def> = COPY %R1<kill>; IntRegs:%vreg1
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<kill,tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1<kill>; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2<kill>; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6<kill>; IntRegs:%vreg6
	%R1<def> = COPY %vreg7<kill>; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0<kill>; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8<kill>, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9<kill>; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function autohelperowl_defendpat421.

# After Eliminate PHI nodes for register allocation:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2<kill>; IntRegs:%vreg2
	%vreg1<def> = COPY %R1<kill>; IntRegs:%vreg1
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg0<kill,tied0>, 2; IntRegs:%vreg4,%vreg0
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1<kill>; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2<kill>; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6<kill>; IntRegs:%vreg6
	%R1<def> = COPY %vreg7<kill>; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0<kill>; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8<kill>, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9<kill>; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function autohelperowl_defendpat421.

# After Two-Address instruction pass:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%vreg2<def> = COPY %R2<kill>; IntRegs:%vreg2
	%vreg1<def> = COPY %R1<kill>; IntRegs:%vreg1
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	%vreg4<def> = COPY %vreg0<kill>; IntRegs:%vreg4,%vreg0
	%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg4<tied0>, 2; IntRegs:%vreg4
	%vreg5<def> = L2_loadri_io %vreg4<kill>, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
	%vreg6<def> = A2_add %vreg5<kill>, %vreg1<kill>; IntRegs:%vreg6,%vreg5,%vreg1
	%vreg7<def> = A2_subri 3, %vreg2<kill>; IntRegs:%vreg7,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg6<kill>; IntRegs:%vreg6
	%R1<def> = COPY %vreg7<kill>; IntRegs:%vreg7
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg8<def> = COPY %R0<kill>; IntRegs:%vreg8
	%vreg9<def> = A4_rcmpeqi %vreg8<kill>, 0; IntRegs:%vreg9,%vreg8
	%R0<def> = COPY %vreg9<kill>; IntRegs:%vreg9
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function autohelperowl_defendpat421.

# After Simple Register Coalescing:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1 %R2
16B		%vreg2<def> = COPY %R2; IntRegs:%vreg2
32B		%vreg1<def> = COPY %R1; IntRegs:%vreg1
48B		%vreg4<def> = COPY %R0; IntRegs:%vreg4
80B		%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg4<tied0>, 2; IntRegs:%vreg4
96B		%vreg5<def> = L2_loadri_io %vreg4, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
112B		%vreg6<def> = A2_add %vreg5, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
128B		%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
144B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
160B		%R0<def> = COPY %vreg6; IntRegs:%vreg6
176B		%R1<def> = COPY %vreg7; IntRegs:%vreg7
192B		J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%vreg8<def> = COPY %R0; IntRegs:%vreg8
240B		%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
256B		%R0<def> = COPY %vreg9; IntRegs:%vreg9
272B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon Expand Condsets:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1 %R2
16B		%vreg2<def> = COPY %R2; IntRegs:%vreg2
32B		%vreg1<def> = COPY %R1; IntRegs:%vreg1
48B		%vreg4<def> = COPY %R0; IntRegs:%vreg4
80B		%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg4<tied0>, 2; IntRegs:%vreg4
96B		%vreg5<def> = L2_loadri_io %vreg4, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
112B		%vreg6<def> = A2_add %vreg5, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
128B		%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
144B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
160B		%R0<def> = COPY %vreg6; IntRegs:%vreg6
176B		%R1<def> = COPY %vreg7; IntRegs:%vreg7
192B		J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%vreg8<def> = COPY %R0; IntRegs:%vreg8
240B		%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
256B		%R0<def> = COPY %vreg9; IntRegs:%vreg9
272B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Instruction Scheduler:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1 %R2
8B		%vreg4<def> = COPY %R0; IntRegs:%vreg4
16B		%vreg2<def> = COPY %R2; IntRegs:%vreg2
32B		%vreg1<def> = COPY %R1; IntRegs:%vreg1
40B		%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
80B		%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg4<tied0>, 2; IntRegs:%vreg4
96B		%vreg5<def> = L2_loadri_io %vreg4, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
144B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
176B		%R1<def> = COPY %vreg7; IntRegs:%vreg7
180B		%vreg6<def> = A2_add %vreg5, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
184B		%R0<def> = COPY %vreg6; IntRegs:%vreg6
192B		J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%vreg8<def> = COPY %R0; IntRegs:%vreg8
240B		%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
256B		%R0<def> = COPY %vreg9; IntRegs:%vreg9
272B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Greedy Register Allocator:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1, %R2 in %vreg2

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1 %R2
8B		%vreg4<def> = COPY %R0; IntRegs:%vreg4
16B		%vreg2<def> = COPY %R2; IntRegs:%vreg2
32B		%vreg1<def> = COPY %R1; IntRegs:%vreg1
40B		%vreg7<def> = A2_subri 3, %vreg2; IntRegs:%vreg7,%vreg2
80B		%vreg4<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %vreg4<tied0>, 2; IntRegs:%vreg4
96B		%vreg5<def> = L2_loadri_io %vreg4, 18336; mem:LD4[%cgep] IntRegs:%vreg5,%vreg4
144B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
176B		%R1<def> = COPY %vreg7; IntRegs:%vreg7
180B		%vreg6<def> = A2_add %vreg5, %vreg1; IntRegs:%vreg6,%vreg5,%vreg1
184B		%R0<def> = COPY %vreg6; IntRegs:%vreg6
192B		J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%vreg8<def> = COPY %R0; IntRegs:%vreg8
240B		%vreg9<def> = A4_rcmpeqi %vreg8, 0; IntRegs:%vreg9,%vreg8
256B		%R0<def> = COPY %vreg9; IntRegs:%vreg9
272B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Virtual Register Rewriter:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1 %R2
32B		%R3<def> = COPY %R1
40B		%R1<def> = A2_subri 3, %R2<kill>
80B		%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
96B		%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
144B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
180B		%R0<def> = A2_add %R0<kill>, %R3<kill>
192B		J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
240B		%R0<def> = A4_rcmpeqi %R0<kill>, 0
272B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Stack Slot Coloring:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%R3<def> = COPY %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Loop Invariant Code Motion:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%R3<def> = COPY %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon RDF optimizations:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%R3<def> = COPY %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Shrink Wrapping analysis:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	%R3<def> = COPY %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = COPY %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Copy Propagation Pass:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = COPY %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = A2_tfr %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = A2_tfr %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon Split Const32s and Const64s:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = A2_tfr %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = A2_tfr %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon NewValueJump:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = A2_tfr %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = A2_tfr %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon Hardware Loop Fixup:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = A2_tfr %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon generate mux instructions:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	%R3<def> = A2_tfr %R1
	%R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	%R0<def> = A2_add %R0<kill>, %R3<kill>
	J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	%R0<def> = A4_rcmpeqi %R0<kill>, 0
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon Packetizer:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R3<imp-def>, %R1<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %R1<imp-use>, %R2<imp-use,kill>
	  * S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * %R3<def> = A2_tfr %R1
	  * %R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R3<imp-use,kill>, %R1<imp-use>, ...
	  * %R0<def> = A2_add %R0<kill>, %R3<kill>
	  * J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use>, %R0<imp-def>, ...
	BUNDLE %R0<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R0<imp-use,kill>, %R30<imp-use>
	  * %R0<def> = A4_rcmpeqi %R0<kill>, 0
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use,internal>

# End machine code for function autohelperowl_defendpat421.

# After Hexagon call frame information:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R3<imp-def>, %R1<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %R1<imp-use>, %R2<imp-use,kill>
	  * S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * %R3<def> = A2_tfr %R1
	  * %R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R3<imp-use,kill>, %R1<imp-use>, ...
	  * %R0<def> = A2_add %R0<kill>, %R3<kill>
	  * J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use>, %R0<imp-def>, ...
	BUNDLE %R0<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R0<imp-use,kill>, %R30<imp-use>
	  * %R0<def> = A4_rcmpeqi %R0<kill>, 0
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use,internal>

# End machine code for function autohelperowl_defendpat421.

# After Contiguously Lay Out Funclets:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R3<imp-def>, %R1<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %R1<imp-use>, %R2<imp-use,kill>
	  * S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * %R3<def> = A2_tfr %R1
	  * %R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R3<imp-use,kill>, %R1<imp-use>, ...
	  * %R0<def> = A2_add %R0<kill>, %R3<kill>
	  * J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use>, %R0<imp-def>, ...
	BUNDLE %R0<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R0<imp-use,kill>, %R30<imp-use>
	  * %R0<def> = A4_rcmpeqi %R0<kill>, 0
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use,internal>

# End machine code for function autohelperowl_defendpat421.

# After StackMap Liveness Analysis:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R3<imp-def>, %R1<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %R1<imp-use>, %R2<imp-use,kill>
	  * S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * %R3<def> = A2_tfr %R1
	  * %R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R3<imp-use,kill>, %R1<imp-use>, ...
	  * %R0<def> = A2_add %R0<kill>, %R3<kill>
	  * J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use>, %R0<imp-def>, ...
	BUNDLE %R0<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R0<imp-use,kill>, %R30<imp-use>
	  * %R0<def> = A4_rcmpeqi %R0<kill>, 0
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use,internal>

# End machine code for function autohelperowl_defendpat421.

# After Live DEBUG_VALUE analysis:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %R0, %R1, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %R2
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R3<imp-def>, %R1<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %R1<imp-use>, %R2<imp-use,kill>
	  * S2_allocframe 0, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * %R3<def> = A2_tfr %R1
	  * %R1<def> = A2_subri 3, %R2<kill>
	%R0<def,tied2> = S4_addi_asl_ri <ga:@transformation>, %R0<kill,tied0>, 2
	%R0<def> = L2_loadri_io %R0<kill>, 18336; mem:LD4[%cgep]
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R3<imp-use,kill>, %R1<imp-use>, ...
	  * %R0<def> = A2_add %R0<kill>, %R3<kill>
	  * J2_call <ga:@safe_move>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use>, %R0<imp-def>, ...
	BUNDLE %R0<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R0<imp-use,kill>, %R30<imp-use>
	  * %R0<def> = A4_rcmpeqi %R0<kill>, 0
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use,internal>

# End machine code for function autohelperowl_defendpat421.

