# After Instruction Selection:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Expand ISel Pseudo-instructions:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Tail Duplication:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Optimize machine instruction PHIs:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Merge disjoint stack slots:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Local Stack Slot Allocation:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Remove dead machine instructions:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Machine Loop Invariant Code Motion:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Machine Common Subexpression Elimination:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Machine code sinking:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Peephole Optimizations:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Remove dead machine instructions:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon Store Widening:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon Hardware Loops:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Process Implicit Definitions:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Live Variable Analysis:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1<kill>; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5<kill>, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3<kill>; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0<kill>; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7<kill>, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function output_51.

# After Machine Natural Loop Construction:
# Machine code for function output_51: SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1<kill>; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5<kill>, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3<kill>; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0<kill>; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7<kill>, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg1,%vreg4,%vreg0
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function output_51.

# After Eliminate PHI nodes for register allocation:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1<kill>; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5<kill>, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	%vreg11<def> = COPY %vreg4<kill>; IntRegs:%vreg11,%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3<kill>; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0<kill>; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7<kill>, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
	%vreg11<def> = COPY %vreg0<kill>; IntRegs:%vreg11,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = COPY %vreg11<kill>; IntRegs:%vreg1,%vreg11
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function output_51.

# After Two-Address instruction pass:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%vreg3<def> = COPY %R1<kill>; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3; IntRegs:%vreg3
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5<kill>, 8; PredRegs:%vreg6 IntRegs:%vreg5
	%vreg4<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg4
	%vreg11<def> = COPY %vreg4<kill>; IntRegs:%vreg11,%vreg4
	J2_jumpt %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg3<kill>; IntRegs:%vreg3
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg7<def> = COPY %R0<kill>; IntRegs:%vreg7
	%vreg8<def> = C2_cmpeqi %vreg7<kill>, 4; PredRegs:%vreg8 IntRegs:%vreg7
	%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
	%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
	%vreg0<def> = C2_mux %vreg8<kill>, %vreg10<kill>, %vreg9<kill>; IntRegs:%vreg0,%vreg10,%vreg9 PredRegs:%vreg8
	%vreg11<def> = COPY %vreg0<kill>; IntRegs:%vreg11,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = COPY %vreg11<kill>; IntRegs:%vreg1,%vreg11
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function output_51.

# After Simple Register Coalescing:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R1
16B		%vreg3<def> = COPY %R1; IntRegs:%vreg3
32B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
48B		%R0<def> = COPY %vreg3; IntRegs:%vreg3
64B		J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
80B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
96B		%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
112B		%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
128B		%vreg11<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg11
160B		J2_jumpt %vreg6, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
176B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

192B	BB#1: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
208B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
224B		%R0<def> = COPY %vreg3; IntRegs:%vreg3
240B		J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
256B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
272B		%vreg7<def> = COPY %R0<kill>; IntRegs:%vreg7
288B		%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
304B		%vreg9<def> = A2_tfrsi <ga:@.str.75>; IntRegs:%vreg9
320B		%vreg10<def> = A2_tfrsi <ga:@.str.2015>; IntRegs:%vreg10
336B		%vreg11<def> = C2_mux %vreg8, %vreg10, %vreg9; IntRegs:%vreg11,%vreg10,%vreg9 PredRegs:%vreg8
	    Successors according to CFG: BB#2(?%)

368B	BB#2: derived from LLVM BB %5
	    Predecessors according to CFG: BB#0 BB#1
400B		%R0<def> = COPY %vreg11; IntRegs:%vreg11
416B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function output_51.

# After Hexagon Expand Condsets:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R1
16B		%vreg3<def> = COPY %R1; IntRegs:%vreg3
32B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
48B		%R0<def> = COPY %vreg3; IntRegs:%vreg3
64B		J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
80B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
96B		%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
112B		%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
128B		%vreg11<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg11
160B		J2_jumpt %vreg6, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
176B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

192B	BB#1: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
208B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
224B		%R0<def> = COPY %vreg3; IntRegs:%vreg3
240B		J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
256B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
272B		%vreg7<def> = COPY %R0<kill>; IntRegs:%vreg7
288B		%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
324B		%vreg11<def> = C2_cmoveit %vreg8, <ga:@.str.2015>; IntRegs:%vreg11 PredRegs:%vreg8
332B		%vreg11<def> = C2_cmoveif %vreg8<kill>, <ga:@.str.75>, %vreg11<imp-use,kill>; IntRegs:%vreg11 PredRegs:%vreg8
	    Successors according to CFG: BB#2(?%)

368B	BB#2: derived from LLVM BB %5
	    Predecessors according to CFG: BB#0 BB#1
400B		%R0<def> = COPY %vreg11<kill>; IntRegs:%vreg11
416B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function output_51.

# After Machine Instruction Scheduler:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R1
16B		%vreg3<def> = COPY %R1; IntRegs:%vreg3
32B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
48B		%R0<def> = COPY %vreg3; IntRegs:%vreg3
64B		J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
72B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
80B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
128B		%vreg11<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg11
136B		%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
160B		J2_jumpt %vreg6, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
176B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

192B	BB#1: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
200B		%R0<def> = COPY %vreg3; IntRegs:%vreg3
208B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
240B		J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
248B		%vreg7<def> = COPY %R0; IntRegs:%vreg7
288B		%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
296B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
324B		%vreg11<def> = C2_cmoveit %vreg8, <ga:@.str.2015>; IntRegs:%vreg11 PredRegs:%vreg8
332B		%vreg11<def> = C2_cmoveif %vreg8<kill>, <ga:@.str.75>, %vreg11<imp-use,kill>; IntRegs:%vreg11 PredRegs:%vreg8
	    Successors according to CFG: BB#2(?%)

368B	BB#2: derived from LLVM BB %5
	    Predecessors according to CFG: BB#0 BB#1
400B		%R0<def> = COPY %vreg11<kill>; IntRegs:%vreg11
416B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Greedy Register Allocator:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R1
16B		%vreg3<def> = COPY %R1; IntRegs:%vreg3
32B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
48B		%R0<def> = COPY %vreg3; IntRegs:%vreg3
64B		J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
72B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
80B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
128B		%vreg11<def> = A2_tfrsi <ga:@.str.2014>; IntRegs:%vreg11
136B		%vreg6<def> = C2_cmpeqi %vreg5, 8; PredRegs:%vreg6 IntRegs:%vreg5
160B		J2_jumpt %vreg6, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
176B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

192B	BB#1: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
200B		%R0<def> = COPY %vreg3; IntRegs:%vreg3
208B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
240B		J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
248B		%vreg7<def> = COPY %R0; IntRegs:%vreg7
288B		%vreg8<def> = C2_cmpeqi %vreg7, 4; PredRegs:%vreg8 IntRegs:%vreg7
296B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
324B		%vreg11<def> = C2_cmoveit %vreg8, <ga:@.str.2015>; IntRegs:%vreg11 PredRegs:%vreg8
332B		%vreg11<def> = C2_cmoveif %vreg8<kill>, <ga:@.str.75>, %vreg11<imp-use,kill>; IntRegs:%vreg11 PredRegs:%vreg8
	    Successors according to CFG: BB#2(?%)

368B	BB#2: derived from LLVM BB %5
	    Predecessors according to CFG: BB#0 BB#1
400B		%R0<def> = COPY %vreg11<kill>; IntRegs:%vreg11
416B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Virtual Register Rewriter:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R1
16B		%R16<def> = COPY %R1
32B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
48B		%R0<def> = COPY %R16
64B		J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
72B		%R1<def> = COPY %R0
80B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
128B		%R0<def> = A2_tfrsi <ga:@.str.2014>
136B		%P0<def> = C2_cmpeqi %R1<kill>, 8
160B		J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
176B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

192B	BB#1: derived from LLVM BB %2
	    Live Ins: %R16
	    Predecessors according to CFG: BB#0
200B		%R0<def> = COPY %R16<kill>
208B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
240B		J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
288B		%P0<def> = C2_cmpeqi %R0<kill>, 4
296B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
324B		%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
332B		%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
	    Successors according to CFG: BB#2(?%)

368B	BB#2: derived from LLVM BB %5
	    Live Ins: %R0
	    Predecessors according to CFG: BB#0 BB#1
416B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Stack Slot Coloring:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%R16<def> = COPY %R1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = COPY %R0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Machine Loop Invariant Code Motion:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%R16<def> = COPY %R1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = COPY %R0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon RDF optimizations:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%R16<def> = COPY %R1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = COPY %R0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Shrink Wrapping analysis:
# Machine code for function output_51: Post SSA
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1
	%R16<def> = COPY %R1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = COPY %R0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = COPY %R1
	%R0<def> = COPY %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = COPY %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = COPY %R16<kill>
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Machine Copy Propagation Pass:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = COPY %R1
	%R0<def> = COPY %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = COPY %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = COPY %R16<kill>
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R1
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R1
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon Split Const32s and Const64s:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R1
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R1
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon NewValueJump:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R1
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R1
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon Hardware Loop Fixup:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R1
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon generate mux instructions:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R1
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi <ga:@.str.2014>
	%P0<def> = C2_cmpeqi %R1<kill>, 8
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	%R0<def> = A2_tfr %R16
	J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 4
	%R0<def> = C2_cmoveit %P0, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon Packetizer:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R1<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R1
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi <ga:@.str.2014>
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R1<kill>, 8
	  * J2_jumptnew %P0<kill,internal>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def>, %R0<imp-def>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 4
	  * %R0<def> = C2_cmovenewit %P0<internal>, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>, %R0<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Hexagon call frame information:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R1<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R1
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi <ga:@.str.2014>
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R1<kill>, 8
	  * J2_jumptnew %P0<kill,internal>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def>, %R0<imp-def>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 4
	  * %R0<def> = C2_cmovenewit %P0<internal>, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>, %R0<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Contiguously Lay Out Funclets:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R1<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R1
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi <ga:@.str.2014>
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R1<kill>, 8
	  * J2_jumptnew %P0<kill,internal>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def>, %R0<imp-def>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 4
	  * %R0<def> = C2_cmovenewit %P0<internal>, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>, %R0<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After StackMap Liveness Analysis:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R1<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R1
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi <ga:@.str.2014>
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R1<kill>, 8
	  * J2_jumptnew %P0<kill,internal>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def>, %R0<imp-def>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 4
	  * %R0<def> = C2_cmovenewit %P0<internal>, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>, %R0<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

# After Live DEBUG_VALUE analysis:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R1 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R1<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R1
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_type>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi <ga:@.str.2014>
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R1<kill>, 8
	  * J2_jumptnew %P0<kill,internal>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %R16
    Predecessors according to CFG: BB#0
	BUNDLE %R0<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * J2_call <ga:@get_attr_mode>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def>, %R0<imp-def>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 4
	  * %R0<def> = C2_cmovenewit %P0<internal>, <ga:@.str.2015>
	%R0<def> = C2_cmoveif %P0<kill>, <ga:@.str.75>, %R0<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>, %R0<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function output_51.

