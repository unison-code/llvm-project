# After Instruction Selection:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Expand ISel Pseudo-instructions:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Tail Duplication:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Optimize machine instruction PHIs:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Merge disjoint stack slots:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Local Stack Slot Allocation:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Remove dead machine instructions:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Machine Loop Invariant Code Motion:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Machine Common Subexpression Elimination:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Machine code sinking:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Peephole Optimizations:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Remove dead machine instructions:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon Store Widening:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon Hardware Loops:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Process Implicit Definitions:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Live Variable Analysis:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0<kill>, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Machine Natural Loop Construction:
# Machine code for function ptmr_init: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0<kill>, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Eliminate PHI nodes for register allocation:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0<kill>, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Two-Address instruction pass:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
	S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
	S4_storeiri_io %vreg0<kill>, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Simple Register Coalescing:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg0<def> = COPY %R0; IntRegs:%vreg0
32B		S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
48B		S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
64B		S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
80B		S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
96B		S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
112B		S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
128B		S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
144B		S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
160B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon Expand Condsets:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg0<def> = COPY %R0; IntRegs:%vreg0
32B		S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
48B		S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
64B		S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
80B		S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
96B		S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
112B		S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
128B		S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
144B		S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
160B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Machine Instruction Scheduler:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg0<def> = COPY %R0; IntRegs:%vreg0
128B		S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
132B		S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
136B		S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
144B		S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
152B		S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
160B		S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
168B		S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
176B		S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
184B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Greedy Register Allocator:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg0<def> = COPY %R0; IntRegs:%vreg0
128B		S4_storeiri_io %vreg0, 12, 0; mem:ST4[%1(align=8)+4](align=4) IntRegs:%vreg0
132B		S4_storeiri_io %vreg0, 16, 0; mem:ST4[%1+8](align=8) IntRegs:%vreg0
136B		S4_storeiri_io %vreg0, 20, 0; mem:ST4[%1(align=8)+12](align=4) IntRegs:%vreg0
144B		S4_storeiri_io %vreg0, 24, 0; mem:ST4[%1+16](align=8) IntRegs:%vreg0
152B		S4_storeiri_io %vreg0, 28, 0; mem:ST4[%1(align=8)+20](align=4) IntRegs:%vreg0
160B		S4_storeiri_io %vreg0, 32, 0; mem:ST4[%1+24](align=8) IntRegs:%vreg0
168B		S4_storeiri_io %vreg0, 36, 0; mem:ST4[%1(align=8)+28](align=4) IntRegs:%vreg0
176B		S4_storeiri_io %vreg0, 8, 0; mem:ST4[%1](align=8) IntRegs:%vreg0
184B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Virtual Register Rewriter:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
128B		S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
132B		S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
136B		S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
144B		S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
152B		S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
160B		S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
168B		S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
176B		S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
184B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Stack Slot Coloring:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Machine Loop Invariant Code Motion:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon RDF optimizations:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Shrink Wrapping analysis:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Machine Copy Propagation Pass:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon Split Const32s and Const64s:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon NewValueJump:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon Hardware Loop Fixup:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon generate mux instructions:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon Packetizer:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	  * S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	  * S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	  * S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	BUNDLE %PC<imp-def,dead>, %R0<imp-use,kill>, %R31<imp-use>
	  * S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	  * S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	  * JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Hexagon call frame information:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	  * S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	  * S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	  * S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	BUNDLE %PC<imp-def,dead>, %R0<imp-use,kill>, %R31<imp-use>
	  * S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	  * S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	  * JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Contiguously Lay Out Funclets:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	  * S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	  * S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	  * S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	BUNDLE %PC<imp-def,dead>, %R0<imp-use,kill>, %R31<imp-use>
	  * S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	  * S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	  * JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After StackMap Liveness Analysis:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	  * S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	  * S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	  * S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	BUNDLE %PC<imp-def,dead>, %R0<imp-use,kill>, %R31<imp-use>
	  * S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	  * S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	  * JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

# After Live DEBUG_VALUE analysis:
# Machine code for function ptmr_init: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 12, 0; mem:ST4[%1(align=8)+4](align=4)
	  * S4_storeiri_io %R0, 16, 0; mem:ST4[%1+8](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 20, 0; mem:ST4[%1(align=8)+12](align=4)
	  * S4_storeiri_io %R0, 24, 0; mem:ST4[%1+16](align=8)
	BUNDLE %R0<imp-use>
	  * S4_storeiri_io %R0, 28, 0; mem:ST4[%1(align=8)+20](align=4)
	  * S4_storeiri_io %R0, 32, 0; mem:ST4[%1+24](align=8)
	BUNDLE %PC<imp-def,dead>, %R0<imp-use,kill>, %R31<imp-use>
	  * S4_storeiri_io %R0, 36, 0; mem:ST4[%1(align=8)+28](align=4)
	  * S4_storeiri_io %R0<kill>, 8, 0; mem:ST4[%1](align=8)
	  * JMPret %R31, %PC<imp-def,dead>

# End machine code for function ptmr_init.

