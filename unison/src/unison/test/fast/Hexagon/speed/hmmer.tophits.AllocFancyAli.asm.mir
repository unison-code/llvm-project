--- |
  ; ModuleID = 'hmmer.tophits.AllocFancyAli.ll'
  target datalayout = "e-m:e-p:32:32:32-i64:64:64-i32:32:32-i16:16:16-i1:8:8-f64:64:64-f32:32:32-v64:64:64-v32:32:32-a:0-n16:32"
  target triple = "hexagon"
  
  %struct.fancyali_s.23 = type { i8*, i8*, i8*, i8*, i8*, i32, i8*, i8*, i32, i32 }
  
  @.str = external hidden unnamed_addr constant [10 x i8], align 1
  
  declare i8* @sre_malloc(i8*, i32, i32) #0
  
  ; Function Attrs: nounwind
  define %struct.fancyali_s.23* @AllocFancyAli() #1 {
    %1 = tail call i8* @sre_malloc(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 117, i32 40) #3
    %2 = bitcast i8* %1 to %struct.fancyali_s.23*
    tail call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 20, i32 4, i1 false)
    %cgep = getelementptr i8, i8* %1, i32 24
    tail call void @llvm.memset.p0i8.i64(i8* %cgep, i8 0, i64 16, i32 4, i1 false)
    ret %struct.fancyali_s.23* %2
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2
  
  attributes #0 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="hexagonv4" "target-features"="-hvx,-hvx-double" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="hexagonv4" "target-features"="-hvx,-hvx-double" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { argmemonly nounwind "target-cpu"="hexagonv4" }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            AllocFancyAli
alignment:       4
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: true
tracksSubRegLiveness: false
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveouts: %r30, %r0
  
    BUNDLE implicit-def %r29, implicit-def %r30, implicit-def %r0, implicit-def %r2, implicit %r29, implicit %r31, implicit %r30 {
      S2_allocframe 0, implicit-def %r29, implicit-def %r30, implicit %r29, implicit %r31, implicit %r30 :: (store 4 into unknown)
      %r0 = A2_tfrsi @.str
      %r2 = A2_tfrsi 40
    }
    BUNDLE implicit-def %r1, implicit-def dead %d0, implicit-def dead %d1, implicit-def dead %d2, implicit-def dead %d3, implicit-def dead %d4, implicit-def dead %d5, implicit-def dead %d6, implicit-def dead %d7, implicit-def dead %r28, implicit-def dead %r31, implicit-def dead %p0, implicit-def dead %p1, implicit-def dead %p2, implicit-def dead %p3, implicit-def dead %m0, implicit-def dead %m1, implicit-def dead %lc0, implicit-def dead %lc1, implicit-def dead %sa0, implicit-def dead %sa1, implicit-def dead %usr, implicit-def %usr_ovf, implicit-def %r0, implicit %r0, implicit %r2 {
      %r1 = A2_tfrsi 117
      J2_call @sre_malloc, implicit-def dead %d0, implicit-def dead %d1, implicit-def dead %d2, implicit-def dead %d3, implicit-def dead %d4, implicit-def dead %d5, implicit-def dead %d6, implicit-def dead %d7, implicit-def dead %r28, implicit-def dead %r31, implicit-def dead %p0, implicit-def dead %p1, implicit-def dead %p2, implicit-def dead %p3, implicit-def dead %m0, implicit-def dead %m1, implicit-def dead %lc0, implicit-def dead %lc1, implicit-def dead %sa0, implicit-def dead %sa1, implicit-def dead %usr, implicit-def %usr_ovf, implicit %r0, implicit internal %r1, implicit %r2, implicit-def %r0
    }
    BUNDLE implicit %r0 {
      S4_storeiri_io %r0, 8, 0 :: (store 4 into %ir.1 + 8)
      S4_storeiri_io %r0, 4, 0 :: (store 4 into %ir.1 + 4)
    }
    BUNDLE implicit %r0 {
      S4_storeiri_io %r0, 28, 0 :: (store 4 into %ir.cgep + 4)
      S4_storeiri_io %r0, 32, 0 :: (store 4 into %ir.cgep + 8)
    }
    BUNDLE implicit %r0 {
      S4_storeiri_io %r0, 36, 0 :: (store 4 into %ir.cgep + 12)
      S4_storeiri_io %r0, 0, 0 :: (store 4 into %ir.1)
    }
    BUNDLE implicit %r0 {
      S4_storeiri_io %r0, 12, 0 :: (store 4 into %ir.1 + 12)
      S4_storeiri_io %r0, 16, 0 :: (store 4 into %ir.1 + 16)
    }
    S4_storeiri_io %r0, 24, 0 :: (store 4 into %ir.cgep)
    L4_return implicit-def %r29, implicit-def %r30, implicit-def %r31, implicit-def %pc, implicit %r30, implicit-def dead %pc, implicit %r0

...
