# After Instruction Selection:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Expand ISel Pseudo-instructions:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Tail Duplication:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Optimize machine instruction PHIs:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Merge disjoint stack slots:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Local Stack Slot Allocation:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Remove dead machine instructions:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Machine Loop Invariant Code Motion:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Machine Common Subexpression Elimination:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Machine code sinking:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Peephole Optimizations:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Remove dead machine instructions:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Hexagon Store Widening:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Hexagon Hardware Loops:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Process Implicit Definitions:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Live Variable Analysis:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0<kill>; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Machine Natural Loop Construction:
# Machine code for function xexit: SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0<kill>; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Eliminate PHI nodes for register allocation:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0<kill>; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Two-Address instruction pass:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg1<def> = COPY %R0<kill>; IntRegs:%vreg1
	%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
	%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
	J2_jumpt %vreg2<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %vreg0<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Simple Register Coalescing:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0 in %vreg1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg1<def> = COPY %R0; IntRegs:%vreg1
32B		%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
48B		%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
64B		J2_jumpt %vreg2, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
80B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
112B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
128B		J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
144B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	    Successors according to CFG: BB#2(?%)

160B	BB#2: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0 BB#1
176B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
192B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
208B		CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
224B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Hexagon Expand Condsets:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0 in %vreg1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg1<def> = COPY %R0; IntRegs:%vreg1
32B		%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
48B		%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
64B		J2_jumpt %vreg2, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
80B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
112B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
128B		J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
144B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	    Successors according to CFG: BB#2(?%)

160B	BB#2: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0 BB#1
176B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
192B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
208B		CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
224B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Machine Instruction Scheduler:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0 in %vreg1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
32B		%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
40B		%vreg1<def> = COPY %R0; IntRegs:%vreg1
48B		%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
64B		J2_jumpt %vreg2, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
80B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
112B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
128B		J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
144B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	    Successors according to CFG: BB#2(?%)

160B	BB#2: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0 BB#1
168B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
176B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
208B		CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
224B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Greedy Register Allocator:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0 in %vreg1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
32B		%vreg0<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup] IntRegs:%vreg0
40B		%vreg1<def> = COPY %R0; IntRegs:%vreg1
48B		%vreg2<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg2 IntRegs:%vreg0
64B		J2_jumpt %vreg2, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg2
80B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
112B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
128B		J2_callr %vreg0, %D0<imp-def,dead>, %R31<imp-def,dead>, ...; IntRegs:%vreg0
144B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	    Successors according to CFG: BB#2(?%)

160B	BB#2: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0 BB#1
168B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
176B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
208B		CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
224B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Virtual Register Rewriter:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
32B		%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
40B		%R16<def> = COPY %R0
48B		%P0<def> = C2_cmpeqi %R1, 0
64B		J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
80B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Live Ins: %R1 %R16
	    Predecessors according to CFG: BB#0
112B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
128B		J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
144B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	    Successors according to CFG: BB#2(?%)

160B	BB#2: derived from LLVM BB %4
	    Live Ins: %R16
	    Predecessors according to CFG: BB#0 BB#1
168B		%R0<def> = COPY %R16<kill>
176B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
208B		CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, ...
224B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Stack Slot Coloring:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = COPY %R0
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Machine Loop Invariant Code Motion:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = COPY %R0
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>

# End machine code for function xexit.

# After Hexagon RDF optimizations:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = COPY %R0<kill>
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use,kill>, %R30<imp-use,kill>, %R29<imp-use,kill>
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use,kill>, %R30<imp-use,kill>, %R29<imp-use,kill>
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use,kill>

# End machine code for function xexit.

# After Shrink Wrapping analysis:
# Machine code for function xexit: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = COPY %R0<kill>
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use,kill>, %R30<imp-use,kill>, %R29<imp-use,kill>
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use,kill>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use,kill>, %R30<imp-use,kill>, %R29<imp-use,kill>
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use,kill>

# End machine code for function xexit.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = COPY %R0<kill>
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = COPY %R16<kill>
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Machine Copy Propagation Pass:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = COPY %R0<kill>
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = COPY %R16<kill>
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = A2_tfr %R0
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = A2_tfr %R16
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = A2_tfr %R0
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = A2_tfr %R16
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Hexagon Split Const32s and Const64s:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = A2_tfr %R0
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = A2_tfr %R16
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	%R16<def> = A2_tfr %R0
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = A2_tfr %R16
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Hexagon NewValueJump:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R0
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	J4_cmpeqi_t_jumpnv_t %R1, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = A2_tfr %R16
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R0
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	J4_cmpeqi_t_jumpnv_t %R1, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = A2_tfr %R16
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Hexagon Hardware Loop Fixup:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R0
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	J4_cmpeqi_t_jumpnv_t %R1, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = A2_tfr %R16
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Hexagon generate mux instructions:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R0
	%R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	J4_cmpeqi_t_jumpnv_t %R1, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	%R0<def> = A2_tfr %R16
	CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Hexagon Packetizer:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R0<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R0
	BUNDLE %R1<imp-def>, %PC<imp-def>
	  * %R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	  * J4_cmpeqi_t_jumpnv_t %R1<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %R0<imp-def,dead>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill,internal>, ...
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Hexagon call frame information:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R0<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R0
	BUNDLE %R1<imp-def>, %PC<imp-def>
	  * %R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	  * J4_cmpeqi_t_jumpnv_t %R1<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %R0<imp-def,dead>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill,internal>, ...
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Contiguously Lay Out Funclets:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R0<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R0
	BUNDLE %R1<imp-def>, %PC<imp-def>
	  * %R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	  * J4_cmpeqi_t_jumpnv_t %R1<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %R0<imp-def,dead>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill,internal>, ...
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After StackMap Liveness Analysis:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R0<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R0
	BUNDLE %R1<imp-def>, %PC<imp-def>
	  * %R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	  * J4_cmpeqi_t_jumpnv_t %R1<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %R0<imp-def,dead>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill,internal>, ...
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

# After Live DEBUG_VALUE analysis:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R0<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R0
	BUNDLE %R1<imp-def>, %PC<imp-def>
	  * %R1<def> = L4_loadri_abs <ga:@_xexit_cleanup>; mem:LD4[@_xexit_cleanup]
	  * J4_cmpeqi_t_jumpnv_t %R1<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R1 %R16
    Predecessors according to CFG: BB#0
	J2_callr %R1<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, ...
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %R16 %R29 %R30 %R31
    Predecessors according to CFG: BB#0 BB#1
	BUNDLE %R0<imp-def,dead>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R16<imp-use>, ...
	  * %R0<def> = A2_tfr %R16
	  * CALLv3nr <ga:@exit>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill,internal>, ...
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L2_deallocframe %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %R30<imp-use>

# End machine code for function xexit.

