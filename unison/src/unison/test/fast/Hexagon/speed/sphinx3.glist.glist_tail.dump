# After Instruction Selection:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg5
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Expand ISel Pseudo-instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg5
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Tail Duplication:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg5
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Optimize machine instruction PHIs:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg5
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Merge disjoint stack slots:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg5
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Local Stack Slot Allocation:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg5
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Remove dead machine instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg5
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Loop Invariant Code Motion:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5, <BB#2>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Common Subexpression Elimination:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5, <BB#2>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine code sinking:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5, <BB#2>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Peephole Optimizations:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5, <BB#2>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Remove dead machine instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5, <BB#2>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Hexagon Store Widening:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5, <BB#2>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Hexagon Hardware Loops:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5, <BB#2>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Process Implicit Definitions:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5, <BB#2>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Live Variable Analysis:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0<kill>; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#3>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg3, <BB#1>, %vreg1, <BB#2>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#2
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#2>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2<kill>; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Machine Natural Loop Construction:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0<kill>; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	J2_jumpt %vreg5<kill>, <BB#3>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg3, <BB#1>, %vreg1, <BB#2>; IntRegs:%vreg0,%vreg3,%vreg1
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	J2_jumpf %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#2
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#2>; IntRegs:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2<kill>; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Eliminate PHI nodes for register allocation:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0<kill>; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	%vreg8<def> = COPY %vreg4<kill>; IntRegs:%vreg8,%vreg4
	J2_jumpt %vreg5<kill>, <BB#3>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg7<def> = COPY %vreg3<kill>; IntRegs:%vreg7,%vreg3
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = COPY %vreg7<kill>; IntRegs:%vreg0,%vreg7
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	%vreg7<def> = COPY %vreg1<kill>; IntRegs:%vreg7,%vreg1
	%vreg8<def> = COPY %vreg0<kill>; IntRegs:%vreg8,%vreg0
	J2_jumpf %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#2
	%vreg2<def> = COPY %vreg8<kill>; IntRegs:%vreg2,%vreg8
	%R0<def> = COPY %vreg2<kill>; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Two-Address instruction pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0<kill>; IntRegs:%vreg3
	%vreg5<def> = C2_cmpeqi %vreg3, 0; PredRegs:%vreg5 IntRegs:%vreg3
	%vreg4<def> = A2_tfrsi 0; IntRegs:%vreg4
	%vreg8<def> = COPY %vreg4<kill>; IntRegs:%vreg8,%vreg4
	J2_jumpt %vreg5<kill>, <BB#3>, %PC<imp-def>; PredRegs:%vreg5
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg7<def> = COPY %vreg3<kill>; IntRegs:%vreg7,%vreg3
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = COPY %vreg7<kill>; IntRegs:%vreg0,%vreg7
	%vreg1<def> = L2_loadri_io %vreg0, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg1,%vreg0
	%vreg6<def> = C2_cmpeqi %vreg1, 0; PredRegs:%vreg6 IntRegs:%vreg1
	%vreg7<def> = COPY %vreg1<kill>; IntRegs:%vreg7,%vreg1
	%vreg8<def> = COPY %vreg0<kill>; IntRegs:%vreg8,%vreg0
	J2_jumpf %vreg6<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#2
	%vreg2<def> = COPY %vreg8<kill>; IntRegs:%vreg2,%vreg8
	%R0<def> = COPY %vreg2<kill>; IntRegs:%vreg2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Simple Register Coalescing:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg7<def> = COPY %R0; IntRegs:%vreg7
32B		%vreg5<def> = C2_cmpeqi %vreg7, 0; PredRegs:%vreg5 IntRegs:%vreg7
48B		%vreg8<def> = A2_tfrsi 0; IntRegs:%vreg8
80B		J2_jumpt %vreg5, <BB#3>, %PC<imp-def>; PredRegs:%vreg5
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

96B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

128B	BB#2: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#2 BB#1
144B		%vreg8<def> = COPY %vreg7; IntRegs:%vreg8,%vreg7
160B		%vreg7<def> = L2_loadri_io %vreg8, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg7,%vreg8
176B		%vreg6<def> = C2_cmpeqi %vreg7, 0; PredRegs:%vreg6 IntRegs:%vreg7
224B		J2_jumpf %vreg6, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
240B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

256B	BB#3: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#0 BB#2
288B		%R0<def> = COPY %vreg8; IntRegs:%vreg8
304B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Hexagon Expand Condsets:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg7<def> = COPY %R0; IntRegs:%vreg7
32B		%vreg5<def> = C2_cmpeqi %vreg7, 0; PredRegs:%vreg5 IntRegs:%vreg7
48B		%vreg8<def> = A2_tfrsi 0; IntRegs:%vreg8
80B		J2_jumpt %vreg5, <BB#3>, %PC<imp-def>; PredRegs:%vreg5
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

96B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

128B	BB#2: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#2 BB#1
144B		%vreg8<def> = COPY %vreg7; IntRegs:%vreg8,%vreg7
160B		%vreg7<def> = L2_loadri_io %vreg8, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg7,%vreg8
176B		%vreg6<def> = C2_cmpeqi %vreg7, 0; PredRegs:%vreg6 IntRegs:%vreg7
224B		J2_jumpf %vreg6, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
240B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

256B	BB#3: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#0 BB#2
288B		%R0<def> = COPY %vreg8; IntRegs:%vreg8
304B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Instruction Scheduler:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg7<def> = COPY %R0; IntRegs:%vreg7
48B		%vreg8<def> = A2_tfrsi 0; IntRegs:%vreg8
56B		%vreg5<def> = C2_cmpeqi %vreg7, 0; PredRegs:%vreg5 IntRegs:%vreg7
80B		J2_jumpt %vreg5, <BB#3>, %PC<imp-def>; PredRegs:%vreg5
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

96B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

128B	BB#2: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#2 BB#1
144B		%vreg8<def> = COPY %vreg7; IntRegs:%vreg8,%vreg7
160B		%vreg7<def> = L2_loadri_io %vreg8, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg7,%vreg8
176B		%vreg6<def> = C2_cmpeqi %vreg7, 0; PredRegs:%vreg6 IntRegs:%vreg7
224B		J2_jumpf %vreg6, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
240B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

256B	BB#3: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#0 BB#2
288B		%R0<def> = COPY %vreg8; IntRegs:%vreg8
304B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Greedy Register Allocator:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg7<def> = COPY %R0; IntRegs:%vreg7
48B		%vreg8<def> = A2_tfrsi 0; IntRegs:%vreg8
56B		%vreg5<def> = C2_cmpeqi %vreg7, 0; PredRegs:%vreg5 IntRegs:%vreg7
80B		J2_jumpt %vreg5, <BB#3>, %PC<imp-def>; PredRegs:%vreg5
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

96B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

128B	BB#2: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#2 BB#1
144B		%vreg8<def> = COPY %vreg7; IntRegs:%vreg8,%vreg7
160B		%vreg7<def> = L2_loadri_io %vreg8, 8; mem:LD4[%cgep2](align=8) IntRegs:%vreg7,%vreg8
176B		%vreg6<def> = C2_cmpeqi %vreg7, 0; PredRegs:%vreg6 IntRegs:%vreg7
224B		J2_jumpf %vreg6, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg6
240B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

256B	BB#3: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#0 BB#2
288B		%R0<def> = COPY %vreg8; IntRegs:%vreg8
304B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Virtual Register Rewriter:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
48B		%R1<def> = A2_tfrsi 0
56B		%P0<def> = C2_cmpeqi %R0, 0
80B		J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

96B	BB#1: 
	    Live Ins: %R0
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

128B	BB#2: derived from LLVM BB %.preheader
	    Live Ins: %R0
	    Predecessors according to CFG: BB#2 BB#1
144B		%R1<def> = COPY %R0<kill>
160B		%R0<def> = L2_loadri_io %R1, 8; mem:LD4[%cgep2](align=8)
176B		%P0<def> = C2_cmpeqi %R0, 0
224B		J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
240B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

256B	BB#3: derived from LLVM BB %.loopexit
	    Live Ins: %R1
	    Predecessors according to CFG: BB#0 BB#2
288B		%R0<def> = COPY %R1<kill>
304B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Stack Slot Coloring:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = COPY %R0<kill>
	%R0<def> = L2_loadri_io %R1, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = COPY %R1<kill>
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Loop Invariant Code Motion:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = COPY %R0<kill>
	%R0<def> = L2_loadri_io %R1, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = COPY %R1<kill>
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function glist_tail.

# After Hexagon RDF optimizations:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = COPY %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = COPY %R1<kill>
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Shrink Wrapping analysis:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = COPY %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = COPY %R1<kill>
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = COPY %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = COPY %R1<kill>
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Machine Copy Propagation Pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = COPY %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = COPY %R1<kill>
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = A2_tfr %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = A2_tfr %R1
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = A2_tfr %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = A2_tfr %R1
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Hexagon Split Const32s and Const64s:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = A2_tfr %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = A2_tfr %R1
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = A2_tfr %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpf %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = A2_tfr %R1
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Hexagon NewValueJump:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = A2_tfr %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	J4_cmpeqi_f_jumpnv_t %R0, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = A2_tfr %R1
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = A2_tfr %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	J4_cmpeqi_f_jumpnv_t %R0, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = A2_tfr %R1
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Hexagon Hardware Loop Fixup:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = A2_tfr %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	J4_cmpeqi_f_jumpnv_t %R0, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = A2_tfr %R1
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Hexagon generate mux instructions:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = A2_tfrsi 0
	%P0<def> = C2_cmpeqi %R0, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	%R1<def> = A2_tfr %R0
	%R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	J4_cmpeqi_f_jumpnv_t %R0, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	%R0<def> = A2_tfr %R1
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Hexagon Packetizer:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %P0<imp-def,dead>, %PC<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfrsi 0
	  * %P0<def> = C2_cmpeqi %R0, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R1<imp-def>, %R0<imp-def>, %PC<imp-def>, %R0<imp-use,kill>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	  * J4_cmpeqi_f_jumpnv_t %R0<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	BUNDLE %R0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use>, %R31<imp-use,kill>
	  * %R0<def> = A2_tfr %R1
	  * JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill,internal>

# End machine code for function glist_tail.

# After Hexagon call frame information:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %P0<imp-def,dead>, %PC<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfrsi 0
	  * %P0<def> = C2_cmpeqi %R0, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R1<imp-def>, %R0<imp-def>, %PC<imp-def>, %R0<imp-use,kill>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	  * J4_cmpeqi_f_jumpnv_t %R0<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	BUNDLE %R0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use>, %R31<imp-use,kill>
	  * %R0<def> = A2_tfr %R1
	  * JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill,internal>

# End machine code for function glist_tail.

# After Contiguously Lay Out Funclets:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %P0<imp-def,dead>, %PC<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfrsi 0
	  * %P0<def> = C2_cmpeqi %R0, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R1<imp-def>, %R0<imp-def>, %PC<imp-def>, %R0<imp-use,kill>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	  * J4_cmpeqi_f_jumpnv_t %R0<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	BUNDLE %R0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use>, %R31<imp-use,kill>
	  * %R0<def> = A2_tfr %R1
	  * JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill,internal>

# End machine code for function glist_tail.

# After StackMap Liveness Analysis:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %P0<imp-def,dead>, %PC<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfrsi 0
	  * %P0<def> = C2_cmpeqi %R0, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R1<imp-def>, %R0<imp-def>, %PC<imp-def>, %R0<imp-use,kill>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	  * J4_cmpeqi_f_jumpnv_t %R0<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	BUNDLE %R0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use>, %R31<imp-use,kill>
	  * %R0<def> = A2_tfr %R1
	  * JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill,internal>

# End machine code for function glist_tail.

# After Live DEBUG_VALUE analysis:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %P0<imp-def,dead>, %PC<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfrsi 0
	  * %P0<def> = C2_cmpeqi %R0, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %R0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R1<imp-def>, %R0<imp-def>, %PC<imp-def>, %R0<imp-use,kill>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = L2_loadri_io %R0<kill>, 8; mem:LD4[%cgep2](align=8)
	  * J4_cmpeqi_f_jumpnv_t %R0<internal>, 0, <BB#2>, %PC<imp-def>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %R1
    Predecessors according to CFG: BB#0 BB#2
	BUNDLE %R0<imp-def,dead>, %PC<imp-def,dead>, %R1<imp-use>, %R31<imp-use,kill>
	  * %R0<def> = A2_tfr %R1
	  * JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill,internal>

# End machine code for function glist_tail.

