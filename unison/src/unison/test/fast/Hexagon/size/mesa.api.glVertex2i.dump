# After Instruction Selection:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Expand ISel Pseudo-instructions:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Tail Duplication:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Optimize machine instruction PHIs:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Merge disjoint stack slots:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Local Stack Slot Allocation:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Remove dead machine instructions:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Machine Loop Invariant Code Motion:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Machine Common Subexpression Elimination:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Machine code sinking:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Peephole Optimizations:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Remove dead machine instructions:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon Store Widening:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon Hardware Loops:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Process Implicit Definitions:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1; IntRegs:%vreg1
	%vreg0<def> = COPY %R0; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2; IntRegs:%vreg2
	%R1<def> = COPY %vreg4; IntRegs:%vreg4
	%R2<def> = COPY %vreg5; IntRegs:%vreg5
	%R3<def> = COPY %vreg6; IntRegs:%vreg6
	%R4<def> = COPY %vreg7; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Live Variable Analysis:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1<kill>; IntRegs:%vreg1
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0<kill>; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0<kill>; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2<kill>; IntRegs:%vreg2
	%R1<def> = COPY %vreg4<kill>; IntRegs:%vreg4
	%R2<def> = COPY %vreg5<kill>; IntRegs:%vreg5
	%R3<def> = COPY %vreg6<kill>; IntRegs:%vreg6
	%R4<def> = COPY %vreg7<kill>; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %R4<imp-use,kill>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Machine Natural Loop Construction:
# Machine code for function glVertex2i: SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1<kill>; IntRegs:%vreg1
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0<kill>; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0<kill>; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2<kill>; IntRegs:%vreg2
	%R1<def> = COPY %vreg4<kill>; IntRegs:%vreg4
	%R2<def> = COPY %vreg5<kill>; IntRegs:%vreg5
	%R3<def> = COPY %vreg6<kill>; IntRegs:%vreg6
	%R4<def> = COPY %vreg7<kill>; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %R4<imp-use,kill>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Eliminate PHI nodes for register allocation:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1<kill>; IntRegs:%vreg1
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0<kill>; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0<kill>; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2<kill>; IntRegs:%vreg2
	%R1<def> = COPY %vreg4<kill>; IntRegs:%vreg4
	%R2<def> = COPY %vreg5<kill>; IntRegs:%vreg5
	%R3<def> = COPY %vreg6<kill>; IntRegs:%vreg6
	%R4<def> = COPY %vreg7<kill>; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %R4<imp-use,kill>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Two-Address instruction pass:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%vreg1<def> = COPY %R1<kill>; IntRegs:%vreg1
	%vreg0<def> = COPY %R0<kill>; IntRegs:%vreg0
	%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
	%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg0<kill>; IntRegs:%vreg0
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg4<def> = COPY %R0<kill>; IntRegs:%vreg4
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%vreg6<def> = A2_tfrsi 0; IntRegs:%vreg6
	%vreg7<def> = A2_tfrsi 1065353216; IntRegs:%vreg7
	%R0<def> = COPY %vreg2<kill>; IntRegs:%vreg2
	%R1<def> = COPY %vreg4<kill>; IntRegs:%vreg4
	%R2<def> = COPY %vreg5<kill>; IntRegs:%vreg5
	%R3<def> = COPY %vreg6<kill>; IntRegs:%vreg6
	%R4<def> = COPY %vreg7<kill>; IntRegs:%vreg7
	J2_callr %vreg3<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %R4<imp-use,kill>, ...; IntRegs:%vreg3
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Simple Register Coalescing:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1
16B		%vreg1<def> = COPY %R1; IntRegs:%vreg1
32B		%vreg0<def> = COPY %R0; IntRegs:%vreg0
48B		%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
64B		%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
80B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
96B		%R0<def> = COPY %vreg0; IntRegs:%vreg0
112B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
128B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
144B		%vreg4<def> = COPY %R0; IntRegs:%vreg4
160B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
176B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
192B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
240B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
288B		%R0<def> = COPY %vreg2; IntRegs:%vreg2
304B		%R1<def> = COPY %vreg4; IntRegs:%vreg4
320B		%R2<def> = COPY %vreg5; IntRegs:%vreg5
336B		%R3<def> = A2_tfrsi 0
352B		%R4<def> = A2_tfrsi 1065353216
368B		J2_callr %vreg3, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use,kill>, %R3<imp-use,kill>, %R4<imp-use,kill>, ...; IntRegs:%vreg3
384B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
400B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon Expand Condsets:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1
16B		%vreg1<def> = COPY %R1; IntRegs:%vreg1
32B		%vreg0<def> = COPY %R0; IntRegs:%vreg0
48B		%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
64B		%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
80B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
96B		%R0<def> = COPY %vreg0; IntRegs:%vreg0
112B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
128B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
144B		%vreg4<def> = COPY %R0; IntRegs:%vreg4
160B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
176B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
192B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
240B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
288B		%R0<def> = COPY %vreg2; IntRegs:%vreg2
304B		%R1<def> = COPY %vreg4; IntRegs:%vreg4
320B		%R2<def> = COPY %vreg5; IntRegs:%vreg5
336B		%R3<def> = A2_tfrsi 0
352B		%R4<def> = A2_tfrsi 1065353216
368B		J2_callr %vreg3, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use,kill>, %R3<imp-use,kill>, %R4<imp-use,kill>, ...; IntRegs:%vreg3
384B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
400B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Machine Instruction Scheduler:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1
8B		%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
12B		%vreg0<def> = COPY %R0; IntRegs:%vreg0
16B		%vreg1<def> = COPY %R1; IntRegs:%vreg1
80B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
96B		%R0<def> = COPY %vreg0; IntRegs:%vreg0
104B		%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
112B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
128B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
144B		%vreg4<def> = COPY %R0; IntRegs:%vreg4
176B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
184B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
192B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
216B		%R4<def> = A2_tfrsi 1065353216
220B		%R3<def> = A2_tfrsi 0
224B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
304B		%R1<def> = COPY %vreg4; IntRegs:%vreg4
320B		%R2<def> = COPY %vreg5; IntRegs:%vreg5
328B		%R0<def> = COPY %vreg2; IntRegs:%vreg2
360B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
368B		J2_callr %vreg3, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use,kill>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
384B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
400B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Greedy Register Allocator:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0 in %vreg0, %R1 in %vreg1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1
8B		%vreg2<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg2
12B		%vreg0<def> = COPY %R0; IntRegs:%vreg0
16B		%vreg1<def> = COPY %R1; IntRegs:%vreg1
80B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
96B		%R0<def> = COPY %vreg0; IntRegs:%vreg0
104B		%vreg3<def> = L2_loadri_io %vreg2, 656; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg3,%vreg2
112B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
128B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
144B		%vreg4<def> = COPY %R0; IntRegs:%vreg4
176B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
184B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
192B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
216B		%R4<def> = A2_tfrsi 1065353216
220B		%R3<def> = A2_tfrsi 0
224B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
304B		%R1<def> = COPY %vreg4; IntRegs:%vreg4
320B		%R2<def> = COPY %vreg5; IntRegs:%vreg5
328B		%R0<def> = COPY %vreg2; IntRegs:%vreg2
360B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
368B		J2_callr %vreg3, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...; IntRegs:%vreg3
384B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
400B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Virtual Register Rewriter:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0, %R1

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R1
8B		%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
16B		%R17<def> = COPY %R1
80B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
104B		%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
112B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
128B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
144B		%R18<def> = COPY %R0
176B		%R0<def> = COPY %R17<kill>
184B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
192B		J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
216B		%R4<def> = A2_tfrsi 1065353216
220B		%R3<def> = A2_tfrsi 0
304B		%R1<def> = COPY %R18<kill>
320B		%R2<def> = COPY %R0<kill>
328B		%R0<def> = COPY %R16<kill>
360B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
368B		J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
384B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
400B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Stack Slot Coloring:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = COPY %R1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R18<def> = COPY %R0
	%R0<def> = COPY %R17<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R4<def> = A2_tfrsi 1065353216
	%R3<def> = A2_tfrsi 0
	%R1<def> = COPY %R18<kill>
	%R2<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Machine Loop Invariant Code Motion:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = COPY %R1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R18<def> = COPY %R0
	%R0<def> = COPY %R17<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R4<def> = A2_tfrsi 1065353216
	%R3<def> = A2_tfrsi 0
	%R1<def> = COPY %R18<kill>
	%R2<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon RDF optimizations:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = COPY %R1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R18<def> = COPY %R0
	%R0<def> = COPY %R17<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R4<def> = A2_tfrsi 1065353216
	%R3<def> = A2_tfrsi 0
	%R1<def> = COPY %R18<kill>
	%R2<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Shrink Wrapping analysis:
# Machine code for function glVertex2i: Post SSA
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = COPY %R1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R18<def> = COPY %R0
	%R0<def> = COPY %R17<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R4<def> = A2_tfrsi 1065353216
	%R3<def> = A2_tfrsi 0
	%R1<def> = COPY %R18<kill>
	%R2<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = COPY %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = COPY %R0
	%R0<def> = COPY %R17<kill>
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%R3<def> = A2_tfrsi 0
	%R1<def> = COPY %R18<kill>
	%R2<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Machine Copy Propagation Pass:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = COPY %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = COPY %R0
	%R0<def> = COPY %R17<kill>
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%R3<def> = A2_tfrsi 0
	%R1<def> = COPY %R18<kill>
	%R2<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = A2_tfr %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R17
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%R3<def> = A2_tfrsi 0
	%R1<def> = A2_tfr %R18
	%R2<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R16
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = A2_tfr %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R17
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%D1<def> = A4_combineir 0, %R0
	%D0<def> = A2_combinew %R18, %R16
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon Split Const32s and Const64s:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = A2_tfr %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R17
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%D1<def> = A4_combineir 0, %R0
	%D0<def> = A2_combinew %R18, %R16
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = A2_tfr %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R17
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%D1<def> = A4_combineir 0, %R0
	%D0<def> = A2_combinew %R18, %R16
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon NewValueJump:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = A2_tfr %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R17
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%D1<def> = A4_combineir 0, %R0
	%D0<def> = A2_combinew %R18, %R16
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = A2_tfr %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R17
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%D1<def> = A4_combineir 0, %R0
	%D0<def> = A2_combinew %R18, %R16
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon Hardware Loop Fixup:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = A2_tfr %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R17
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%D1<def> = A4_combineir 0, %R0
	%D0<def> = A2_combinew %R18, %R16
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon generate mux instructions:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 8, %D8<kill>; mem:ST8[FixedStack-1]
	S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = A2_tfr %R1
	%R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R18<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R17
	J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	%R4<def> = A2_tfrsi 1065353216
	%D1<def> = A4_combineir 0, %R0
	%D0<def> = A2_combinew %R18, %R16
	J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	%D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon Packetizer:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	BUNDLE %R16<imp-def>, %R17<imp-def>, %R29<imp-use>, %D9<imp-use,kill>, %R1<imp-use>
	  * S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	  * %R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	  * %R17<def> = A2_tfr %R1
	BUNDLE %R19<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %R0<imp-use>, ...
	  * %R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	BUNDLE %R18<imp-def>, %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R17<imp-use>, ...
	  * %R18<def> = A2_tfr %R0
	  * %R0<def> = A2_tfr %R17
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R4<imp-def>, %D1<imp-def>, %R2<imp-def>, %R3<imp-def>, %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R0<imp-use>, %R18<imp-use>, %R16<imp-use>
	  * %R4<def> = A2_tfrsi 1065353216
	  * %D1<def> = A4_combineir 0, %R0
	  * %D0<def> = A2_combinew %R18, %R16
	BUNDLE %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %D9<imp-def>, %R18<imp-def>, %R19<imp-def>, %R19<imp-use,kill>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, %R29<imp-use>, ...
	  * J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	  * %D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	  * %D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Hexagon call frame information:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	BUNDLE %R16<imp-def>, %R17<imp-def>, %R29<imp-use>, %D9<imp-use,kill>, %R1<imp-use>
	  * S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	  * %R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	  * %R17<def> = A2_tfr %R1
	BUNDLE %R19<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %R0<imp-use>, ...
	  * %R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	BUNDLE %R18<imp-def>, %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R17<imp-use>, ...
	  * %R18<def> = A2_tfr %R0
	  * %R0<def> = A2_tfr %R17
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R4<imp-def>, %D1<imp-def>, %R2<imp-def>, %R3<imp-def>, %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R0<imp-use>, %R18<imp-use>, %R16<imp-use>
	  * %R4<def> = A2_tfrsi 1065353216
	  * %D1<def> = A4_combineir 0, %R0
	  * %D0<def> = A2_combinew %R18, %R16
	BUNDLE %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %D9<imp-def>, %R18<imp-def>, %R19<imp-def>, %R19<imp-use,kill>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, %R29<imp-use>, ...
	  * J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	  * %D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	  * %D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Contiguously Lay Out Funclets:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	BUNDLE %R16<imp-def>, %R17<imp-def>, %R29<imp-use>, %D9<imp-use,kill>, %R1<imp-use>
	  * S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	  * %R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	  * %R17<def> = A2_tfr %R1
	BUNDLE %R19<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %R0<imp-use>, ...
	  * %R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	BUNDLE %R18<imp-def>, %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R17<imp-use>, ...
	  * %R18<def> = A2_tfr %R0
	  * %R0<def> = A2_tfr %R17
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R4<imp-def>, %D1<imp-def>, %R2<imp-def>, %R3<imp-def>, %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R0<imp-use>, %R18<imp-use>, %R16<imp-use>
	  * %R4<def> = A2_tfrsi 1065353216
	  * %D1<def> = A4_combineir 0, %R0
	  * %D0<def> = A2_combinew %R18, %R16
	BUNDLE %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %D9<imp-def>, %R18<imp-def>, %R19<imp-def>, %R19<imp-use,kill>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, %R29<imp-use>, ...
	  * J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	  * %D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	  * %D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After StackMap Liveness Analysis:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	BUNDLE %R16<imp-def>, %R17<imp-def>, %R29<imp-use>, %D9<imp-use,kill>, %R1<imp-use>
	  * S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	  * %R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	  * %R17<def> = A2_tfr %R1
	BUNDLE %R19<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %R0<imp-use>, ...
	  * %R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	BUNDLE %R18<imp-def>, %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R17<imp-use>, ...
	  * %R18<def> = A2_tfr %R0
	  * %R0<def> = A2_tfr %R17
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R4<imp-def>, %D1<imp-def>, %R2<imp-def>, %R3<imp-def>, %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R0<imp-use>, %R18<imp-use>, %R16<imp-use>
	  * %R4<def> = A2_tfrsi 1065353216
	  * %D1<def> = A4_combineir 0, %R0
	  * %D0<def> = A2_combinew %R18, %R16
	BUNDLE %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %D9<imp-def>, %R18<imp-def>, %R19<imp-def>, %R19<imp-use,kill>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, %R29<imp-use>, ...
	  * J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	  * %D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	  * %D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

# After Live DEBUG_VALUE analysis:
# Machine code for function glVertex2i: Post SSA
Frame Objects:
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R1

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R1 %D8 %D9 %D8 %D9
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 16, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	BUNDLE %R16<imp-def>, %R17<imp-def>, %R29<imp-use>, %D9<imp-use,kill>, %R1<imp-use>
	  * S2_storerd_io %R29, 0, %D9<kill>; mem:ST8[FixedStack-2]
	  * %R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	  * %R17<def> = A2_tfr %R1
	BUNDLE %R19<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %R0<imp-use>, ...
	  * %R19<def> = L2_loadri_io %R16, 656; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R0<imp-def>, ...
	BUNDLE %R18<imp-def>, %R0<imp-def>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R17<imp-use>, ...
	  * %R18<def> = A2_tfr %R0
	  * %R0<def> = A2_tfr %R17
	  * J2_call <es:__hexagon_floatsisf>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R0<imp-def>, ...
	BUNDLE %R4<imp-def>, %D1<imp-def>, %R2<imp-def>, %R3<imp-def>, %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R0<imp-use>, %R18<imp-use>, %R16<imp-use>
	  * %R4<def> = A2_tfrsi 1065353216
	  * %D1<def> = A4_combineir 0, %R0
	  * %D0<def> = A2_combinew %R18, %R16
	BUNDLE %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %D9<imp-def>, %R18<imp-def>, %R19<imp-def>, %R19<imp-use,kill>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, %R29<imp-use>, ...
	  * J2_callr %R19<kill>, %D0<imp-def,dead>, %D1<imp-def,dead>, %D2<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %R4<imp-use>, ...
	  * %D8<def> = L2_loadrd_io %R29, 8; mem:LD8[FixedStack-1]
	  * %D9<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-2]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glVertex2i.

