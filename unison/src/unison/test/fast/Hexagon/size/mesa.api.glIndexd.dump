# After Instruction Selection:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Expand ISel Pseudo-instructions:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Tail Duplication:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Optimize machine instruction PHIs:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Merge disjoint stack slots:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Local Stack Slot Allocation:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Remove dead machine instructions:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Machine Loop Invariant Code Motion:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Machine Common Subexpression Elimination:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Machine code sinking:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Peephole Optimizations:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Remove dead machine instructions:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon Store Widening:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon Hardware Loops:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Process Implicit Definitions:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def>, %R31<imp-def,dead>, %D0<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg3; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Live Variable Analysis:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0<kill>; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0<kill>; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0<kill>; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	%R1<def> = COPY %vreg3<kill>; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Machine Natural Loop Construction:
# Machine code for function glIndexd: SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0<kill>; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0<kill>; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0<kill>; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	%R1<def> = COPY %vreg3<kill>; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Eliminate PHI nodes for register allocation:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0<kill>; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0<kill>; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0<kill>; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	%R1<def> = COPY %vreg3<kill>; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Two-Address instruction pass:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%vreg0<def> = COPY %D0<kill>; DoubleRegs:%vreg0
	%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
	%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%D0<def> = COPY %vreg0<kill>; DoubleRegs:%vreg0
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg3<def> = COPY %R0<kill>; IntRegs:%vreg3
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	%R1<def> = COPY %vreg3<kill>; IntRegs:%vreg3
	J2_callr %vreg2<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, ...; IntRegs:%vreg2
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Simple Register Coalescing:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %D0
16B		%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
32B		%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
48B		%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
64B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
80B		%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
96B		J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
112B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
128B		%vreg3<def> = COPY %R0; IntRegs:%vreg3
144B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
160B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
176B		%R1<def> = COPY %vreg3; IntRegs:%vreg3
192B		J2_callr %vreg2, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon Expand Condsets:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %D0
16B		%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
32B		%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
48B		%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
64B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
80B		%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
96B		J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
112B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
128B		%vreg3<def> = COPY %R0; IntRegs:%vreg3
144B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
160B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
176B		%R1<def> = COPY %vreg3; IntRegs:%vreg3
192B		J2_callr %vreg2, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Machine Instruction Scheduler:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %D0
8B		%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
16B		%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
64B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
80B		%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
88B		%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
96B		J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
112B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
128B		%vreg3<def> = COPY %R0; IntRegs:%vreg3
176B		%R1<def> = COPY %vreg3; IntRegs:%vreg3
180B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
184B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
192B		J2_callr %vreg2, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Greedy Register Allocator:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %D0
8B		%vreg1<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2) IntRegs:%vreg1
16B		%vreg0<def> = COPY %D0; DoubleRegs:%vreg0
64B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
80B		%D0<def> = COPY %vreg0; DoubleRegs:%vreg0
88B		%vreg2<def> = L2_loadri_io %vreg1, 380; mem:LD4[%cgep2](tbaa=!6) IntRegs:%vreg2,%vreg1
96B		J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
112B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
128B		%vreg3<def> = COPY %R0; IntRegs:%vreg3
176B		%R1<def> = COPY %vreg3; IntRegs:%vreg3
180B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
184B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
192B		J2_callr %vreg2, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...; IntRegs:%vreg2
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Virtual Register Rewriter:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %D0
8B		%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
64B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
88B		%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
96B		J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
112B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
176B		%R1<def> = COPY %R0<kill>
180B		%R0<def> = COPY %R16<kill>
184B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
192B		J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
208B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Stack Slot Coloring:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R1<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Machine Loop Invariant Code Motion:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R1<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon RDF optimizations:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R1<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Shrink Wrapping analysis:
# Machine code for function glIndexd: Post SSA
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%R1<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%R1<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Machine Copy Propagation Pass:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%R1<def> = COPY %R0<kill>
	%R0<def> = COPY %R16<kill>
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfr %R16
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%D0<def> = A2_combinew %R0, %R16
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon Split Const32s and Const64s:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%D0<def> = A2_combinew %R0, %R16
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%D0<def> = A2_combinew %R0, %R16
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon NewValueJump:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%D0<def> = A2_combinew %R0, %R16
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%D0<def> = A2_combinew %R0, %R16
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon Hardware Loop Fixup:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%D0<def> = A2_combinew %R0, %R16
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon generate mux instructions:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	%R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	%D0<def> = A2_combinew %R0, %R16
	J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon Packetizer:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	BUNDLE %R17<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %D0<imp-use>, ...
	  * %R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	BUNDLE %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R0<imp-use>, %R16<imp-use>, %R17<imp-use,kill>, %R29<imp-use>, ...
	  * %D0<def> = A2_combinew %R0, %R16
	  * J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use,internal>, ...
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Hexagon call frame information:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	BUNDLE %R17<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %D0<imp-use>, ...
	  * %R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	BUNDLE %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R0<imp-use>, %R16<imp-use>, %R17<imp-use,kill>, %R29<imp-use>, ...
	  * %D0<def> = A2_combinew %R0, %R16
	  * J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use,internal>, ...
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Contiguously Lay Out Funclets:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	BUNDLE %R17<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %D0<imp-use>, ...
	  * %R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	BUNDLE %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R0<imp-use>, %R16<imp-use>, %R17<imp-use,kill>, %R29<imp-use>, ...
	  * %D0<def> = A2_combinew %R0, %R16
	  * J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use,internal>, ...
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After StackMap Liveness Analysis:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	BUNDLE %R17<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %D0<imp-use>, ...
	  * %R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	BUNDLE %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R0<imp-use>, %R16<imp-use>, %R17<imp-use,kill>, %R29<imp-use>, ...
	  * %D0<def> = A2_combinew %R0, %R16
	  * J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use,internal>, ...
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

# After Live DEBUG_VALUE analysis:
# Machine code for function glIndexd: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %D0

BB#0: derived from LLVM BB %0
    Live Ins: %D0 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = L4_loadri_abs <ga:@CC>; mem:LD4[@CC](tbaa=!2)
	BUNDLE %R17<imp-def>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-def>, %R16<imp-use>, %D0<imp-use>, ...
	  * %R17<def> = L2_loadri_io %R16, 380; mem:LD4[%cgep2](tbaa=!6)
	  * J2_call <es:__hexagon_truncdfsf2>, %D0<imp-def,dead>, %R31<imp-def,dead>, %D0<imp-use>, %R0<imp-def>, ...
	BUNDLE %D0<imp-def>, %R0<imp-def>, %R1<imp-def>, %R31<imp-def,dead>, %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R0<imp-use>, %R16<imp-use>, %R17<imp-use,kill>, %R29<imp-use>, ...
	  * %D0<def> = A2_combinew %R0, %R16
	  * J2_callr %R17<kill>, %D0<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,internal>, %R1<imp-use,internal>, ...
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function glIndexd.

