# After Instruction Selection:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Expand ISel Pseudo-instructions:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Tail Duplication:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Optimize machine instruction PHIs:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Merge disjoint stack slots:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Local Stack Slot Allocation:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Remove dead machine instructions:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Machine Loop Invariant Code Motion:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Machine Common Subexpression Elimination:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Machine code sinking:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Peephole Optimizations:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Remove dead machine instructions:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon Store Widening:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon Hardware Loops:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Process Implicit Definitions:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; IntRegs:%vreg3
	%vreg1<def> = COPY %R0; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1; IntRegs:%vreg1
	%R1<def> = COPY %vreg0; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Live Variable Analysis:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2<kill>; IntRegs:%vreg3
	%vreg1<def> = COPY %R0<kill>; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	%R1<def> = COPY %vreg0<kill>; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5<kill>, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3<kill>, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Machine Natural Loop Construction:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2<kill>; IntRegs:%vreg3
	%vreg1<def> = COPY %R0<kill>; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	%R1<def> = COPY %vreg0<kill>; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5<kill>, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3<kill>, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Eliminate PHI nodes for register allocation:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2<kill>; IntRegs:%vreg3
	%vreg1<def> = COPY %R0<kill>; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	%R1<def> = COPY %vreg0<kill>; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5<kill>, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3<kill>, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Two-Address instruction pass:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2<kill>; IntRegs:%vreg3
	%vreg1<def> = COPY %R0<kill>; IntRegs:%vreg1
	%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
	%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
	J2_jumpt %vreg4<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	%R0<def> = COPY %vreg1<kill>; IntRegs:%vreg1
	%R1<def> = COPY %vreg0<kill>; IntRegs:%vreg0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = C2_cmpeqi %vreg5<kill>, 0; PredRegs:%vreg6 IntRegs:%vreg5
	J2_jumpt %vreg6<kill>, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	S4_storeiri_io %vreg3<kill>, 0, 0; mem:ST4[%8] IntRegs:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Simple Register Coalescing:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%vreg3<def> = COPY %R2; IntRegs:%vreg3
32B		%vreg1<def> = COPY %R0; IntRegs:%vreg1
48B		%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
64B		%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
80B		J2_jumpt %vreg4, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
96B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
144B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
160B		%R1<def> = COPY %vreg0; IntRegs:%vreg0
176B		J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use,kill>, %R0<imp-def>, ...
192B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
208B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
224B		%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
240B		J2_jumpt %vreg6, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
256B		J2_jump <BB#2>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Predecessors according to CFG: BB#1
288B		S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
	    Successors according to CFG: BB#3(?%)

304B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
320B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon Expand Condsets:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%vreg3<def> = COPY %R2; IntRegs:%vreg3
32B		%vreg1<def> = COPY %R0; IntRegs:%vreg1
48B		%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
64B		%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
80B		J2_jumpt %vreg4, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
96B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
144B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
160B		%R1<def> = COPY %vreg0; IntRegs:%vreg0
176B		J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use,kill>, %R0<imp-def>, ...
192B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
208B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
224B		%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
240B		J2_jumpt %vreg6, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
256B		J2_jump <BB#2>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Predecessors according to CFG: BB#1
288B		S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
	    Successors according to CFG: BB#3(?%)

304B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
320B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Machine Instruction Scheduler:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%vreg3<def> = COPY %R2; IntRegs:%vreg3
48B		%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
56B		%vreg1<def> = COPY %R0; IntRegs:%vreg1
64B		%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
80B		J2_jumpt %vreg4, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
96B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0
160B		%R1<def> = COPY %vreg0; IntRegs:%vreg0
164B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
168B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
176B		J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use,kill>, %R0<imp-def>, ...
184B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
192B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
240B		J2_jumpt %vreg6, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
256B		J2_jump <BB#2>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Predecessors according to CFG: BB#1
288B		S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
	    Successors according to CFG: BB#3(?%)

304B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
320B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Greedy Register Allocator:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%vreg3<def> = COPY %R2; IntRegs:%vreg3
48B		%vreg0<def> = L2_loadri_io %vreg3, 0; mem:LD4[%1] IntRegs:%vreg0,%vreg3
56B		%vreg1<def> = COPY %R0; IntRegs:%vreg1
64B		%vreg4<def> = C2_cmpeqi %vreg0, 0; PredRegs:%vreg4 IntRegs:%vreg0
80B		J2_jumpt %vreg4, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg4
96B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0
160B		%R1<def> = COPY %vreg0; IntRegs:%vreg0
164B		%R0<def> = COPY %vreg1; IntRegs:%vreg1
168B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
176B		J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
184B		%vreg5<def> = COPY %R0; IntRegs:%vreg5
192B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%vreg6<def> = C2_cmpeqi %vreg5, 0; PredRegs:%vreg6 IntRegs:%vreg5
240B		J2_jumpt %vreg6, <BB#3>, %PC<imp-def,dead>; PredRegs:%vreg6
256B		J2_jump <BB#2>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Predecessors according to CFG: BB#1
288B		S4_storeiri_io %vreg3, 0, 0; mem:ST4[%8] IntRegs:%vreg3
	    Successors according to CFG: BB#3(?%)

304B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
320B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Virtual Register Rewriter:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%R16<def> = COPY %R2
48B		%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
64B		%P0<def> = C2_cmpeqi %R1, 0
80B		J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
96B		J2_jump <BB#1>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Live Ins: %R0 %R1 %R16
	    Predecessors according to CFG: BB#0
168B		ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
176B		J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
192B		ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
224B		%P0<def> = C2_cmpeqi %R0<kill>, 0
240B		J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
256B		J2_jump <BB#2>, %PC<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Live Ins: %R16
	    Predecessors according to CFG: BB#1
288B		S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
	    Successors according to CFG: BB#3(?%)

304B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
320B		JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Stack Slot Coloring:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%R16<def> = COPY %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Machine Loop Invariant Code Motion:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%R16<def> = COPY %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use>, %R30<imp-use>, %R29<imp-use>
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use>, %R1<imp-use>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use>
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon RDF optimizations:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%R16<def> = COPY %R2<kill>
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use,kill>, %R30<imp-use,kill>, %R29<imp-use,kill>
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use,kill>
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Shrink Wrapping analysis:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%R16<def> = COPY %R2<kill>
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-use,kill>, %R30<imp-use,kill>, %R29<imp-use,kill>
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, %R29<imp-def,dead>, %R30<imp-def,dead>, %R31<imp-def,dead>, %R29<imp-use,kill>
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = COPY %R2<kill>
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Machine Copy Propagation Pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = COPY %R2<kill>
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon Split Const32s and Const64s:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	%P0<def> = C2_cmpeqi %R1, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon NewValueJump:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	J4_cmpeqi_t_jumpnv_nt %R1, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	J4_cmpeqi_t_jumpnv_nt %R1, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon Hardware Loop Fixup:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	J4_cmpeqi_t_jumpnv_nt %R1, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon generate mux instructions:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	S2_storerd_io %R29, 0, %D8<kill>; mem:ST8[FixedStack-1]
	%R16<def> = A2_tfr %R2
	%R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	J4_cmpeqi_t_jumpnv_nt %R1, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	%P0<def> = C2_cmpeqi %R0<kill>, 0
	J2_jumpt %P0<kill>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon Packetizer:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R2<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R2
	BUNDLE %R1<imp-def>, %PC<imp-def>, %R16<imp-use>
	  * %R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	  * J4_cmpeqi_t_jumpnv_nt %R1<internal>, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Hexagon call frame information:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R2<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R2
	BUNDLE %R1<imp-def>, %PC<imp-def>, %R16<imp-use>
	  * %R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	  * J4_cmpeqi_t_jumpnv_nt %R1<internal>, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Contiguously Lay Out Funclets:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R2<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R2
	BUNDLE %R1<imp-def>, %PC<imp-def>, %R16<imp-use>
	  * %R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	  * J4_cmpeqi_t_jumpnv_nt %R1<internal>, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After StackMap Liveness Analysis:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R2<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R2
	BUNDLE %R1<imp-def>, %PC<imp-def>, %R16<imp-use>
	  * %R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	  * J4_cmpeqi_t_jumpnv_nt %R1<internal>, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

# After Live DEBUG_VALUE analysis:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#-1: size=8, align=8, fixed, at location [SP-8]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %D8 %D8
	BUNDLE %R29<imp-def>, %R30<imp-def>, %R16<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>, %D8<imp-use,kill>, %R2<imp-use>
	  * S2_allocframe 8, %R29<imp-def>, %R30<imp-def>, %R29<imp-use>, %R31<imp-use>, %R30<imp-use>; mem:ST4[<unknown>]
	  * S2_storerd_io %R29<internal>, -16, %D8<kill>; mem:ST8[FixedStack-1]
	  * %R16<def> = A2_tfr %R2
	BUNDLE %R1<imp-def>, %PC<imp-def>, %R16<imp-use>
	  * %R1<def> = L2_loadri_io %R16, 0; mem:LD4[%1]
	  * J4_cmpeqi_t_jumpnv_nt %R1<internal>, 0, <BB#3>, %PC<imp-def>
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R16
    Predecessors according to CFG: BB#0
	J2_call <ga:@reg_mentioned_p>, %D0<imp-def,dead>, %D1<imp-def,dead>, %R31<imp-def,dead>, %P0<imp-def,dead>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R0<imp-def>, ...
	BUNDLE %P0<imp-def,dead>, %PC<imp-def,dead>, %R0<imp-use,kill>
	  * %P0<def> = C2_cmpeqi %R0<kill>, 0
	  * J2_jumptnew %P0<kill,internal>, <BB#3>, %PC<imp-def,dead>
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R16 %R31
    Predecessors according to CFG: BB#1
	S4_storeiri_io %R16<kill>, 0, 0; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Live Ins: %R31
    Predecessors according to CFG: BB#0 BB#1 BB#2
	BUNDLE %D8<imp-def>, %R16<imp-def>, %R17<imp-def>, %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R29<imp-use>, %R30<imp-use>
	  * %D8<def> = L2_loadrd_io %R29, 0; mem:LD8[FixedStack-1]
	  * L4_return %R29<imp-def>, %R30<imp-def>, %R31<imp-def>, %PC<imp-def>, %R30<imp-use>, %PC<imp-def,dead>

# End machine code for function insn_dependent_p_1.

