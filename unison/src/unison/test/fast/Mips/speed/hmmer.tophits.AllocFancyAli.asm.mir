--- |
  ; ModuleID = 'hmmer.tophits.AllocFancyAli.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct.fancyali_s.23 = type { i8*, i8*, i8*, i8*, i8*, i32, i8*, i8*, i32, i32 }
  
  @.str = external hidden unnamed_addr constant [10 x i8], align 1
  
  declare i8* @sre_malloc(i8*, i32 signext, i32 signext) #0
  
  ; Function Attrs: nounwind
  define %struct.fancyali_s.23* @AllocFancyAli() #1 {
    %1 = tail call i8* @sre_malloc(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i32 0, i32 0), i32 signext 117, i32 signext 40) #3
    %2 = bitcast i8* %1 to %struct.fancyali_s.23*
    %3 = getelementptr inbounds i8, i8* %1, i32 24
    tail call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 20, i32 4, i1 false)
    tail call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i32 4, i1 false)
    ret %struct.fancyali_s.23* %2
  }
  
  ; Function Attrs: argmemonly nounwind
  declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2
  
  attributes #0 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { argmemonly nounwind "target-cpu"="mips32" }
  attributes #3 = { nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            AllocFancyAli
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       24
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %t9, %ra
    liveouts:
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -24
    CFI_INSTRUCTION .cfi_def_cfa_offset 24
    SW killed %ra, %sp, 20 :: (store 4 into %stack.0)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    %gp = ADDu %v0, %t9
    %a0 = LW %gp, target-flags(<unknown>) @.str :: (load 4 from got)
    %t9 = LW %gp, target-flags(<unknown>) @sre_malloc :: (load 4 from call-entry @sre_malloc)
    %a1 = ADDiu %zero, 117
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit killed %a2, implicit %gp, implicit-def %sp, implicit-def %v0 {
      %a2 = ADDiu %zero, 40
    }
    SW %zero, %v0, 16 :: (store 4 into %ir.1 + 16)
    SW %zero, %v0, 12 :: (store 4 into %ir.1 + 12)
    SW %zero, %v0, 8 :: (store 4 into %ir.1 + 8)
    SW %zero, %v0, 4 :: (store 4 into %ir.1 + 4)
    SW %zero, %v0, 0 :: (store 4 into %ir.1)
    SW %zero, %v0, 36 :: (store 4 into %ir.3 + 12)
    SW %zero, %v0, 32 :: (store 4 into %ir.3 + 8)
    SW %zero, %v0, 28 :: (store 4 into %ir.3 + 4)
    SW %zero, %v0, 24 :: (store 4 into %ir.3)
    %ra = LW %sp, 20 :: (load 4 from %stack.0)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 24
    }

...
