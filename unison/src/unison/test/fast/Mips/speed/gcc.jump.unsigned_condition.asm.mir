--- |
  ; ModuleID = 'gcc.jump.unsigned_condition.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  @.str = external hidden unnamed_addr constant [7 x i8], align 1
  @__FUNCTION__.unsigned_condition = external hidden unnamed_addr constant [19 x i8], align 1
  @switch.table.4 = external hidden unnamed_addr constant [10 x i32]
  
  ; Function Attrs: noreturn
  declare void @fancy_abort(i8*, i32 signext, i8*) #0
  
  ; Function Attrs: nounwind
  define i32 @unsigned_condition(i32 signext %code) #1 {
    %switch.tableidx = add i32 %code, -102
    %1 = icmp ult i32 %switch.tableidx, 10
    br i1 %1, label %switch.lookup, label %2
  
  ; <label>:2                                       ; preds = %0
    tail call void @fancy_abort(i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i32 signext 951, i8* nonnull getelementptr inbounds ([19 x i8], [19 x i8]* @__FUNCTION__.unsigned_condition, i32 0, i32 0)) #2
    unreachable
  
  switch.lookup:                                    ; preds = %0
    %switch.gep = getelementptr inbounds [10 x i32], [10 x i32]* @switch.table.4, i32 0, i32 %switch.tableidx
    %switch.load = load i32, i32* %switch.gep, align 4
    ret i32 %switch.load
  }
  
  attributes #0 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #2 = { noreturn nounwind }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            unsigned_condition
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%a0' }
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       24
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
body:             |
  bb.0 (%ir-block.0, freq 16):
    successors: %bb.1(50), %bb.3.switch.lookup(50)
    liveins: %a0, %t9, %ra
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -24
    CFI_INSTRUCTION .cfi_def_cfa_offset 24
    SW killed %ra, %sp, 20 :: (store 4 into %stack.0)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    %gp = ADDu %v0, %t9
    %v0 = ADDiu killed %a0, -102
    %at = SLTiu %v0, 10
    BNE killed %at, %zero, %bb.3.switch.lookup, implicit-def dead %at {
      NOP
    }
  
  bb.1 (%ir-block.0, freq 8):
    successors: %bb.2(100)
  
    B %bb.2, implicit-def dead %at {
      NOP
    }
  
  bb.2 (%ir-block.2, freq 8):
    liveins: %gp
    exit
  
    %a0 = LW %gp, target-flags(<unknown>) @.str :: (load 4 from got)
    %a2 = LW %gp, target-flags(<unknown>) @__FUNCTION__.unsigned_condition :: (load 4 from got)
    %t9 = LW %gp, target-flags(<unknown>) @fancy_abort :: (load 4 from call-entry @fancy_abort)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit killed %a1, implicit %a2, implicit %gp, implicit-def %sp {
      %a1 = ADDiu %zero, 951
    }
  
  bb.3.switch.lookup (freq 8):
    liveins: %gp, %v0
    liveouts:
  
    %at = SLL killed %v0, 2
    %v0 = LW killed %gp, target-flags(<unknown>) @switch.table.4 :: (load 4 from got)
    %at = ADDu killed %v0, killed %at
    %v0 = LW killed %at, 0 :: (load 4 from %ir.switch.gep)
    %ra = LW %sp, 20 :: (load 4 from %stack.0)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 24
    }

...
