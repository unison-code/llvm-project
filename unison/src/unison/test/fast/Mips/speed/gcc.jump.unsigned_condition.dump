# After Instruction Selection:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %vreg6<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...; GPR32:%vreg6
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Expand ISel Pseudo-instructions:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %vreg6<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...; GPR32:%vreg6
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Mips OptimizePICCall:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Tail Duplication:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Optimize machine instruction PHIs:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Merge disjoint stack slots:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Local Stack Slot Allocation:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Remove dead machine instructions:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Machine Loop Invariant Code Motion:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Machine Common Subexpression Elimination:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Machine code sinking:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Peephole Optimizations:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Remove dead machine instructions:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Process Implicit Definitions:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4; GPR32:%vreg4
	%A1<def> = COPY %vreg7; GPR32:%vreg7
	%A2<def> = COPY %vreg5; GPR32:%vreg5
	%GP<def> = COPY %vreg3; GPR32:%vreg3
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11; GPR32:%vreg11
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Live Variable Analysis:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg3
	%vreg1<def> = COPY %A0<kill>; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1<kill>, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4<kill>; GPR32:%vreg4
	%A1<def> = COPY %vreg7<kill>; GPR32:%vreg7
	%A2<def> = COPY %vreg5<kill>; GPR32:%vreg5
	%GP<def> = COPY %vreg3<kill>; GPR32:%vreg3
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0<kill>, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11<kill>; GPR32:%vreg11
	RetRA %V0<imp-use,kill>

# End machine code for function unsigned_condition.

# After Machine Natural Loop Construction:
# Machine code for function unsigned_condition: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg3
	%vreg1<def> = COPY %A0<kill>; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1<kill>, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4<kill>; GPR32:%vreg4
	%A1<def> = COPY %vreg7<kill>; GPR32:%vreg7
	%A2<def> = COPY %vreg5<kill>; GPR32:%vreg5
	%GP<def> = COPY %vreg3<kill>; GPR32:%vreg3
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0<kill>, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11<kill>; GPR32:%vreg11
	RetRA %V0<imp-use,kill>

# End machine code for function unsigned_condition.

# After Eliminate PHI nodes for register allocation:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg3
	%vreg1<def> = COPY %A0<kill>; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1<kill>, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4<kill>; GPR32:%vreg4
	%A1<def> = COPY %vreg7<kill>; GPR32:%vreg7
	%A2<def> = COPY %vreg5<kill>; GPR32:%vreg5
	%GP<def> = COPY %vreg3<kill>; GPR32:%vreg3
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0<kill>, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11<kill>; GPR32:%vreg11
	RetRA %V0<imp-use,kill>

# End machine code for function unsigned_condition.

# After Two-Address instruction pass:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg3<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg3
	%vreg1<def> = COPY %A0<kill>; GPR32:%vreg1
	%vreg0<def> = ADDiu %vreg1<kill>, -102; GPR32:%vreg0,%vreg1
	%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
	BNE %vreg2<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
	%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
	%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
	%vreg7<def> = ADDiu %ZERO, 951; GPR32:%vreg7
	%A0<def> = COPY %vreg4<kill>; GPR32:%vreg4
	%A1<def> = COPY %vreg7<kill>; GPR32:%vreg7
	%A2<def> = COPY %vreg5<kill>; GPR32:%vreg5
	%GP<def> = COPY %vreg3<kill>; GPR32:%vreg3
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Predecessors according to CFG: BB#0
	%vreg8<def> = SLL %vreg0<kill>, 2; GPR32:%vreg8,%vreg0
	%vreg9<def> = LW %vreg3<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
	%vreg10<def> = ADDu %vreg9<kill>, %vreg8<kill>; GPR32:%vreg10,%vreg9,%vreg8
	%vreg11<def> = LW %vreg10<kill>, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
	%V0<def> = COPY %vreg11<kill>; GPR32:%vreg11
	RetRA %V0<imp-use,kill>

# End machine code for function unsigned_condition.

# After Simple Register Coalescing:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
32B		%vreg1<def> = COPY %A0; GPR32:%vreg1
48B		%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
64B		%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
80B		BNE %vreg2, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

112B	BB#1: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
160B		%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
176B		%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
208B		%A0<def> = COPY %vreg4; GPR32:%vreg4
224B		%A1<def> = ADDiu %ZERO, 951
240B		%A2<def> = COPY %vreg5; GPR32:%vreg5
256B		%GP<def> = COPY %vreg3; GPR32:%vreg3
272B		%T9<def> = COPY %vreg6; GPR32:%vreg6
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

320B	BB#2: derived from LLVM BB %switch.lookup
	    Predecessors according to CFG: BB#0
336B		%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
352B		%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
368B		%vreg10<def> = ADDu %vreg9, %vreg8; GPR32:%vreg10,%vreg9,%vreg8
384B		%vreg11<def> = LW %vreg10, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
400B		%V0<def> = COPY %vreg11; GPR32:%vreg11
416B		RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Machine Instruction Scheduler:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
32B		%vreg1<def> = COPY %A0; GPR32:%vreg1
48B		%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
64B		%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
80B		BNE %vreg2, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

112B	BB#1: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
160B		%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
176B		%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
208B		%A0<def> = COPY %vreg4; GPR32:%vreg4
224B		%A1<def> = ADDiu %ZERO, 951
240B		%A2<def> = COPY %vreg5; GPR32:%vreg5
256B		%GP<def> = COPY %vreg3; GPR32:%vreg3
272B		%T9<def> = COPY %vreg6; GPR32:%vreg6
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

320B	BB#2: derived from LLVM BB %switch.lookup
	    Predecessors according to CFG: BB#0
336B		%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
352B		%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
368B		%vreg10<def> = ADDu %vreg9, %vreg8; GPR32:%vreg10,%vreg9,%vreg8
384B		%vreg11<def> = LW %vreg10, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
400B		%V0<def> = COPY %vreg11; GPR32:%vreg11
416B		RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Greedy Register Allocator:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg3<def> = ADDu %V0, %T9; GPR32:%vreg3
32B		%vreg1<def> = COPY %A0; GPR32:%vreg1
48B		%vreg0<def> = ADDiu %vreg1, -102; GPR32:%vreg0,%vreg1
64B		%vreg2<def> = SLTiu %vreg0, 10; GPR32:%vreg2,%vreg0
80B		BNE %vreg2, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

112B	BB#1: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%vreg4<def> = LW %vreg3, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg3
160B		%vreg5<def> = LW %vreg3, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg3
176B		%vreg6<def> = LW %vreg3, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg3
208B		%A0<def> = COPY %vreg4; GPR32:%vreg4
224B		%A1<def> = ADDiu %ZERO, 951
240B		%A2<def> = COPY %vreg5; GPR32:%vreg5
256B		%GP<def> = COPY %vreg3; GPR32:%vreg3
272B		%T9<def> = COPY %vreg6; GPR32:%vreg6
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

320B	BB#2: derived from LLVM BB %switch.lookup
	    Predecessors according to CFG: BB#0
336B		%vreg8<def> = SLL %vreg0, 2; GPR32:%vreg8,%vreg0
352B		%vreg9<def> = LW %vreg3, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT] GPR32:%vreg9,%vreg3
368B		%vreg10<def> = ADDu %vreg9, %vreg8; GPR32:%vreg10,%vreg9,%vreg8
384B		%vreg11<def> = LW %vreg10, 0; mem:LD4[%switch.gep] GPR32:%vreg11,%vreg10
400B		%V0<def> = COPY %vreg11; GPR32:%vreg11
416B		RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Virtual Register Rewriter:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%GP<def> = ADDu %V0, %T9
48B		%V0<def> = ADDiu %A0<kill>, -102
64B		%AT<def> = SLTiu %V0, 10
80B		BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

112B	BB#1: derived from LLVM BB %2
	    Live Ins: %GP
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
160B		%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
176B		%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
224B		%A1<def> = ADDiu %ZERO, 951
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

320B	BB#2: derived from LLVM BB %switch.lookup
	    Live Ins: %GP %V0
	    Predecessors according to CFG: BB#0
336B		%AT<def> = SLL %V0<kill>, 2
352B		%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
368B		%AT<def> = ADDu %V0<kill>, %AT<kill>
384B		%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
416B		RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Stack Slot Coloring:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = ADDiu %ZERO, 951
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Machine Loop Invariant Code Motion:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = ADDiu %ZERO, 951
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Shrink Wrapping analysis:
# Machine code for function unsigned_condition: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = ADDiu %ZERO, 951
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

BB#2: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function unsigned_condition: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#0
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = ADDiu %ZERO, 951
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>

BB#2: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Machine Copy Propagation Pass:
# Machine code for function unsigned_condition: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#0
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = ADDiu %ZERO, 951
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>

BB#2: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function unsigned_condition.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function unsigned_condition: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#0
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = ADDiu %ZERO, 951
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>

BB#2: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	PseudoReturn %RA

# End machine code for function unsigned_condition.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function unsigned_condition: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#0
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = ADDiu %ZERO, 951
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>

BB#2: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	PseudoReturn %RA

# End machine code for function unsigned_condition.

# After Mips Delay Slot Filler:
# Machine code for function unsigned_condition: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>
	  * NOP
	B <BB#1>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x7ffff800 / 0x80000000 = 100.00%) BB#1(0x00000800 / 0x80000000 = 0.00%)

BB#1: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#0
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>
	  * %A1<def> = ADDiu %ZERO, 951

BB#2: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function unsigned_condition.

# After Mips Long Branch:
# Machine code for function unsigned_condition: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#1
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>
	  * %A1<def> = ADDiu %ZERO, 951

BB#3: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function unsigned_condition.

# After Mips Constant Islands:
# Machine code for function unsigned_condition: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#1
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>
	  * %A1<def> = ADDiu %ZERO, 951

BB#3: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function unsigned_condition.

# After Contiguously Lay Out Funclets:
# Machine code for function unsigned_condition: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#1
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>
	  * %A1<def> = ADDiu %ZERO, 951

BB#3: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function unsigned_condition.

# After StackMap Liveness Analysis:
# Machine code for function unsigned_condition: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#1
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>
	  * %A1<def> = ADDiu %ZERO, 951

BB#3: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function unsigned_condition.

# After Live DEBUG_VALUE analysis:
# Machine code for function unsigned_condition: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%V0<def> = ADDiu %A0<kill>, -102
	%AT<def> = SLTiu %V0, 10
	BNE %AT<kill>, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %2
    Live Ins: %GP
    Predecessors according to CFG: BB#1
	%A0<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@__FUNCTION__.unsigned_condition>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fancy_abort>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use,kill>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>
	  * %A1<def> = ADDiu %ZERO, 951

BB#3: derived from LLVM BB %switch.lookup
    Live Ins: %GP %V0
    Predecessors according to CFG: BB#0
	%AT<def> = SLL %V0<kill>, 2
	%V0<def> = LW %GP<kill>, <ga:@switch.table.4>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 0; mem:LD4[%switch.gep]
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function unsigned_condition.

