# After Instruction Selection:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	JALRPseudo %vreg3<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg3
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Expand ISel Pseudo-instructions:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	JALRPseudo %vreg3<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg3
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Mips OptimizePICCall:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Tail Duplication:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Optimize machine instruction PHIs:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Merge disjoint stack slots:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Local Stack Slot Allocation:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Remove dead machine instructions:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Machine Loop Invariant Code Motion:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Machine Common Subexpression Elimination:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Machine code sinking:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Peephole Optimizations:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Remove dead machine instructions:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Process Implicit Definitions:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2; GPR32:%vreg2
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg3; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5; GPR32:%vreg5
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Live Variable Analysis:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0<kill>, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2<kill>; GPR32:%vreg2
	%GP<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%T9<def> = COPY %vreg3<kill>; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0<kill>; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4<kill>, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5<kill>; GPR32:%vreg5
	RetRA %V0<imp-use,kill>

# End machine code for function ceil_log2.

# After Machine Natural Loop Construction:
# Machine code for function ceil_log2: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0<kill>, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2<kill>; GPR32:%vreg2
	%GP<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%T9<def> = COPY %vreg3<kill>; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0<kill>; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4<kill>, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5<kill>; GPR32:%vreg5
	RetRA %V0<imp-use,kill>

# End machine code for function ceil_log2.

# After Eliminate PHI nodes for register allocation:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0<kill>, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2<kill>; GPR32:%vreg2
	%GP<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%T9<def> = COPY %vreg3<kill>; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0<kill>; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4<kill>, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5<kill>; GPR32:%vreg5
	RetRA %V0<imp-use,kill>

# End machine code for function ceil_log2.

# After Two-Address instruction pass:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg2<def> = ADDiu %vreg0<kill>, -1; GPR32:%vreg2,%vreg0
	%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
	%A0<def> = COPY %vreg2<kill>; GPR32:%vreg2
	%GP<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%T9<def> = COPY %vreg3<kill>; GPR32:%vreg3
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %V0<kill>; GPR32:%vreg4
	%vreg5<def> = ADDiu %vreg4<kill>, 1; GPR32:%vreg5,%vreg4
	%V0<def> = COPY %vreg5<kill>; GPR32:%vreg5
	RetRA %V0<imp-use,kill>

# End machine code for function ceil_log2.

# After Simple Register Coalescing:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
32B		%vreg0<def> = COPY %A0; GPR32:%vreg0
48B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
64B		%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
80B		%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
96B		%A0<def> = COPY %vreg2; GPR32:%vreg2
112B		%GP<def> = COPY %vreg1; GPR32:%vreg1
128B		%T9<def> = COPY %vreg3; GPR32:%vreg3
144B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
160B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
176B		%vreg4<def> = COPY %V0; GPR32:%vreg4
192B		%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
208B		%V0<def> = COPY %vreg5; GPR32:%vreg5
224B		RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Machine Instruction Scheduler:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
32B		%vreg0<def> = COPY %A0; GPR32:%vreg0
48B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
64B		%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
80B		%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
96B		%A0<def> = COPY %vreg2; GPR32:%vreg2
112B		%GP<def> = COPY %vreg1; GPR32:%vreg1
128B		%T9<def> = COPY %vreg3; GPR32:%vreg3
144B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
160B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
176B		%vreg4<def> = COPY %V0; GPR32:%vreg4
192B		%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
208B		%V0<def> = COPY %vreg5; GPR32:%vreg5
224B		RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Greedy Register Allocator:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
32B		%vreg0<def> = COPY %A0; GPR32:%vreg0
48B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
64B		%vreg2<def> = ADDiu %vreg0, -1; GPR32:%vreg2,%vreg0
80B		%vreg3<def> = LW %vreg1, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg3,%vreg1
96B		%A0<def> = COPY %vreg2; GPR32:%vreg2
112B		%GP<def> = COPY %vreg1; GPR32:%vreg1
128B		%T9<def> = COPY %vreg3; GPR32:%vreg3
144B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
160B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
176B		%vreg4<def> = COPY %V0; GPR32:%vreg4
192B		%vreg5<def> = ADDiu %vreg4, 1; GPR32:%vreg5,%vreg4
208B		%V0<def> = COPY %vreg5; GPR32:%vreg5
224B		RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Virtual Register Rewriter:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%GP<def> = ADDu %V0, %T9
48B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
64B		%A0<def> = ADDiu %A0<kill>, -1
80B		%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
144B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
160B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
192B		%V0<def> = ADDiu %V0<kill>, 1
224B		RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Stack Slot Coloring:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = ADDiu %A0<kill>, -1
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = ADDiu %V0<kill>, 1
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Machine Loop Invariant Code Motion:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = ADDiu %A0<kill>, -1
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = ADDiu %V0<kill>, 1
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Shrink Wrapping analysis:
# Machine code for function ceil_log2: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A0<def> = ADDiu %A0<kill>, -1
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = ADDiu %V0<kill>, 1
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function ceil_log2: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%A0<def> = ADDiu %A0<kill>, -1
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Machine Copy Propagation Pass:
# Machine code for function ceil_log2: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%A0<def> = ADDiu %A0<kill>, -1
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function ceil_log2.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function ceil_log2: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%A0<def> = ADDiu %A0<kill>, -1
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	PseudoReturn %RA

# End machine code for function ceil_log2.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function ceil_log2: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%A0<def> = ADDiu %A0<kill>, -1
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	PseudoReturn %RA

# End machine code for function ceil_log2.

# After Mips Delay Slot Filler:
# Machine code for function ceil_log2: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A0<def> = ADDiu %A0<kill>, -1
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function ceil_log2.

# After Mips Long Branch:
# Machine code for function ceil_log2: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A0<def> = ADDiu %A0<kill>, -1
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function ceil_log2.

# After Mips Constant Islands:
# Machine code for function ceil_log2: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A0<def> = ADDiu %A0<kill>, -1
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function ceil_log2.

# After Contiguously Lay Out Funclets:
# Machine code for function ceil_log2: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A0<def> = ADDiu %A0<kill>, -1
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function ceil_log2.

# After StackMap Liveness Analysis:
# Machine code for function ceil_log2: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A0<def> = ADDiu %A0<kill>, -1
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function ceil_log2.

# After Live DEBUG_VALUE analysis:
# Machine code for function ceil_log2: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%T9<def> = LW %GP, <ga:@floor_log2_wide>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A0<def> = ADDiu %A0<kill>, -1
	%V0<def> = ADDiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function ceil_log2.

