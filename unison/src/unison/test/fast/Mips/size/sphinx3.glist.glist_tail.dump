# After Instruction Selection:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Expand ISel Pseudo-instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Mips OptimizePICCall:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Tail Duplication:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Optimize machine instruction PHIs:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Merge disjoint stack slots:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Local Stack Slot Allocation:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Remove dead machine instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Machine Loop Invariant Code Motion:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def>; GPR32:%vreg3
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Machine Common Subexpression Elimination:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def>; GPR32:%vreg3
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Machine code sinking:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def>; GPR32:%vreg3
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Peephole Optimizations:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def>; GPR32:%vreg3
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Remove dead machine instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def>; GPR32:%vreg3
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Process Implicit Definitions:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#2>, %AT<imp-def>; GPR32:%vreg3
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#1>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2; GPR32:%vreg2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Live Variable Analysis:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0<kill>; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#3>, %AT<imp-def,dead>; GPR32:%vreg3
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg3, <BB#1>, %vreg1, <BB#2>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#2
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#2>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2<kill>; GPR32:%vreg2
	RetRA %V0<imp-use,kill>

# End machine code for function glist_tail.

# After Machine Natural Loop Construction:
# Machine code for function glist_tail: SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0<kill>; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	BEQ %vreg3, %ZERO, <BB#3>, %AT<imp-def,dead>; GPR32:%vreg3
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg3, <BB#1>, %vreg1, <BB#2>; GPR32:%vreg0,%vreg3,%vreg1
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	BNE %vreg1, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#2
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#2>; GPR32:%vreg2,%vreg4,%vreg0
	%V0<def> = COPY %vreg2<kill>; GPR32:%vreg2
	RetRA %V0<imp-use,kill>

# End machine code for function glist_tail.

# After Eliminate PHI nodes for register allocation:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0<kill>; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	%vreg6<def> = COPY %vreg4<kill>; GPR32:%vreg6,%vreg4
	BEQ %vreg3, %ZERO, <BB#3>, %AT<imp-def,dead>; GPR32:%vreg3
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = COPY %vreg3<kill>; GPR32:%vreg5,%vreg3
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = COPY %vreg5<kill>; GPR32:%vreg0,%vreg5
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	%vreg5<def> = COPY %vreg1; GPR32:%vreg5,%vreg1
	%vreg6<def> = COPY %vreg0<kill>; GPR32:%vreg6,%vreg0
	BNE %vreg1<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#2
	%vreg2<def> = COPY %vreg6<kill>; GPR32:%vreg2,%vreg6
	%V0<def> = COPY %vreg2<kill>; GPR32:%vreg2
	RetRA %V0<imp-use,kill>

# End machine code for function glist_tail.

# After Two-Address instruction pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%vreg3<def> = COPY %A0<kill>; GPR32:%vreg3
	%vreg4<def> = ADDiu %ZERO, 0; GPR32:%vreg4
	%vreg6<def> = COPY %vreg4<kill>; GPR32:%vreg6,%vreg4
	BEQ %vreg3, %ZERO, <BB#3>, %AT<imp-def,dead>; GPR32:%vreg3
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = COPY %vreg3<kill>; GPR32:%vreg5,%vreg3
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = COPY %vreg5<kill>; GPR32:%vreg0,%vreg5
	%vreg1<def> = LW %vreg0, 8; mem:LD4[%2](align=8) GPR32:%vreg1,%vreg0
	%vreg5<def> = COPY %vreg1; GPR32:%vreg5,%vreg1
	%vreg6<def> = COPY %vreg0<kill>; GPR32:%vreg6,%vreg0
	BNE %vreg1<kill>, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg1
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#2
	%vreg2<def> = COPY %vreg6<kill>; GPR32:%vreg2,%vreg6
	%V0<def> = COPY %vreg2<kill>; GPR32:%vreg2
	RetRA %V0<imp-use,kill>

# End machine code for function glist_tail.

# After Simple Register Coalescing:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0
16B		%vreg5<def> = COPY %A0; GPR32:%vreg5
32B		%vreg6<def> = ADDiu %ZERO, 0; GPR32:%vreg6
64B		BEQ %vreg5, %ZERO, <BB#3>, %AT<imp-def,dead>; GPR32:%vreg5
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

80B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

112B	BB#2: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#2 BB#1
128B		%vreg6<def> = COPY %vreg5; GPR32:%vreg6,%vreg5
144B		%vreg5<def> = LW %vreg6, 8; mem:LD4[%2](align=8) GPR32:%vreg5,%vreg6
192B		BNE %vreg5, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg5
208B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

224B	BB#3: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#0 BB#2
256B		%V0<def> = COPY %vreg6; GPR32:%vreg6
272B		RetRA %V0<imp-use,kill>

# End machine code for function glist_tail.

# After Machine Instruction Scheduler:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0
16B		%vreg5<def> = COPY %A0; GPR32:%vreg5
32B		%vreg6<def> = ADDiu %ZERO, 0; GPR32:%vreg6
64B		BEQ %vreg5, %ZERO, <BB#3>, %AT<imp-def,dead>; GPR32:%vreg5
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

80B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

112B	BB#2: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#2 BB#1
128B		%vreg6<def> = COPY %vreg5; GPR32:%vreg6,%vreg5
144B		%vreg5<def> = LW %vreg6, 8; mem:LD4[%2](align=8) GPR32:%vreg5,%vreg6
192B		BNE %vreg5, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg5
208B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

224B	BB#3: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#0 BB#2
256B		%V0<def> = COPY %vreg6; GPR32:%vreg6
272B		RetRA %V0<imp-use,kill>

# End machine code for function glist_tail.

# After Greedy Register Allocator:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0
16B		%vreg5<def> = COPY %A0; GPR32:%vreg5
32B		%vreg6<def> = ADDiu %ZERO, 0; GPR32:%vreg6
64B		BEQ %vreg5, %ZERO, <BB#3>, %AT<imp-def,dead>; GPR32:%vreg5
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

80B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

112B	BB#2: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#2 BB#1
128B		%vreg6<def> = COPY %vreg5; GPR32:%vreg6,%vreg5
144B		%vreg5<def> = LW %vreg6, 8; mem:LD4[%2](align=8) GPR32:%vreg5,%vreg6
192B		BNE %vreg5, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg5
208B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

224B	BB#3: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#0 BB#2
256B		%V0<def> = COPY %vreg6; GPR32:%vreg6
272B		RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Virtual Register Rewriter:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0
32B		%V0<def> = ADDiu %ZERO, 0
64B		BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

80B	BB#1: 
	    Live Ins: %A0
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

112B	BB#2: derived from LLVM BB %.preheader
	    Live Ins: %A0
	    Predecessors according to CFG: BB#2 BB#1
128B		%V0<def> = COPY %A0<kill>
144B		%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
192B		BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
208B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

224B	BB#3: derived from LLVM BB %.loopexit
	    Live Ins: %V0
	    Predecessors according to CFG: BB#0 BB#2
272B		RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Stack Slot Coloring:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%V0<def> = ADDiu %ZERO, 0
	BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = COPY %A0<kill>
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Machine Loop Invariant Code Motion:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%V0<def> = ADDiu %ZERO, 0
	BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = COPY %A0<kill>
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Shrink Wrapping analysis:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%V0<def> = ADDiu %ZERO, 0
	BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = COPY %A0<kill>
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%V0<def> = ADDiu %ZERO, 0
	BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = COPY %A0<kill>
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Machine Copy Propagation Pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%V0<def> = ADDiu %ZERO, 0
	BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = COPY %A0<kill>
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#2
	RetRA %V0<imp-use>

# End machine code for function glist_tail.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%V0<def> = ADDiu %ZERO, 0
	BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = OR %A0<kill>, %ZERO
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#2
	PseudoReturn %RA

# End machine code for function glist_tail.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	%V0<def> = ADDiu %ZERO, 0
	BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = OR %A0<kill>, %ZERO
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#2
	PseudoReturn %RA

# End machine code for function glist_tail.

# After Mips Delay Slot Filler:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	BEQ %A0, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * %V0<def> = ADDiu %ZERO, 0
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#2 BB#1
	%V0<def> = OR %A0<kill>, %ZERO
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	  * NOP
	B <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(0x04000000 / 0x80000000 = 3.12%) BB#2(0x7c000000 / 0x80000000 = 96.88%)

BB#3: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#2
	PseudoReturn %RA
	  * NOP

# End machine code for function glist_tail.

# After Mips Long Branch:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	BEQ %A0, %ZERO, <BB#4>, %AT<imp-def,dead>
	  * %V0<def> = ADDiu %ZERO, 0
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#1 BB#2
	%V0<def> = OR %A0<kill>, %ZERO
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%) BB#2(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2
	B <BB#4>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#4(0x80000000 / 0x80000000 = 100.00%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#3
	PseudoReturn %RA
	  * NOP

# End machine code for function glist_tail.

# After Mips Constant Islands:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	BEQ %A0, %ZERO, <BB#4>, %AT<imp-def,dead>
	  * %V0<def> = ADDiu %ZERO, 0
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#1 BB#2
	%V0<def> = OR %A0<kill>, %ZERO
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%) BB#2(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2
	B <BB#4>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#4(0x80000000 / 0x80000000 = 100.00%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#3
	PseudoReturn %RA
	  * NOP

# End machine code for function glist_tail.

# After Contiguously Lay Out Funclets:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	BEQ %A0, %ZERO, <BB#4>, %AT<imp-def,dead>
	  * %V0<def> = ADDiu %ZERO, 0
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#1 BB#2
	%V0<def> = OR %A0<kill>, %ZERO
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%) BB#2(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2
	B <BB#4>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#4(0x80000000 / 0x80000000 = 100.00%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#3
	PseudoReturn %RA
	  * NOP

# End machine code for function glist_tail.

# After StackMap Liveness Analysis:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	BEQ %A0, %ZERO, <BB#4>, %AT<imp-def,dead>
	  * %V0<def> = ADDiu %ZERO, 0
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#1 BB#2
	%V0<def> = OR %A0<kill>, %ZERO
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%) BB#2(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2
	B <BB#4>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#4(0x80000000 / 0x80000000 = 100.00%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#3
	PseudoReturn %RA
	  * NOP

# End machine code for function glist_tail.

# After Live DEBUG_VALUE analysis:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %A0

BB#0: derived from LLVM BB %0
    Live Ins: %A0
	BEQ %A0, %ZERO, <BB#4>, %AT<imp-def,dead>
	  * %V0<def> = ADDiu %ZERO, 0
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Live Ins: %A0
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %.preheader
    Live Ins: %A0
    Predecessors according to CFG: BB#1 BB#2
	%V0<def> = OR %A0<kill>, %ZERO
	%A0<def> = LW %V0, 8; mem:LD4[%2](align=8)
	BNE %A0, %ZERO, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%) BB#2(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#2
	B <BB#4>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#4(0x80000000 / 0x80000000 = 100.00%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %V0
    Predecessors according to CFG: BB#0 BB#3
	PseudoReturn %RA
	  * NOP

# End machine code for function glist_tail.

