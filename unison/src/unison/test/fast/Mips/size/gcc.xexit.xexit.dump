# After Instruction Selection:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	JALRPseudo %vreg0, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...; GPR32:%vreg0
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	JALRPseudo %vreg4<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...; GPR32:%vreg4
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Expand ISel Pseudo-instructions:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	JALRPseudo %vreg0, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...; GPR32:%vreg0
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	JALRPseudo %vreg4<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...; GPR32:%vreg4
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Mips OptimizePICCall:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Tail Duplication:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Optimize machine instruction PHIs:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Merge disjoint stack slots:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Local Stack Slot Allocation:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Remove dead machine instructions:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Machine Loop Invariant Code Motion:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Machine Common Subexpression Elimination:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Machine code sinking:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Peephole Optimizations:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Remove dead machine instructions:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Process Implicit Definitions:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
	%vreg1<def> = COPY %A0; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1; GPR32:%vreg1
	%GP<def> = COPY %vreg2; GPR32:%vreg2
	%T9<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Live Variable Analysis:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg2
	%vreg1<def> = COPY %A0<kill>; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0<kill>; GPR32:%vreg0
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%GP<def> = COPY %vreg2<kill>; GPR32:%vreg2
	%T9<def> = COPY %vreg4<kill>; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Machine Natural Loop Construction:
# Machine code for function xexit: SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg2
	%vreg1<def> = COPY %A0<kill>; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0<kill>; GPR32:%vreg0
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%GP<def> = COPY %vreg2<kill>; GPR32:%vreg2
	%T9<def> = COPY %vreg4<kill>; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Eliminate PHI nodes for register allocation:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg2
	%vreg1<def> = COPY %A0<kill>; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0<kill>; GPR32:%vreg0
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%GP<def> = COPY %vreg2<kill>; GPR32:%vreg2
	%T9<def> = COPY %vreg4<kill>; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Two-Address instruction pass:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg2<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg2
	%vreg1<def> = COPY %A0<kill>; GPR32:%vreg1
	%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
	%vreg0<def> = LW %vreg3<kill>, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
	BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = COPY %vreg0<kill>; GPR32:%vreg0
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
	%A0<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%GP<def> = COPY %vreg2<kill>; GPR32:%vreg2
	%T9<def> = COPY %vreg4<kill>; GPR32:%vreg4
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Simple Register Coalescing:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
32B		%vreg1<def> = COPY %A0; GPR32:%vreg1
48B		%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
64B		%vreg0<def> = LW %vreg3, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
80B		BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

112B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%T9<def> = COPY %vreg0; GPR32:%vreg0
160B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
176B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	    Successors according to CFG: BB#2(?%)

192B	BB#2: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0 BB#1
208B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
224B		%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
240B		%A0<def> = COPY %vreg1; GPR32:%vreg1
256B		%GP<def> = COPY %vreg2; GPR32:%vreg2
272B		%T9<def> = COPY %vreg4; GPR32:%vreg4
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Machine Instruction Scheduler:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
32B		%vreg1<def> = COPY %A0; GPR32:%vreg1
48B		%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
64B		%vreg0<def> = LW %vreg3, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
80B		BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

112B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%T9<def> = COPY %vreg0; GPR32:%vreg0
160B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
176B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	    Successors according to CFG: BB#2(?%)

192B	BB#2: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0 BB#1
208B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
224B		%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
240B		%A0<def> = COPY %vreg1; GPR32:%vreg1
256B		%GP<def> = COPY %vreg2; GPR32:%vreg2
272B		%T9<def> = COPY %vreg4; GPR32:%vreg4
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Greedy Register Allocator:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0 in %vreg1, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg2<def> = ADDu %V0, %T9; GPR32:%vreg2
32B		%vreg1<def> = COPY %A0; GPR32:%vreg1
48B		%vreg3<def> = LW %vreg2, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT] GPR32:%vreg3,%vreg2
64B		%vreg0<def> = LW %vreg3, 0; mem:LD4[@_xexit_cleanup] GPR32:%vreg0,%vreg3
80B		BEQ %vreg0, %ZERO, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg0
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

112B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%T9<def> = COPY %vreg0; GPR32:%vreg0
160B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
176B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	    Successors according to CFG: BB#2(?%)

192B	BB#2: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0 BB#1
208B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
224B		%vreg4<def> = LW %vreg2, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg4,%vreg2
240B		%A0<def> = COPY %vreg1; GPR32:%vreg1
256B		%GP<def> = COPY %vreg2; GPR32:%vreg2
272B		%T9<def> = COPY %vreg4; GPR32:%vreg4
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Virtual Register Rewriter:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%S0<def> = ADDu %V0, %T9
32B		%S1<def> = COPY %A0
48B		%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
64B		%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
80B		BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

112B	BB#1: derived from LLVM BB %3
	    Live Ins: %S0 %S1 %T9
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
160B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
176B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	    Successors according to CFG: BB#2(?%)

192B	BB#2: derived from LLVM BB %4
	    Live Ins: %S0 %S1
	    Predecessors according to CFG: BB#0 BB#1
208B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
224B		%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
240B		%A0<def> = COPY %S1<kill>
256B		%GP<def> = COPY %S0<kill>
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Stack Slot Coloring:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A0
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Machine Loop Invariant Code Motion:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A0
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Shrink Wrapping analysis:
# Machine code for function xexit: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A0
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0 BB#1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>

# End machine code for function xexit.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A0
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0 BB#1
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>

# End machine code for function xexit.

# After Machine Copy Propagation Pass:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A0
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0 BB#1
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>

# End machine code for function xexit.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A0, %ZERO
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0 BB#1
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	%GP<def> = OR %S0<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>

# End machine code for function xexit.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function xexit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A0, %ZERO
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0 BB#1
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	%GP<def> = OR %S0<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>

# End machine code for function xexit.

# After Mips Delay Slot Filler:
# Machine code for function xexit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#2>, %AT<imp-def,dead>
	  * %S1<def> = OR %A0, %ZERO
	B <BB#1>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
	  * NOP
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0 BB#1
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>
	  * %GP<def> = OR %S0<kill>, %ZERO

# End machine code for function xexit.

# After Mips Long Branch:
# Machine code for function xexit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * %S1<def> = OR %A0, %ZERO
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#1
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#2 BB#0
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>
	  * %GP<def> = OR %S0<kill>, %ZERO

# End machine code for function xexit.

# After Mips Constant Islands:
# Machine code for function xexit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * %S1<def> = OR %A0, %ZERO
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#1
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#2 BB#0
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>
	  * %GP<def> = OR %S0<kill>, %ZERO

# End machine code for function xexit.

# After Contiguously Lay Out Funclets:
# Machine code for function xexit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * %S1<def> = OR %A0, %ZERO
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#1
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#2 BB#0
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>
	  * %GP<def> = OR %S0<kill>, %ZERO

# End machine code for function xexit.

# After StackMap Liveness Analysis:
# Machine code for function xexit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * %S1<def> = OR %A0, %ZERO
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#1
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#2 BB#0
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>
	  * %GP<def> = OR %S0<kill>, %ZERO

# End machine code for function xexit.

# After Live DEBUG_VALUE analysis:
# Machine code for function xexit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%AT<def> = LW %S0, <ga:@_xexit_cleanup>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %AT<kill>, 0; mem:LD4[@_xexit_cleanup]
	BEQ %T9, %ZERO, <BB#3>, %AT<imp-def,dead>
	  * %S1<def> = OR %A0, %ZERO
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %S0 %S1 %T9
    Predecessors according to CFG: BB#1
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %SP<imp-def>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %4
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#2 BB#0
	%T9<def> = LW %S0, <ga:@exit>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>
	  * %GP<def> = OR %S0<kill>, %ZERO

# End machine code for function xexit.

