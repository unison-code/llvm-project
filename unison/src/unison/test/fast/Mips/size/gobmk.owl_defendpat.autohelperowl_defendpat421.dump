# After Instruction Selection:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %vreg12<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg12
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Expand ISel Pseudo-instructions:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %vreg12<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg12
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Mips OptimizePICCall:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Tail Duplication:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Optimize machine instruction PHIs:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Merge disjoint stack slots:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Local Stack Slot Allocation:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Remove dead machine instructions:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Loop Invariant Code Motion:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Common Subexpression Elimination:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine code sinking:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Peephole Optimizations:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Remove dead machine instructions:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Process Implicit Definitions:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg2<def> = COPY %A2; GPR32:%vreg2
	%vreg1<def> = COPY %A1; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11; GPR32:%vreg11
	%A1<def> = COPY %vreg10; GPR32:%vreg10
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg12; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14; GPR32:%vreg14
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Live Variable Analysis:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg4
	%vreg2<def> = COPY %A2<kill>; GPR32:%vreg2
	%vreg1<def> = COPY %A1<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0<kill>, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2<kill>; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1<kill>; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11<kill>; GPR32:%vreg11
	%A1<def> = COPY %vreg10<kill>; GPR32:%vreg10
	%GP<def> = COPY %vreg4<kill>; GPR32:%vreg4
	%T9<def> = COPY %vreg12<kill>; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0<kill>; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13<kill>, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14<kill>; GPR32:%vreg14
	RetRA %V0<imp-use,kill>

# End machine code for function autohelperowl_defendpat421.

# After Machine Natural Loop Construction:
# Machine code for function autohelperowl_defendpat421: SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg4
	%vreg2<def> = COPY %A2<kill>; GPR32:%vreg2
	%vreg1<def> = COPY %A1<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0<kill>, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2<kill>; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1<kill>; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11<kill>; GPR32:%vreg11
	%A1<def> = COPY %vreg10<kill>; GPR32:%vreg10
	%GP<def> = COPY %vreg4<kill>; GPR32:%vreg4
	%T9<def> = COPY %vreg12<kill>; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0<kill>; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13<kill>, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14<kill>; GPR32:%vreg14
	RetRA %V0<imp-use,kill>

# End machine code for function autohelperowl_defendpat421.

# After Eliminate PHI nodes for register allocation:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg4
	%vreg2<def> = COPY %A2<kill>; GPR32:%vreg2
	%vreg1<def> = COPY %A1<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0<kill>, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2<kill>; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1<kill>; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11<kill>; GPR32:%vreg11
	%A1<def> = COPY %vreg10<kill>; GPR32:%vreg10
	%GP<def> = COPY %vreg4<kill>; GPR32:%vreg4
	%T9<def> = COPY %vreg12<kill>; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0<kill>; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13<kill>, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14<kill>; GPR32:%vreg14
	RetRA %V0<imp-use,kill>

# End machine code for function autohelperowl_defendpat421.

# After Two-Address instruction pass:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%vreg4<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg4
	%vreg2<def> = COPY %A2<kill>; GPR32:%vreg2
	%vreg1<def> = COPY %A1<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	%vreg5<def> = SLL %vreg0<kill>, 2; GPR32:%vreg5,%vreg0
	%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
	%vreg7<def> = ADDu %vreg6<kill>, %vreg5<kill>; GPR32:%vreg7,%vreg6,%vreg5
	%vreg8<def> = LW %vreg7<kill>, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
	%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
	%vreg10<def> = SUBu %vreg9<kill>, %vreg2<kill>; GPR32:%vreg10,%vreg9,%vreg2
	%vreg11<def> = ADDu %vreg8<kill>, %vreg1<kill>; GPR32:%vreg11,%vreg8,%vreg1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
	%A0<def> = COPY %vreg11<kill>; GPR32:%vreg11
	%A1<def> = COPY %vreg10<kill>; GPR32:%vreg10
	%GP<def> = COPY %vreg4<kill>; GPR32:%vreg4
	%T9<def> = COPY %vreg12<kill>; GPR32:%vreg12
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg13<def> = COPY %V0<kill>; GPR32:%vreg13
	%vreg14<def> = SLTiu %vreg13<kill>, 1; GPR32:%vreg14,%vreg13
	%V0<def> = COPY %vreg14<kill>; GPR32:%vreg14
	RetRA %V0<imp-use,kill>

# End machine code for function autohelperowl_defendpat421.

# After Simple Register Coalescing:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %A1 %A2 %T9 %V0
16B		%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
32B		%vreg2<def> = COPY %A2; GPR32:%vreg2
48B		%vreg1<def> = COPY %A1; GPR32:%vreg1
64B		%vreg0<def> = COPY %A0; GPR32:%vreg0
80B		%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
96B		%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
112B		%vreg7<def> = ADDu %vreg6, %vreg5; GPR32:%vreg7,%vreg6,%vreg5
128B		%vreg8<def> = LW %vreg7, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
144B		%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
160B		%vreg10<def> = SUBu %vreg9, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
176B		%vreg11<def> = ADDu %vreg8, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
192B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
208B		%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
224B		%A0<def> = COPY %vreg11; GPR32:%vreg11
240B		%A1<def> = COPY %vreg10; GPR32:%vreg10
256B		%GP<def> = COPY %vreg4; GPR32:%vreg4
272B		%T9<def> = COPY %vreg12; GPR32:%vreg12
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
320B		%vreg13<def> = COPY %V0; GPR32:%vreg13
336B		%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
352B		%V0<def> = COPY %vreg14; GPR32:%vreg14
368B		RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Instruction Scheduler:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %A1 %A2 %T9 %V0
16B		%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
32B		%vreg2<def> = COPY %A2; GPR32:%vreg2
48B		%vreg1<def> = COPY %A1; GPR32:%vreg1
64B		%vreg0<def> = COPY %A0; GPR32:%vreg0
80B		%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
96B		%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
112B		%vreg7<def> = ADDu %vreg6, %vreg5; GPR32:%vreg7,%vreg6,%vreg5
128B		%vreg8<def> = LW %vreg7, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
144B		%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
160B		%vreg10<def> = SUBu %vreg9, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
176B		%vreg11<def> = ADDu %vreg8, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
192B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
208B		%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
224B		%A0<def> = COPY %vreg11; GPR32:%vreg11
240B		%A1<def> = COPY %vreg10; GPR32:%vreg10
256B		%GP<def> = COPY %vreg4; GPR32:%vreg4
272B		%T9<def> = COPY %vreg12; GPR32:%vreg12
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
320B		%vreg13<def> = COPY %V0; GPR32:%vreg13
336B		%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
352B		%V0<def> = COPY %vreg14; GPR32:%vreg14
368B		RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Greedy Register Allocator:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0 in %vreg0, %A1 in %vreg1, %A2 in %vreg2, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %A1 %A2 %T9 %V0
16B		%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
32B		%vreg2<def> = COPY %A2; GPR32:%vreg2
48B		%vreg1<def> = COPY %A1; GPR32:%vreg1
64B		%vreg0<def> = COPY %A0; GPR32:%vreg0
80B		%vreg5<def> = SLL %vreg0, 2; GPR32:%vreg5,%vreg0
96B		%vreg6<def> = LW %vreg4, <ga:@transformation>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg4
112B		%vreg7<def> = ADDu %vreg6, %vreg5; GPR32:%vreg7,%vreg6,%vreg5
128B		%vreg8<def> = LW %vreg7, 18336; mem:LD4[%1] GPR32:%vreg8,%vreg7
144B		%vreg9<def> = ADDiu %ZERO, 3; GPR32:%vreg9
160B		%vreg10<def> = SUBu %vreg9, %vreg2; GPR32:%vreg10,%vreg9,%vreg2
176B		%vreg11<def> = ADDu %vreg8, %vreg1; GPR32:%vreg11,%vreg8,%vreg1
192B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
208B		%vreg12<def> = LW %vreg4, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg12,%vreg4
224B		%A0<def> = COPY %vreg11; GPR32:%vreg11
240B		%A1<def> = COPY %vreg10; GPR32:%vreg10
256B		%GP<def> = COPY %vreg4; GPR32:%vreg4
272B		%T9<def> = COPY %vreg12; GPR32:%vreg12
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
320B		%vreg13<def> = COPY %V0; GPR32:%vreg13
336B		%vreg14<def> = SLTiu %vreg13, 1; GPR32:%vreg14,%vreg13
352B		%V0<def> = COPY %vreg14; GPR32:%vreg14
368B		RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Virtual Register Rewriter:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0, %A1, %A2, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %A1 %A2 %T9 %V0
16B		%GP<def> = ADDu %V0, %T9
80B		%AT<def> = SLL %A0<kill>, 2
96B		%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
112B		%AT<def> = ADDu %V0<kill>, %AT<kill>
128B		%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
144B		%AT<def> = ADDiu %ZERO, 3
160B		%AT<def> = SUBu %AT<kill>, %A2<kill>
176B		%A0<def> = ADDu %V0<kill>, %A1<kill>
192B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
208B		%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
240B		%A1<def> = COPY %AT<kill>
288B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
304B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
336B		%V0<def> = SLTiu %V0<kill>, 1
368B		RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Stack Slot Coloring:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = COPY %AT<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = SLTiu %V0<kill>, 1
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Loop Invariant Code Motion:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = COPY %AT<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = SLTiu %V0<kill>, 1
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Shrink Wrapping analysis:
# Machine code for function autohelperowl_defendpat421: Post SSA
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = COPY %AT<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%V0<def> = SLTiu %V0<kill>, 1
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function autohelperowl_defendpat421: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = COPY %AT<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Machine Copy Propagation Pass:
# Machine code for function autohelperowl_defendpat421: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = COPY %AT<kill>
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	RetRA %V0<imp-use>

# End machine code for function autohelperowl_defendpat421.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function autohelperowl_defendpat421: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = OR %AT<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	PseudoReturn %RA

# End machine code for function autohelperowl_defendpat421.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function autohelperowl_defendpat421: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A1<def> = OR %AT<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 24
	PseudoReturn %RA

# End machine code for function autohelperowl_defendpat421.

# After Mips Delay Slot Filler:
# Machine code for function autohelperowl_defendpat421: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %V0 %RA
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A1<def> = OR %AT<kill>, %ZERO
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function autohelperowl_defendpat421.

# After Mips Long Branch:
# Machine code for function autohelperowl_defendpat421: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A1<def> = OR %AT<kill>, %ZERO
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function autohelperowl_defendpat421.

# After Mips Constant Islands:
# Machine code for function autohelperowl_defendpat421: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A1<def> = OR %AT<kill>, %ZERO
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function autohelperowl_defendpat421.

# After Contiguously Lay Out Funclets:
# Machine code for function autohelperowl_defendpat421: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A1<def> = OR %AT<kill>, %ZERO
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function autohelperowl_defendpat421.

# After StackMap Liveness Analysis:
# Machine code for function autohelperowl_defendpat421: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A1<def> = OR %AT<kill>, %ZERO
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function autohelperowl_defendpat421.

# After Live DEBUG_VALUE analysis:
# Machine code for function autohelperowl_defendpat421: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Function Live Ins: %A0, %A1, %A2, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %A1 %A2 %T9 %RA
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -24
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 20; mem:ST4[FixedStack0]
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%AT<def> = SLL %A0<kill>, 2
	%V0<def> = LW %GP, <ga:@transformation>[TF=1]; mem:LD4[GOT]
	%AT<def> = ADDu %V0<kill>, %AT<kill>
	%V0<def> = LW %AT<kill>, 18336; mem:LD4[%1]
	%AT<def> = ADDiu %ZERO, 3
	%AT<def> = SUBu %AT<kill>, %A2<kill>
	%A0<def> = ADDu %V0<kill>, %A1<kill>
	%T9<def> = LW %GP, <ga:@safe_move>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * %A1<def> = OR %AT<kill>, %ZERO
	%V0<def> = SLTiu %V0<kill>, 1
	%RA<def> = LW %SP, 20; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 24

# End machine code for function autohelperowl_defendpat421.

