--- |
  ; ModuleID = 'dummy.ll'
...
---
name:            AllocFancyAli
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
liveins:         
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %t9, %v0
    liveouts: %v0
  
    %0 = ADDu %v0, %t9
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %1 = LW %0, target-flags(<unknown>) @.str, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (load 4 from got)
    %2 = LW %0, target-flags(<unknown>) @sre_malloc, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (load 4 from call-entry @sre_malloc)
    %3 = ADDiu %zero, 117
    %4 = ADDiu %zero, 40
    %a0 = COPY %1
    %a1 = COPY %3
    %a2 = COPY %4
    %gp = COPY %0
    %t9 = COPY %2
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %5 = COPY %v0
    SW %zero, %5, 16, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.1 + 16)
    SW %zero, %5, 12, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.1 + 12)
    SW %zero, %5, 8, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.1 + 8)
    SW %zero, %5, 4, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.1 + 4)
    SW %zero, %5, 0, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.1)
    SW %zero, %5, 36, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.3 + 12)
    SW %zero, %5, 32, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.3 + 8)
    SW %zero, %5, 28, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.3 + 4)
    SW %zero, %5, 24, <0x25030a0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.3)
    %v0 = COPY %5
    RetRA implicit %v0

...
---
unison-test-mir-version: null
unison-test-target: Mips
unison-test-goal:
- size
unison-test-expected-cost:
- 22
unison-test-function: null
unison-test-expected-proven: true
unison-test-strictly-better: null
unison-test-expected-has-solution: false
...
