# After Instruction Selection:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPR:%vreg4
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Expand ISel Pseudo-instructions:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPR:%vreg4
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Tail Duplication:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPR:%vreg4
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Optimize machine instruction PHIs:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPR:%vreg4
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Merge disjoint stack slots:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPR:%vreg4
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Local Stack Slot Allocation:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPR:%vreg4
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Remove dead machine instructions:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Machine Loop Invariant Code Motion:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Machine Common Subexpression Elimination:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Machine code sinking:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Peephole Optimizations:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Remove dead machine instructions:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After ARM MLA / MLS expansion pass:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After ARM pre- register allocation load / store optimization pass:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After ARM A15 S->D optimizer:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Process Implicit Definitions:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3; rGPR:%vreg3
	%R2<def> = COPY %vreg2; rGPR:%vreg2
	%R3<def> = COPY %vreg0; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg5; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Live Variable Analysis:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0<kill>; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3<kill>; rGPR:%vreg3
	%R2<def> = COPY %vreg2<kill>; rGPR:%vreg2
	%R3<def> = COPY %vreg0<kill>; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1<kill>; rGPR:%vreg1
	%R1<def> = COPY %vreg5<kill>; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>

# End machine code for function no_mem_exit.

# After Machine Natural Loop Construction:
# Machine code for function no_mem_exit: SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0<kill>; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3<kill>; rGPR:%vreg3
	%R2<def> = COPY %vreg2<kill>; rGPR:%vreg2
	%R3<def> = COPY %vreg0<kill>; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1<kill>; rGPR:%vreg1
	%R1<def> = COPY %vreg5<kill>; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>

# End machine code for function no_mem_exit.

# After Eliminate PHI nodes for register allocation:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0<kill>; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3<kill>; rGPR:%vreg3
	%R2<def> = COPY %vreg2<kill>; rGPR:%vreg2
	%R3<def> = COPY %vreg0<kill>; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1<kill>; rGPR:%vreg1
	%R1<def> = COPY %vreg5<kill>; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>

# End machine code for function no_mem_exit.

# After Two-Address instruction pass:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0 in %vreg0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg0<def> = COPY %R0<kill>; GPR:%vreg0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
	%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
	%vreg3<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg3
	%R0<def> = COPY %vreg1; rGPR:%vreg1
	%R1<def> = COPY %vreg3<kill>; rGPR:%vreg3
	%R2<def> = COPY %vreg2<kill>; rGPR:%vreg2
	%R3<def> = COPY %vreg0<kill>; GPR:%vreg0
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg5<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%R0<def> = COPY %vreg1<kill>; rGPR:%vreg1
	%R1<def> = COPY %vreg5<kill>; rGPR:%vreg5
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>

# End machine code for function no_mem_exit.

# After Simple Register Coalescing:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg0<def> = COPY %R0; GPR:%vreg0
32B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
48B		%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
64B		%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
96B		%R0<def> = COPY %vreg1; rGPR:%vreg1
112B		%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
128B		%R2<def> = COPY %vreg2; rGPR:%vreg2
144B		%R3<def> = COPY %vreg0; GPR:%vreg0
160B		tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
176B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
208B		%R0<def> = COPY %vreg1; rGPR:%vreg1
224B		%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
240B		TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use,kill>

# End machine code for function no_mem_exit.

# After Machine Instruction Scheduler:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg0<def> = COPY %R0; GPR:%vreg0
32B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
48B		%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
64B		%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
96B		%R0<def> = COPY %vreg1; rGPR:%vreg1
112B		%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
128B		%R2<def> = COPY %vreg2; rGPR:%vreg2
144B		%R3<def> = COPY %vreg0; GPR:%vreg0
160B		tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use,kill>, %R2<imp-use,kill>, %R3<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
176B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
208B		%R0<def> = COPY %vreg1; rGPR:%vreg1
224B		%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
240B		TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use,kill>

# End machine code for function no_mem_exit.

# After Greedy Register Allocator:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0 in %vreg0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg0<def> = COPY %R0; GPR:%vreg0
32B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
48B		%vreg1<def> = t2MOVi32imm <ga:@errortext>; rGPR:%vreg1
64B		%vreg2<def> = t2MOVi32imm <ga:@.str.20>; rGPR:%vreg2
96B		%R0<def> = COPY %vreg1; rGPR:%vreg1
112B		%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
128B		%R2<def> = COPY %vreg2; rGPR:%vreg2
144B		%R3<def> = COPY %vreg0; GPR:%vreg0
160B		tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
176B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
208B		%R0<def> = COPY %vreg1; rGPR:%vreg1
224B		%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
240B		TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Virtual Register Rewriter:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%R3<def> = COPY %R0
32B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
48B		%R4<def> = t2MOVi32imm <ga:@errortext>
64B		%R2<def> = t2MOVi32imm <ga:@.str.20>
96B		%R0<def> = COPY %R4
112B		%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
160B		tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
176B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
208B		%R0<def> = COPY %R4<kill>
224B		%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
240B		TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Stack Slot Coloring:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R3<def> = COPY %R0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R4<def> = t2MOVi32imm <ga:@errortext>
	%R2<def> = t2MOVi32imm <ga:@.str.20>
	%R0<def> = COPY %R4
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %R4<kill>
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Machine Loop Invariant Code Motion:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R3<def> = COPY %R0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R4<def> = t2MOVi32imm <ga:@errortext>
	%R2<def> = t2MOVi32imm <ga:@.str.20>
	%R0<def> = COPY %R4
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %R4<kill>
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Shrink Wrapping analysis:
# Machine code for function no_mem_exit: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R3<def> = COPY %R0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R4<def> = t2MOVi32imm <ga:@errortext>
	%R2<def> = t2MOVi32imm <ga:@.str.20>
	%R0<def> = COPY %R4
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %R4<kill>
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = COPY %R0
	%R4<def> = t2MOVi32imm <ga:@errortext>
	%R2<def> = t2MOVi32imm <ga:@.str.20>
	%R0<def> = COPY %R4
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = COPY %R4<kill>
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Machine Copy Propagation Pass:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = COPY %R0
	%R4<def> = t2MOVi32imm <ga:@errortext>
	%R2<def> = t2MOVi32imm <ga:@.str.20>
	%R0<def> = COPY %R4
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = COPY %R4<kill>
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi32imm <ga:@errortext>
	%R2<def> = t2MOVi32imm <ga:@.str.20>
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After ARM load / store optimization pass:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi32imm <ga:@errortext>
	%R2<def> = t2MOVi32imm <ga:@.str.20>
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Execution dependency fix:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi32imm <ga:@errortext>
	%R2<def> = t2MOVi32imm <ga:@.str.20>
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	TCRETURNdi <ga:@error>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After ARM pseudo instruction expansion pass:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Thumb2 instruction size reduction pass:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Thumb IT blocks insertion pass:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def> = t2MOVi 100, pred:14, pred:%noreg, opt:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Thumb2 instruction size reduction pass:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def>, %CPSR<def,dead> = tMOVi8 100, pred:14, pred:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Unpack machine instruction bundles:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def>, %CPSR<def,dead> = tMOVi8 100, pred:14, pred:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After optimise barriers pass:
# Machine code for function no_mem_exit: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def>, %CPSR<def,dead> = tMOVi8 100, pred:14, pred:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After ARM constant island placement and branch shortening pass:
# Machine code for function no_mem_exit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def>, %CPSR<def,dead> = tMOVi8 100, pred:14, pred:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Contiguously Lay Out Funclets:
# Machine code for function no_mem_exit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def>, %CPSR<def,dead> = tMOVi8 100, pred:14, pred:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After StackMap Liveness Analysis:
# Machine code for function no_mem_exit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def>, %CPSR<def,dead> = tMOVi8 100, pred:14, pred:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

# After Live DEBUG_VALUE analysis:
# Machine code for function no_mem_exit: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R3<def> = tMOVr %R0, pred:14, pred:%noreg
	%R4<def> = t2MOVi16 <ga:@errortext>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@errortext>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.20>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.20>[TF=2], pred:14, pred:%noreg
	%R0<def> = tMOVr %R4, pred:14, pred:%noreg
	%R1<def> = t2MOVi 300, pred:14, pred:%noreg, opt:%noreg
	tBL pred:14, pred:%noreg, <ga:@snprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %R3<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = tMOVr %R4<kill>, pred:14, pred:%noreg
	%R1<def>, %CPSR<def,dead> = tMOVi8 100, pred:14, pred:%noreg
	%SP<def,tied1> = t2LDMIA_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %LR<def>
	tTAILJMPdND <ga:@error>, pred:14, pred:%noreg, %SP<imp-use>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>

# End machine code for function no_mem_exit.

