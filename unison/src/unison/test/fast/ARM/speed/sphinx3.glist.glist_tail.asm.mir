--- |
  ; ModuleID = 'sphinx3.glist.glist_tail.ll'
  target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
  target triple = "armv6t2-pc-linux-eabi"
  
  %struct.gnode_s.40 = type { %union.anytype_s.41, %struct.gnode_s.40* }
  %union.anytype_s.41 = type { double }
  
  ; Function Attrs: norecurse nounwind readonly
  define %struct.gnode_s.40* @glist_tail(%struct.gnode_s.40* readonly %g) #0 {
    %1 = icmp eq %struct.gnode_s.40* %g, null
    br i1 %1, label %.loopexit, label %.preheader
  
  .preheader:                                       ; preds = %0, %.preheader
    %gn.0 = phi %struct.gnode_s.40* [ %3, %.preheader ], [ %g, %0 ]
    %2 = getelementptr inbounds %struct.gnode_s.40, %struct.gnode_s.40* %gn.0, i32 0, i32 1
    %3 = load %struct.gnode_s.40*, %struct.gnode_s.40** %2, align 8
    %4 = icmp eq %struct.gnode_s.40* %3, null
    br i1 %4, label %.loopexit, label %.preheader
  
  .loopexit:                                        ; preds = %.preheader, %0
    %.0 = phi %struct.gnode_s.40* [ null, %0 ], [ %gn.0, %.preheader ]
    ret %struct.gnode_s.40* %.0
  }
  
  attributes #0 = { norecurse nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="arm1156t2f-s" "target-features"="+thumb-mode" "unsafe-fp-math"="false" "use-soft-float"="false" }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"min_enum_size", i32 4}
  !2 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            glist_tail
alignment:       1
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%r0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    0
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
body:             |
  bb.0 (%ir-block.0, freq 21):
    successors: %bb.1(37), %bb.2(62)
    liveins: %r0
  
    %r1 = tMOVr %r0, 14, _
    tCMPi8 %r1, 0, 14, _, implicit-def %cpsr
    t2Bcc %bb.2, 1, killed %cpsr
  
  bb.1 (freq 8):
    successors: %bb.4..loopexit(100)
  
    %r0, dead %cpsr = tMOVi8 0, 14, _
    t2B %bb.4..loopexit, 14, _
  
  bb.2 (freq 13):
    successors: %bb.3..preheader(100)
    liveins: %r1
  
  
  bb.3..preheader (freq 426):
    successors: %bb.4..loopexit(3), %bb.3..preheader(96)
    liveins: %r1
  
    %r0 = tMOVr killed %r1, 14, _
    %r1 = tLDRi %r0, 2, 14, _ :: (load 4 from %ir.2, align 8)
    tCMPi8 %r1, 0, 14, _, implicit-def %cpsr
    t2Bcc %bb.3..preheader, 1, killed %cpsr
    t2B %bb.4..loopexit, 14, _
  
  bb.4..loopexit (freq 21):
    liveins: %r0
    liveouts: %r0
  
    tBX_RET 14, _, implicit %r0

...
