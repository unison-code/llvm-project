# After Instruction Selection:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Expand ISel Pseudo-instructions:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Tail Duplication:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Optimize machine instruction PHIs:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Merge disjoint stack slots:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Local Stack Slot Allocation:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Remove dead machine instructions:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Machine Loop Invariant Code Motion:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Machine Common Subexpression Elimination:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Machine code sinking:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Peephole Optimizations:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Remove dead machine instructions:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After ARM MLA / MLS expansion pass:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After ARM pre- register allocation load / store optimization pass:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After ARM A15 S->D optimizer:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Process Implicit Definitions:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2; GPR:%vreg3
	%vreg1<def> = COPY %R0; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1; GPR:%vreg1
	%R1<def> = COPY %vreg0; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0; GPRnopc:%vreg4
	t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Live Variable Analysis:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2<kill>; GPR:%vreg3
	%vreg1<def> = COPY %R0<kill>; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1<kill>; GPR:%vreg1
	%R1<def> = COPY %vreg0<kill>; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0<kill>; GPRnopc:%vreg4
	t2CMPri %vreg4<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Machine Natural Loop Construction:
# Machine code for function insn_dependent_p_1: SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2<kill>; GPR:%vreg3
	%vreg1<def> = COPY %R0<kill>; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1<kill>; GPR:%vreg1
	%R1<def> = COPY %vreg0<kill>; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0<kill>; GPRnopc:%vreg4
	t2CMPri %vreg4<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Eliminate PHI nodes for register allocation:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2<kill>; GPR:%vreg3
	%vreg1<def> = COPY %R0<kill>; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1<kill>; GPR:%vreg1
	%R1<def> = COPY %vreg0<kill>; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0<kill>; GPRnopc:%vreg4
	t2CMPri %vreg4<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Two-Address instruction pass:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%vreg3<def> = COPY %R2<kill>; GPR:%vreg3
	%vreg1<def> = COPY %R0<kill>; GPR:%vreg1
	%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = COPY %vreg1<kill>; GPR:%vreg1
	%R1<def> = COPY %vreg0<kill>; GPRnopc:%vreg0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = COPY %R0<kill>; GPRnopc:%vreg4
	t2CMPri %vreg4<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	t2STRi12 %vreg5<kill>, %vreg3<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Simple Register Coalescing:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%vreg3<def> = COPY %R2; GPR:%vreg3
32B		%vreg1<def> = COPY %R0; GPR:%vreg1
48B		%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
64B		t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
80B		t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
96B		t2B <BB#1>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
144B		%R0<def> = COPY %vreg1; GPR:%vreg1
160B		%R1<def> = COPY %vreg0; GPRnopc:%vreg0
176B		tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use,kill>, %SP<imp-def>, %R0<imp-def>, ...
192B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
208B		%vreg4<def> = COPY %R0; GPRnopc:%vreg4
224B		t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
240B		t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
256B		t2B <BB#2>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Predecessors according to CFG: BB#1
288B		%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
304B		t2STRi12 %vreg5, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
	    Successors according to CFG: BB#3(?%)

320B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
336B		tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Machine Instruction Scheduler:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%vreg3<def> = COPY %R2; GPR:%vreg3
32B		%vreg1<def> = COPY %R0; GPR:%vreg1
48B		%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
64B		t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
80B		t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
96B		t2B <BB#1>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
144B		%R0<def> = COPY %vreg1; GPR:%vreg1
160B		%R1<def> = COPY %vreg0; GPRnopc:%vreg0
176B		tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use,kill>, %SP<imp-def>, %R0<imp-def>, ...
192B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
208B		%vreg4<def> = COPY %R0; GPRnopc:%vreg4
224B		t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
240B		t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
256B		t2B <BB#2>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Predecessors according to CFG: BB#1
288B		%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
304B		t2STRi12 %vreg5, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
	    Successors according to CFG: BB#3(?%)

320B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
336B		tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Greedy Register Allocator:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0 in %vreg1, %R2 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%vreg3<def> = COPY %R2; GPR:%vreg3
32B		%vreg1<def> = COPY %R0; GPR:%vreg1
48B		%vreg0<def> = t2LDRi12 %vreg3, 0, pred:14, pred:%noreg; mem:LD4[%1] GPRnopc:%vreg0 GPR:%vreg3
64B		t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg0
80B		t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
96B		t2B <BB#1>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
144B		%R0<def> = COPY %vreg1; GPR:%vreg1
160B		%R1<def> = COPY %vreg0; GPRnopc:%vreg0
176B		tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
192B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
208B		%vreg4<def> = COPY %R0; GPRnopc:%vreg4
224B		t2CMPri %vreg4, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg4
240B		t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
256B		t2B <BB#2>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Predecessors according to CFG: BB#1
288B		%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
304B		t2STRi12 %vreg5, %vreg3, 0, pred:14, pred:%noreg; mem:ST4[%8] rGPR:%vreg5 GPR:%vreg3
	    Successors according to CFG: BB#3(?%)

320B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
336B		tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Virtual Register Rewriter:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0 %R2
16B		%R4<def> = COPY %R2
48B		%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
64B		t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
80B		t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
96B		t2B <BB#1>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

112B	BB#1: derived from LLVM BB %4
	    Live Ins: %R0 %R1 %R4
	    Predecessors according to CFG: BB#0
128B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
176B		tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
192B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
224B		t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
240B		t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
256B		t2B <BB#2>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

272B	BB#2: derived from LLVM BB %7
	    Live Ins: %R4
	    Predecessors according to CFG: BB#1
288B		%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
304B		t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
	    Successors according to CFG: BB#3(?%)

320B	BB#3: derived from LLVM BB %9
	    Predecessors according to CFG: BB#0 BB#1 BB#2
336B		tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Stack Slot Coloring:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%R4<def> = COPY %R2
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Machine Loop Invariant Code Motion:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%R4<def> = COPY %R2
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Shrink Wrapping analysis:
# Machine code for function insn_dependent_p_1: Post SSA
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2
	%R4<def> = COPY %R2
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tBX_RET pred:14, pred:%noreg

# End machine code for function insn_dependent_p_1.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = COPY %R2
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Machine Copy Propagation Pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = COPY %R2
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After ARM load / store optimization pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Execution dependency fix:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After ARM pseudo instruction expansion pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Thumb2 instruction size reduction pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Thumb IT blocks insertion pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	t2CMPri %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Thumb2 instruction size reduction pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	tCMPi8 %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Unpack machine instruction bundles:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	tCMPi8 %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After optimise barriers pass:
# Machine code for function insn_dependent_p_1: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	tCMPi8 %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After ARM constant island placement and branch shortening pass:
# Machine code for function insn_dependent_p_1: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	tCMPi8 %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Contiguously Lay Out Funclets:
# Machine code for function insn_dependent_p_1: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	tCMPi8 %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After StackMap Liveness Analysis:
# Machine code for function insn_dependent_p_1: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	tCMPi8 %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

# After Live DEBUG_VALUE analysis:
# Machine code for function insn_dependent_p_1: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
Function Live Ins: %R0, %R2

BB#0: derived from LLVM BB %0
    Live Ins: %R0 %R2 %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = tMOVr %R2, pred:14, pred:%noreg
	%R1<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[%1]
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %4
    Live Ins: %R0 %R1 %R4
    Predecessors according to CFG: BB#0
	tBL pred:14, pred:%noreg, <ga:@reg_mentioned_p>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %SP<imp-def>, %R0<imp-def>
	tCMPi8 %R0<kill>, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:0, pred:%CPSR<kill>
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#2: derived from LLVM BB %7
    Live Ins: %R4
    Predecessors according to CFG: BB#1
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[%8]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#1 BB#2
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function insn_dependent_p_1.

