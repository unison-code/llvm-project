# After Instruction Selection:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Expand ISel Pseudo-instructions:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Tail Duplication:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Optimize machine instruction PHIs:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Merge disjoint stack slots:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Local Stack Slot Allocation:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Remove dead machine instructions:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Machine Loop Invariant Code Motion:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Machine Common Subexpression Elimination:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Machine code sinking:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#1>, pred:1, pred:%CPSR
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1 BB#3
	%vreg2<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Peephole Optimizations:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#1>, pred:1, pred:%CPSR
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1 BB#3
	%vreg2<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Remove dead machine instructions:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#1>, pred:1, pred:%CPSR
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1 BB#3
	%vreg2<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After ARM MLA / MLS expansion pass:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#1>, pred:1, pred:%CPSR
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1 BB#3
	%vreg2<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After ARM pre- register allocation load / store optimization pass:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#1>, pred:1, pred:%CPSR
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1 BB#3
	%vreg2<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After ARM A15 S->D optimizer:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#1>, pred:1, pred:%CPSR
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1 BB#3
	%vreg2<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Process Implicit Definitions:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#1>, pred:1, pred:%CPSR
    Successors according to CFG: BB#3(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %7
    Predecessors according to CFG: BB#1 BB#3
	%vreg2<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Live Variable Analysis:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5<kill>; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0<kill>, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Predecessors according to CFG: BB#2 BB#1
	%vreg2<def> = PHI %vreg3, <BB#1>, %vreg1, <BB#2>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2<kill>; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function get_last_player.

# After Machine Natural Loop Construction:
# Machine code for function get_last_player: SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5<kill>; GPR:%vreg3 rGPR:%vreg5
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0<kill>, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Predecessors according to CFG: BB#2 BB#1
	%vreg2<def> = PHI %vreg3, <BB#1>, %vreg1, <BB#2>; GPR:%vreg2,%vreg3,%vreg1
	%R0<def> = COPY %vreg2<kill>; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function get_last_player.

# After Eliminate PHI nodes for register allocation:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5<kill>; GPR:%vreg3 rGPR:%vreg5
	%vreg8<def> = COPY %vreg3<kill>; GPR:%vreg8,%vreg3
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0<kill>, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
	%vreg8<def> = COPY %vreg1<kill>; GPR:%vreg8,%vreg1
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Predecessors according to CFG: BB#2 BB#1
	%vreg2<def> = COPY %vreg8<kill>; GPR:%vreg2,%vreg8
	%R0<def> = COPY %vreg2<kill>; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function get_last_player.

# After Two-Address instruction pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
	%vreg0<def> = t2LDRi12 %vreg4<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
	t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg3<def> = COPY %vreg5<kill>; GPR:%vreg3 rGPR:%vreg5
	%vreg8<def> = COPY %vreg3<kill>; GPR:%vreg8,%vreg3
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
	%vreg7<def> = t2ADDrs %vreg6<kill>, %vreg0<kill>, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
	%vreg1<def> = t2LDRi8 %vreg7<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5] GPR:%vreg1 GPRnopc:%vreg7
	%vreg8<def> = COPY %vreg1<kill>; GPR:%vreg8,%vreg1
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Predecessors according to CFG: BB#2 BB#1
	%vreg2<def> = COPY %vreg8<kill>; GPR:%vreg2,%vreg8
	%R0<def> = COPY %vreg2<kill>; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function get_last_player.

# After Simple Register Coalescing:
# Machine code for function get_last_player: Post SSA

0B	BB#0: derived from LLVM BB %0
16B		%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
32B		%vreg0<def> = t2LDRi12 %vreg4, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
48B		t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
64B		t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
	    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

80B	BB#1: 
	    Predecessors according to CFG: BB#0
96B		%vreg8<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
144B		t2B <BB#3>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(?%)

160B	BB#2: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
192B		%vreg7<def> = t2ADDrs %vreg6, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
208B		%vreg8<def> = t2LDRi8 %vreg7, -4, pred:14, pred:%noreg; mem:LD4[%5] rGPR:%vreg8 GPRnopc:%vreg7
	    Successors according to CFG: BB#3(?%)

240B	BB#3: derived from LLVM BB %7
	    Predecessors according to CFG: BB#2 BB#1
272B		%R0<def> = COPY %vreg8; rGPR:%vreg8
288B		tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function get_last_player.

# After Machine Instruction Scheduler:
# Machine code for function get_last_player: Post SSA

0B	BB#0: derived from LLVM BB %0
16B		%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
32B		%vreg0<def> = t2LDRi12 %vreg4, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
48B		t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
64B		t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
	    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

80B	BB#1: 
	    Predecessors according to CFG: BB#0
96B		%vreg8<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
144B		t2B <BB#3>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(?%)

160B	BB#2: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
192B		%vreg7<def> = t2ADDrs %vreg6, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
208B		%vreg8<def> = t2LDRi8 %vreg7, -4, pred:14, pred:%noreg; mem:LD4[%5] rGPR:%vreg8 GPRnopc:%vreg7
	    Successors according to CFG: BB#3(?%)

240B	BB#3: derived from LLVM BB %7
	    Predecessors according to CFG: BB#2 BB#1
272B		%R0<def> = COPY %vreg8; rGPR:%vreg8
288B		tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function get_last_player.

# After Greedy Register Allocator:
# Machine code for function get_last_player: Post SSA

0B	BB#0: derived from LLVM BB %0
16B		%vreg4<def> = t2MOVi32imm <ga:@move_history_pointer>; rGPR:%vreg4
32B		%vreg0<def> = t2LDRi12 %vreg4, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer] rGPR:%vreg0,%vreg4
48B		t2CMPri %vreg0, 0, pred:14, pred:%noreg, %CPSR<imp-def>; rGPR:%vreg0
64B		t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
	    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

80B	BB#1: 
	    Predecessors according to CFG: BB#0
96B		%vreg8<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
144B		t2B <BB#3>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(?%)

160B	BB#2: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
176B		%vreg6<def> = t2MOVi32imm <ga:@move_history_color>; rGPR:%vreg6
192B		%vreg7<def> = t2ADDrs %vreg6, %vreg0, 18, pred:14, pred:%noreg, opt:%noreg; GPRnopc:%vreg7 rGPR:%vreg6,%vreg0
208B		%vreg8<def> = t2LDRi8 %vreg7, -4, pred:14, pred:%noreg; mem:LD4[%5] rGPR:%vreg8 GPRnopc:%vreg7
	    Successors according to CFG: BB#3(?%)

240B	BB#3: derived from LLVM BB %7
	    Predecessors according to CFG: BB#2 BB#1
272B		%R0<def> = COPY %vreg8; rGPR:%vreg8
288B		tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Virtual Register Rewriter:
# Machine code for function get_last_player: Post SSA

0B	BB#0: derived from LLVM BB %0
16B		%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
32B		%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
48B		t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
64B		t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
	    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

80B	BB#1: 
	    Predecessors according to CFG: BB#0
96B		%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
144B		t2B <BB#3>, pred:14, pred:%noreg
	    Successors according to CFG: BB#3(?%)

160B	BB#2: derived from LLVM BB %3
	    Live Ins: %R0
	    Predecessors according to CFG: BB#0
176B		%R1<def> = t2MOVi32imm <ga:@move_history_color>
192B		%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
208B		%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
	    Successors according to CFG: BB#3(?%)

240B	BB#3: derived from LLVM BB %7
	    Live Ins: %R0
	    Predecessors according to CFG: BB#2 BB#1
288B		tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Stack Slot Coloring:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi32imm <ga:@move_history_color>
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Machine Loop Invariant Code Motion:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi32imm <ga:@move_history_color>
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Shrink Wrapping analysis:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi32imm <ga:@move_history_color>
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi32imm <ga:@move_history_color>
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Machine Copy Propagation Pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi32imm <ga:@move_history_color>
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi32imm <ga:@move_history_color>
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After ARM load / store optimization pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi32imm <ga:@move_history_color>
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Execution dependency fix:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi32imm <ga:@move_history_pointer>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi32imm <ga:@move_history_color>
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After ARM pseudo instruction expansion pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Thumb2 instruction size reduction pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Thumb IT blocks insertion pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	t2CMPri %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Thumb2 instruction size reduction pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	tCMPi8 %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Unpack machine instruction bundles:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	tCMPi8 %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After optimise barriers pass:
# Machine code for function get_last_player: Post SSA

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	tCMPi8 %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After ARM constant island placement and branch shortening pass:
# Machine code for function get_last_player: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	tCMPi8 %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Contiguously Lay Out Funclets:
# Machine code for function get_last_player: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	tCMPi8 %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After StackMap Liveness Analysis:
# Machine code for function get_last_player: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	tCMPi8 %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

# After Live DEBUG_VALUE analysis:
# Machine code for function get_last_player: Post SSA, not tracking liveness

BB#0: derived from LLVM BB %0
	%R0<def> = t2MOVi16 <ga:@move_history_pointer>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@move_history_pointer>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@move_history_pointer]
	tCMPi8 %R0, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#3>, pred:14, pred:%noreg
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %3
    Live Ins: %R0
    Predecessors according to CFG: BB#0
	%R1<def> = t2MOVi16 <ga:@move_history_color>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@move_history_color>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2ADDrs %R1<kill>, %R0<kill>, 18, pred:14, pred:%noreg, opt:%noreg
	%R0<def> = t2LDRi8 %R0<kill>, -4, pred:14, pred:%noreg; mem:LD4[%5]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %7
    Live Ins: %R0
    Predecessors according to CFG: BB#2 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function get_last_player.

