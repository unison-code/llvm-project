# After Instruction Selection:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Expand ISel Pseudo-instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Tail Duplication:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Optimize machine instruction PHIs:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Merge disjoint stack slots:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Local Stack Slot Allocation:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Remove dead machine instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#1(0x50000000 / 0x80000000 = 62.50%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg3, <BB#0>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Loop Invariant Code Motion:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Common Subexpression Elimination:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:0, pred:%CPSR
    Successors according to CFG: BB#2(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#0 BB#1
	%vreg2<def> = PHI %vreg4, <BB#0>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine code sinking:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#3>, pred:1, pred:%CPSR
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg4, <BB#4>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Peephole Optimizations:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#3>, pred:1, pred:%CPSR
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg4, <BB#4>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Remove dead machine instructions:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#3>, pred:1, pred:%CPSR
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg4, <BB#4>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After ARM MLA / MLS expansion pass:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#3>, pred:1, pred:%CPSR
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg4, <BB#4>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After ARM pre- register allocation load / store optimization pass:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#3>, pred:1, pred:%CPSR
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg4, <BB#4>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After ARM A15 S->D optimizer:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#3>, pred:1, pred:%CPSR
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg4, <BB#4>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Process Implicit Definitions:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#3>, pred:1, pred:%CPSR
    Successors according to CFG: BB#4(0x30000000 / 0x80000000 = 37.50%) BB#3(0x50000000 / 0x80000000 = 62.50%)

BB#4: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(?%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg3, <BB#3>, %vreg1, <BB#1>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#1>, pred:1, pred:%CPSR
	t2B <BB#2>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x04000000 / 0x80000000 = 3.12%) BB#1(0x7c000000 / 0x80000000 = 96.88%)

BB#2: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#1 BB#4
	%vreg2<def> = PHI %vreg4, <BB#4>, %vreg0, <BB#1>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Live Variable Analysis:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0<kill>; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5<kill>; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#3 BB#2
	%vreg0<def> = PHI %vreg3, <BB#2>, %vreg1, <BB#3>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#3 BB#1
	%vreg2<def> = PHI %vreg4, <BB#1>, %vreg0, <BB#3>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2<kill>; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Machine Natural Loop Construction:
# Machine code for function glist_tail: SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0<kill>; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5<kill>; GPR:%vreg4 rGPR:%vreg5
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#3 BB#2
	%vreg0<def> = PHI %vreg3, <BB#2>, %vreg1, <BB#3>; GPR:%vreg0 GPRnopc:%vreg3,%vreg1
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#3 BB#1
	%vreg2<def> = PHI %vreg4, <BB#1>, %vreg0, <BB#3>; GPR:%vreg2,%vreg4,%vreg0
	%R0<def> = COPY %vreg2<kill>; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Eliminate PHI nodes for register allocation:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0<kill>; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5<kill>; GPR:%vreg4 rGPR:%vreg5
	%vreg7<def> = COPY %vreg4<kill>; GPR:%vreg7,%vreg4
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %vreg3<kill>; GPR:%vreg6 GPRnopc:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#3 BB#2
	%vreg0<def> = COPY %vreg6<kill>; GPR:%vreg0,%vreg6
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	%vreg6<def> = COPY %vreg1<kill>; GPR:%vreg6 GPRnopc:%vreg1
	%vreg7<def> = COPY %vreg0<kill>; GPR:%vreg7,%vreg0
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#3 BB#1
	%vreg2<def> = COPY %vreg7<kill>; GPR:%vreg2,%vreg7
	%R0<def> = COPY %vreg2<kill>; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Two-Address instruction pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%vreg3<def> = COPY %R0<kill>; GPRnopc:%vreg3
	t2CMPri %vreg3, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg3
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg5
	%vreg4<def> = COPY %vreg5<kill>; GPR:%vreg4 rGPR:%vreg5
	%vreg7<def> = COPY %vreg4<kill>; GPR:%vreg7,%vreg4
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Predecessors according to CFG: BB#0
	%vreg6<def> = COPY %vreg3<kill>; GPR:%vreg6 GPRnopc:%vreg3
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Predecessors according to CFG: BB#3 BB#2
	%vreg0<def> = COPY %vreg6<kill>; GPR:%vreg0,%vreg6
	%vreg1<def> = t2LDRi12 %vreg0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg1 GPR:%vreg0
	t2CMPri %vreg1, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	%vreg6<def> = COPY %vreg1<kill>; GPR:%vreg6 GPRnopc:%vreg1
	%vreg7<def> = COPY %vreg0<kill>; GPR:%vreg7,%vreg0
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Predecessors according to CFG: BB#3 BB#1
	%vreg2<def> = COPY %vreg7<kill>; GPR:%vreg2,%vreg7
	%R0<def> = COPY %vreg2<kill>; GPR:%vreg2
	tBX_RET pred:14, pred:%noreg, %R0<imp-use,kill>

# End machine code for function glist_tail.

# After Simple Register Coalescing:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg6<def> = COPY %R0; GPRnopc:%vreg6
32B		t2CMPri %vreg6, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg6
48B		t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
	    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

64B	BB#1: 
	    Predecessors according to CFG: BB#0
80B		%vreg7<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg7
128B		t2B <BB#4>, pred:14, pred:%noreg
	    Successors according to CFG: BB#4(?%)

144B	BB#2: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#3(?%)

176B	BB#3: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#3 BB#2
192B		%vreg7<def> = COPY %vreg6; rGPR:%vreg7 GPRnopc:%vreg6
208B		%vreg6<def> = t2LDRi12 %vreg7, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg6 rGPR:%vreg7
224B		t2CMPri %vreg6, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg6
272B		t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
288B		t2B <BB#4>, pred:14, pred:%noreg
	    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

304B	BB#4: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#3 BB#1
336B		%R0<def> = COPY %vreg7; rGPR:%vreg7
352B		tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Instruction Scheduler:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg6<def> = COPY %R0; GPRnopc:%vreg6
32B		t2CMPri %vreg6, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg6
48B		t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
	    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

64B	BB#1: 
	    Predecessors according to CFG: BB#0
80B		%vreg7<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg7
128B		t2B <BB#4>, pred:14, pred:%noreg
	    Successors according to CFG: BB#4(?%)

144B	BB#2: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#3(?%)

176B	BB#3: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#3 BB#2
192B		%vreg7<def> = COPY %vreg6; rGPR:%vreg7 GPRnopc:%vreg6
208B		%vreg6<def> = t2LDRi12 %vreg7, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg6 rGPR:%vreg7
224B		t2CMPri %vreg6, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg6
272B		t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
288B		t2B <BB#4>, pred:14, pred:%noreg
	    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

304B	BB#4: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#3 BB#1
336B		%R0<def> = COPY %vreg7; rGPR:%vreg7
352B		tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Greedy Register Allocator:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0 in %vreg3

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%vreg6<def> = COPY %R0; GPRnopc:%vreg6
32B		t2CMPri %vreg6, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg6
48B		t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
	    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

64B	BB#1: 
	    Predecessors according to CFG: BB#0
80B		%vreg7<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg7
128B		t2B <BB#4>, pred:14, pred:%noreg
	    Successors according to CFG: BB#4(?%)

144B	BB#2: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#3(?%)

176B	BB#3: derived from LLVM BB %.preheader
	    Predecessors according to CFG: BB#3 BB#2
192B		%vreg7<def> = COPY %vreg6; rGPR:%vreg7 GPRnopc:%vreg6
208B		%vreg6<def> = t2LDRi12 %vreg7, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8) GPRnopc:%vreg6 rGPR:%vreg7
224B		t2CMPri %vreg6, 0, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg6
272B		t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
288B		t2B <BB#4>, pred:14, pred:%noreg
	    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

304B	BB#4: derived from LLVM BB %.loopexit
	    Predecessors according to CFG: BB#3 BB#1
336B		%R0<def> = COPY %vreg7; rGPR:%vreg7
352B		tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Virtual Register Rewriter:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %R0
16B		%R1<def> = COPY %R0
32B		t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
48B		t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
	    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

64B	BB#1: 
	    Predecessors according to CFG: BB#0
80B		%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
128B		t2B <BB#4>, pred:14, pred:%noreg
	    Successors according to CFG: BB#4(?%)

144B	BB#2: 
	    Live Ins: %R1
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#3(?%)

176B	BB#3: derived from LLVM BB %.preheader
	    Live Ins: %R1
	    Predecessors according to CFG: BB#3 BB#2
192B		%R0<def> = COPY %R1<kill>
208B		%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
224B		t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
272B		t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
288B		t2B <BB#4>, pred:14, pred:%noreg
	    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

304B	BB#4: derived from LLVM BB %.loopexit
	    Live Ins: %R0
	    Predecessors according to CFG: BB#3 BB#1
352B		tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Stack Slot Coloring:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = COPY %R0
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = COPY %R1<kill>
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Loop Invariant Code Motion:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = COPY %R0
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = COPY %R1<kill>
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Shrink Wrapping analysis:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = COPY %R0
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = COPY %R1<kill>
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = COPY %R0
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = COPY %R1<kill>
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Machine Copy Propagation Pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = COPY %R0
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = COPY %R1<kill>
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After ARM load / store optimization pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Execution dependency fix:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After ARM pseudo instruction expansion pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Thumb2 instruction size reduction pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Thumb IT blocks insertion pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi 0, pred:14, pred:%noreg, opt:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = t2LDRi12 %R0, 8, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	t2CMPri %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Thumb2 instruction size reduction pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = tLDRi %R0, 2, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Unpack machine instruction bundles:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = tLDRi %R0, 2, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After optimise barriers pass:
# Machine code for function glist_tail: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = tLDRi %R0, 2, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After ARM constant island placement and branch shortening pass:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = tLDRi %R0, 2, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Contiguously Lay Out Funclets:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = tLDRi %R0, 2, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After StackMap Liveness Analysis:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = tLDRi %R0, 2, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

# After Live DEBUG_VALUE analysis:
# Machine code for function glist_tail: Post SSA, not tracking liveness
Function Live Ins: %R0

BB#0: derived from LLVM BB %0
    Live Ins: %R0
	%R1<def> = tMOVr %R0, pred:14, pred:%noreg
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:1, pred:%CPSR<kill>
    Successors according to CFG: BB#1(0x30000000 / 0x80000000 = 37.50%) BB#2(0x50000000 / 0x80000000 = 62.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%R0<def>, %CPSR<def,dead> = tMOVi8 0, pred:14, pred:%noreg
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(?%)

BB#2: 
    Live Ins: %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %.preheader
    Live Ins: %R1
    Predecessors according to CFG: BB#3 BB#2
	%R0<def> = tMOVr %R1<kill>, pred:14, pred:%noreg
	%R1<def> = tLDRi %R0, 2, pred:14, pred:%noreg; mem:LD4[%2](align=8)
	tCMPi8 %R1, 0, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#3>, pred:1, pred:%CPSR<kill>
	t2B <BB#4>, pred:14, pred:%noreg
    Successors according to CFG: BB#4(0x04000000 / 0x80000000 = 3.12%) BB#3(0x7c000000 / 0x80000000 = 96.88%)

BB#4: derived from LLVM BB %.loopexit
    Live Ins: %R0
    Predecessors according to CFG: BB#3 BB#1
	tBX_RET pred:14, pred:%noreg, %R0<imp-use>

# End machine code for function glist_tail.

