# After Instruction Selection:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %R0; GPR:%vreg6
	%vreg7<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg7
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg7<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Expand ISel Pseudo-instructions:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %R0; GPR:%vreg6
	%vreg7<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg7
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg7<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Tail Duplication:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %R0; GPR:%vreg6
	%vreg7<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg7
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg7<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Optimize machine instruction PHIs:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %R0; GPR:%vreg6
	%vreg7<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg7
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg7<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Merge disjoint stack slots:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %R0; GPR:%vreg6
	%vreg7<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg7
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg7<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Local Stack Slot Allocation:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = COPY %R0; GPR:%vreg6
	%vreg7<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg7
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg7<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Remove dead machine instructions:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg7
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg7<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Machine Loop Invariant Code Motion:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg7
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg7<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg7
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Machine Common Subexpression Elimination:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Machine code sinking:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Peephole Optimizations:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Remove dead machine instructions:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After ARM MLA / MLS expansion pass:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After ARM pre- register allocation load / store optimization pass:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After ARM A15 S->D optimizer:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Process Implicit Definitions:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3; GPR:%vreg3
	%R1<def> = COPY %vreg4; rGPR:%vreg4
	%R2<def> = COPY %vreg5; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Live Variable Analysis:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3<kill>; GPR:%vreg3
	%R1<def> = COPY %vreg4<kill>; rGPR:%vreg4
	%R2<def> = COPY %vreg5<kill>; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Machine Natural Loop Construction:
# Machine code for function data_section: SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3<kill>; GPR:%vreg3
	%R1<def> = COPY %vreg4<kill>; rGPR:%vreg4
	%R2<def> = COPY %vreg5<kill>; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Eliminate PHI nodes for register allocation:
# Machine code for function data_section: Post SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3<kill>; GPR:%vreg3
	%R1<def> = COPY %vreg4<kill>; rGPR:%vreg4
	%R2<def> = COPY %vreg5<kill>; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Two-Address instruction pass:
# Machine code for function data_section: Post SSA

BB#0: derived from LLVM BB %0
	%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
	%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
	t2CMPri %vreg1<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
	%vreg3<def> = t2LDRi12 %vreg2<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
	%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
	%R0<def> = COPY %vreg3<kill>; GPR:%vreg3
	%R1<def> = COPY %vreg4<kill>; rGPR:%vreg4
	%R2<def> = COPY %vreg5<kill>; rGPR:%vreg5
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
	t2STRi12 %vreg8<kill>, %vreg0<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Simple Register Coalescing:
# Machine code for function data_section: Post SSA

0B	BB#0: derived from LLVM BB %0
16B		%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
32B		%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
48B		t2CMPri %vreg1, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
64B		t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
80B		t2B <BB#1>, pred:14, pred:%noreg
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
112B		%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
128B		%vreg3<def> = t2LDRi12 %vreg2, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
144B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
160B		%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
176B		%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
192B		%R0<def> = COPY %vreg3; GPR:%vreg3
208B		%R1<def> = COPY %vreg4; rGPR:%vreg4
224B		%R2<def> = COPY %vreg5; rGPR:%vreg5
240B		tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
256B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
272B		%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
288B		t2STRi12 %vreg8, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
	    Successors according to CFG: BB#2(?%)

304B	BB#2: derived from LLVM BB %6
	    Predecessors according to CFG: BB#0 BB#1
320B		tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Machine Instruction Scheduler:
# Machine code for function data_section: Post SSA

0B	BB#0: derived from LLVM BB %0
16B		%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
32B		%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
48B		t2CMPri %vreg1, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
64B		t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
80B		t2B <BB#1>, pred:14, pred:%noreg
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
112B		%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
128B		%vreg3<def> = t2LDRi12 %vreg2, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
144B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
160B		%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
176B		%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
192B		%R0<def> = COPY %vreg3; GPR:%vreg3
208B		%R1<def> = COPY %vreg4; rGPR:%vreg4
224B		%R2<def> = COPY %vreg5; rGPR:%vreg5
240B		tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use,kill>, %R1<imp-use,kill>, %R2<imp-use,kill>, %SP<imp-def>, %R0<imp-def,dead>, ...
256B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
272B		%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
288B		t2STRi12 %vreg8, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
	    Successors according to CFG: BB#2(?%)

304B	BB#2: derived from LLVM BB %6
	    Predecessors according to CFG: BB#0 BB#1
320B		tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Greedy Register Allocator:
# Machine code for function data_section: Post SSA

0B	BB#0: derived from LLVM BB %0
16B		%vreg0<def> = t2MOVi32imm <ga:@in_section>; rGPR:%vreg0
32B		%vreg1<def> = t2LDRi12 %vreg0, 0, pred:14, pred:%noreg; mem:LD4[@in_section] GPRnopc:%vreg1 rGPR:%vreg0
48B		t2CMPri %vreg1, 2, pred:14, pred:%noreg, %CPSR<imp-def>; GPRnopc:%vreg1
64B		t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
80B		t2B <BB#1>, pred:14, pred:%noreg
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
112B		%vreg2<def> = t2MOVi32imm <ga:@asm_out_file>; rGPR:%vreg2
128B		%vreg3<def> = t2LDRi12 %vreg2, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file] GPR:%vreg3 rGPR:%vreg2
144B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
160B		%vreg4<def> = t2MOVi32imm <ga:@.str>; rGPR:%vreg4
176B		%vreg5<def> = t2MOVi32imm <ga:@.str.3>; rGPR:%vreg5
192B		%R0<def> = COPY %vreg3; GPR:%vreg3
208B		%R1<def> = COPY %vreg4; rGPR:%vreg4
224B		%R2<def> = COPY %vreg5; rGPR:%vreg5
240B		tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
256B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
272B		%vreg8<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg; rGPR:%vreg8
288B		t2STRi12 %vreg8, %vreg0, 0, pred:14, pred:%noreg; mem:ST4[@in_section] rGPR:%vreg8,%vreg0
	    Successors according to CFG: BB#2(?%)

304B	BB#2: derived from LLVM BB %6
	    Predecessors according to CFG: BB#0 BB#1
320B		tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Virtual Register Rewriter:
# Machine code for function data_section: Post SSA

0B	BB#0: derived from LLVM BB %0
16B		%R4<def> = t2MOVi32imm <ga:@in_section>
32B		%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
48B		t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
64B		t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
80B		t2B <BB#1>, pred:14, pred:%noreg
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

96B	BB#1: derived from LLVM BB %3
	    Live Ins: %R4
	    Predecessors according to CFG: BB#0
112B		%R0<def> = t2MOVi32imm <ga:@asm_out_file>
128B		%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
144B		ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
160B		%R1<def> = t2MOVi32imm <ga:@.str>
176B		%R2<def> = t2MOVi32imm <ga:@.str.3>
240B		tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
256B		ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
272B		%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
288B		t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
	    Successors according to CFG: BB#2(?%)

304B	BB#2: derived from LLVM BB %6
	    Predecessors according to CFG: BB#0 BB#1
320B		tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Stack Slot Coloring:
# Machine code for function data_section: Post SSA

BB#0: derived from LLVM BB %0
	%R4<def> = t2MOVi32imm <ga:@in_section>
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi32imm <ga:@asm_out_file>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R1<def> = t2MOVi32imm <ga:@.str>
	%R2<def> = t2MOVi32imm <ga:@.str.3>
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Machine Loop Invariant Code Motion:
# Machine code for function data_section: Post SSA

BB#0: derived from LLVM BB %0
	%R4<def> = t2MOVi32imm <ga:@in_section>
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi32imm <ga:@asm_out_file>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R1<def> = t2MOVi32imm <ga:@.str>
	%R2<def> = t2MOVi32imm <ga:@.str.3>
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Shrink Wrapping analysis:
# Machine code for function data_section: Post SSA

BB#0: derived from LLVM BB %0
	%R4<def> = t2MOVi32imm <ga:@in_section>
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi32imm <ga:@asm_out_file>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	ADJCALLSTACKDOWN 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R1<def> = t2MOVi32imm <ga:@.str>
	%R2<def> = t2MOVi32imm <ga:@.str.3>
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>, ...
	ADJCALLSTACKUP 0, 0, pred:14, pred:%noreg, %SP<imp-def,dead>, %SP<imp-use>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tBX_RET pred:14, pred:%noreg

# End machine code for function data_section.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi32imm <ga:@in_section>
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi32imm <ga:@asm_out_file>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi32imm <ga:@.str>
	%R2<def> = t2MOVi32imm <ga:@.str.3>
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Machine Copy Propagation Pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi32imm <ga:@in_section>
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi32imm <ga:@asm_out_file>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi32imm <ga:@.str>
	%R2<def> = t2MOVi32imm <ga:@.str.3>
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi32imm <ga:@in_section>
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi32imm <ga:@asm_out_file>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi32imm <ga:@.str>
	%R2<def> = t2MOVi32imm <ga:@.str.3>
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After ARM load / store optimization pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi32imm <ga:@in_section>
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi32imm <ga:@asm_out_file>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi32imm <ga:@.str>
	%R2<def> = t2MOVi32imm <ga:@.str.3>
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Execution dependency fix:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi32imm <ga:@in_section>
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi32imm <ga:@asm_out_file>
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi32imm <ga:@.str>
	%R2<def> = t2MOVi32imm <ga:@.str.3>
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After ARM pseudo instruction expansion pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Thumb2 instruction size reduction pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Thumb IT blocks insertion pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	%SP<def,tied1> = t2STMDB_UPD %SP<tied0>, pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = t2ADDri %SP<kill>, 8, pred:14, pred:%noreg, opt:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	t2CMPri %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = t2LDRi12 %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def> = t2MOVi 2, pred:14, pred:%noreg, opt:%noreg
	t2STRi12 %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%SP<def,tied1> = t2LDMIA_RET %SP<tied0>, pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Thumb2 instruction size reduction pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	tCMPi8 %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def>, %CPSR<def,dead> = tMOVi8 2, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Unpack machine instruction bundles:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	tCMPi8 %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def>, %CPSR<def,dead> = tMOVi8 2, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After optimise barriers pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	tCMPi8 %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def>, %CPSR<def,dead> = tMOVi8 2, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After ARM constant island placement and branch shortening pass:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	tCMPi8 %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def>, %CPSR<def,dead> = tMOVi8 2, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Contiguously Lay Out Funclets:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	tCMPi8 %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def>, %CPSR<def,dead> = tMOVi8 2, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After StackMap Liveness Analysis:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	tCMPi8 %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def>, %CPSR<def,dead> = tMOVi8 2, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

# After Live DEBUG_VALUE analysis:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]

BB#0: derived from LLVM BB %0
    Live Ins: %R4 %R6 %R7 %LR
	tPUSH pred:14, pred:%noreg, %R4<kill>, %R6<kill>, %R7<kill>, %LR<kill>, %SP<imp-def>, %SP<imp-use>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R7<def> = tADDrSPi %SP<kill>, 2, pred:14, pred:%noreg; flags: FrameSetup
	CFI_INSTRUCTION <call frame instruction>; flags: FrameSetup
	%R4<def> = t2MOVi16 <ga:@in_section>[TF=1], pred:14, pred:%noreg
	%R4<def,tied1> = t2MOVTi16 %R4<tied0>, <ga:@in_section>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R4, 0, pred:14, pred:%noreg; mem:LD4[@in_section]
	tCMPi8 %R0<kill>, 2, pred:14, pred:%noreg, %CPSR<imp-def>
	t2Bcc <BB#2>, pred:0, pred:%CPSR<kill>
	t2B <BB#1>, pred:14, pred:%noreg
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %R4
    Predecessors according to CFG: BB#0
	%R0<def> = t2MOVi16 <ga:@asm_out_file>[TF=1], pred:14, pred:%noreg
	%R0<def,tied1> = t2MOVTi16 %R0<tied0>, <ga:@asm_out_file>[TF=2], pred:14, pred:%noreg
	%R0<def> = tLDRi %R0<kill>, 0, pred:14, pred:%noreg; mem:LD4[@asm_out_file]
	%R1<def> = t2MOVi16 <ga:@.str>[TF=1], pred:14, pred:%noreg
	%R1<def,tied1> = t2MOVTi16 %R1<tied0>, <ga:@.str>[TF=2], pred:14, pred:%noreg
	%R2<def> = t2MOVi16 <ga:@.str.3>[TF=1], pred:14, pred:%noreg
	%R2<def,tied1> = t2MOVTi16 %R2<tied0>, <ga:@.str.3>[TF=2], pred:14, pred:%noreg
	tBL pred:14, pred:%noreg, <ga:@fprintf>, <regmask %LR %D8 %D9 %D10 %D11 %D12 %D13 %D14 %D15 %Q4 %Q5 %Q6 %Q7 %R4 %R5 %R6 %R7 %R8 %R9 %R10 %R11 %S16 %S17 %S18 %S19 %S20 %S21 %S22 %S23 %S24 %S25 %S26 %S27 %S28 %S29 %S30 %S31 %D8_D10 %D9_D11 %D10_D12 %D11_D13 %D12_D14 %D13_D15 %Q4_Q5 %Q5_Q6 %Q6_Q7 %Q4_Q5_Q6_Q7 %R4_R5 %R6_R7 %R8_R9 %R10_R11 %D8_D9_D10 %D9_D10_D11 %D10_D11_D12 %D11_D12_D13 %D12_D13_D14 %D13_D14_D15 %D8_D10_D12 %D9_D11_D13 %D10_D12_D14 %D11_D13_D15 %D8_D10_D12_D14 %D9_D11_D13_D15 %D9_D10 %D11_D12 %D13_D14 %D9_D10_D11_D12 %D11_D12_D13_D14>, %LR<imp-def,dead>, %SP<imp-use>, %R0<imp-use>, %R1<imp-use>, %R2<imp-use>, %SP<imp-def>, %R0<imp-def,dead>
	%R0<def>, %CPSR<def,dead> = tMOVi8 2, pred:14, pred:%noreg
	tSTRi %R0<kill>, %R4<kill>, 0, pred:14, pred:%noreg; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	tPOP_RET pred:14, pred:%noreg, %R4<def>, %R6<def>, %R7<def>, %PC<def>

# End machine code for function data_section.

