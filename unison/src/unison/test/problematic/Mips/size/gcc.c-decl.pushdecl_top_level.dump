# After Instruction Selection:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	JALRPseudo %vreg6<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg6
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Expand ISel Pseudo-instructions:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	JALRPseudo %vreg6<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg6
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Mips OptimizePICCall:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Tail Duplication:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Optimize machine instruction PHIs:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Merge disjoint stack slots:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Local Stack Slot Allocation:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Remove dead machine instructions:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Machine Loop Invariant Code Motion:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Machine Common Subexpression Elimination:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Machine code sinking:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Peephole Optimizations:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Remove dead machine instructions:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Process Implicit Definitions:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
	%vreg0<def> = COPY %A0; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0; GPR32:%vreg0
	%GP<def> = COPY %vreg1; GPR32:%vreg1
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7; GPR32:%vreg7
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Live Variable Analysis:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0<kill>; GPR32:%vreg0
	%GP<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0<kill>; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7<kill>; GPR32:%vreg7
	RetRA %V0<imp-use,kill>

# End machine code for function pushdecl_top_level.

# After Machine Natural Loop Construction:
# Machine code for function pushdecl_top_level: SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0<kill>; GPR32:%vreg0
	%GP<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0<kill>; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7<kill>; GPR32:%vreg7
	RetRA %V0<imp-use,kill>

# End machine code for function pushdecl_top_level.

# After Eliminate PHI nodes for register allocation:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0<kill>; GPR32:%vreg0
	%GP<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0<kill>; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7<kill>; GPR32:%vreg7
	RetRA %V0<imp-use,kill>

# End machine code for function pushdecl_top_level.

# After Two-Address instruction pass:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%vreg1<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg1
	%vreg0<def> = COPY %A0<kill>; GPR32:%vreg0
	%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
	%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
	SW %vreg5<kill>, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
	%A0<def> = COPY %vreg0<kill>; GPR32:%vreg0
	%GP<def> = COPY %vreg1<kill>; GPR32:%vreg1
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0<kill>; GPR32:%vreg7
	SW %vreg3<kill>, %vreg2<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
	%V0<def> = COPY %vreg7<kill>; GPR32:%vreg7
	RetRA %V0<imp-use,kill>

# End machine code for function pushdecl_top_level.

# After Simple Register Coalescing:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
32B		%vreg0<def> = COPY %A0; GPR32:%vreg0
48B		%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
64B		%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
80B		%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
96B		%vreg5<def> = LW %vreg4, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
112B		SW %vreg5, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
160B		%A0<def> = COPY %vreg0; GPR32:%vreg0
176B		%GP<def> = COPY %vreg1; GPR32:%vreg1
192B		%T9<def> = COPY %vreg6; GPR32:%vreg6
208B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
224B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
240B		%vreg7<def> = COPY %V0; GPR32:%vreg7
256B		SW %vreg3, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
272B		%V0<def> = COPY %vreg7; GPR32:%vreg7
288B		RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Machine Instruction Scheduler:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
32B		%vreg0<def> = COPY %A0; GPR32:%vreg0
48B		%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
64B		%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
80B		%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
96B		%vreg5<def> = LW %vreg4, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
112B		SW %vreg5, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
160B		%A0<def> = COPY %vreg0; GPR32:%vreg0
176B		%GP<def> = COPY %vreg1; GPR32:%vreg1
192B		%T9<def> = COPY %vreg6; GPR32:%vreg6
208B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
224B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
240B		%vreg7<def> = COPY %V0; GPR32:%vreg7
256B		SW %vreg3, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
272B		%V0<def> = COPY %vreg7; GPR32:%vreg7
288B		RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Greedy Register Allocator:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0 in %vreg0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%vreg1<def> = ADDu %V0, %T9; GPR32:%vreg1
32B		%vreg0<def> = COPY %A0; GPR32:%vreg0
48B		%vreg2<def> = LW %vreg1, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg2,%vreg1
64B		%vreg3<def> = LW %vreg2, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
80B		%vreg4<def> = LW %vreg1, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg1
96B		%vreg5<def> = LW %vreg4, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)] GPR32:%vreg5,%vreg4
112B		SW %vreg5, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg5,%vreg2
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%vreg6<def> = LW %vreg1, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg1
160B		%A0<def> = COPY %vreg0; GPR32:%vreg0
176B		%GP<def> = COPY %vreg1; GPR32:%vreg1
192B		%T9<def> = COPY %vreg6; GPR32:%vreg6
208B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
224B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
240B		%vreg7<def> = COPY %V0; GPR32:%vreg7
256B		SW %vreg3, %vreg2, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)] GPR32:%vreg3,%vreg2
272B		%V0<def> = COPY %vreg7; GPR32:%vreg7
288B		RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Virtual Register Rewriter:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A0 %T9 %V0
16B		%GP<def> = ADDu %V0, %T9
48B		%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
64B		%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
80B		%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
96B		%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
112B		SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
128B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
144B		%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
208B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
224B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
256B		SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
288B		RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Stack Slot Coloring:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Machine Loop Invariant Code Motion:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Shrink Wrapping analysis:
# Machine code for function pushdecl_top_level: Post SSA
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function pushdecl_top_level: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Machine Copy Propagation Pass:
# Machine code for function pushdecl_top_level: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	RetRA %V0<imp-use>

# End machine code for function pushdecl_top_level.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function pushdecl_top_level: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	PseudoReturn %RA

# End machine code for function pushdecl_top_level.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function pushdecl_top_level: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	PseudoReturn %RA

# End machine code for function pushdecl_top_level.

# After Mips Delay Slot Filler:
# Machine code for function pushdecl_top_level: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * NOP
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function pushdecl_top_level.

# After Mips Long Branch:
# Machine code for function pushdecl_top_level: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * NOP
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function pushdecl_top_level.

# After Mips Constant Islands:
# Machine code for function pushdecl_top_level: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * NOP
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function pushdecl_top_level.

# After Contiguously Lay Out Funclets:
# Machine code for function pushdecl_top_level: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * NOP
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function pushdecl_top_level.

# After StackMap Liveness Analysis:
# Machine code for function pushdecl_top_level: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * NOP
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function pushdecl_top_level.

# After Live DEBUG_VALUE analysis:
# Machine code for function pushdecl_top_level: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A0, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A0 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@current_binding_level>[TF=1]; mem:LD4[GOT]
	%S1<def> = LW %S0, 0; mem:LD4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%AT<def> = LW %GP, <ga:@global_binding_level>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %AT<kill>, 0; mem:LD4[bitcast (%struct.binding_level.2606** @global_binding_level to i32*)]
	SW %AT<kill>, %S0, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%T9<def> = LW %GP, <ga:@pushdecl>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>
	  * NOP
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[bitcast (%struct.binding_level.2606** @current_binding_level to i32*)]
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function pushdecl_top_level.

