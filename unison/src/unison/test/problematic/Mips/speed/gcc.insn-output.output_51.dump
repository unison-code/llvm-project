# After Instruction Selection:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %vreg6<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg6
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %vreg9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg9
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Expand ISel Pseudo-instructions:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %vreg6<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg6
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	JALRPseudo %vreg9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg9
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Mips OptimizePICCall:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Tail Duplication:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Optimize machine instruction PHIs:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Merge disjoint stack slots:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Local Stack Slot Allocation:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Remove dead machine instructions:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Machine Loop Invariant Code Motion:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Machine Common Subexpression Elimination:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BEQ %vreg7, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#0 BB#1
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Machine code sinking:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BNE %vreg7, %vreg8, <BB#1>, %AT<imp-def>; GPR32:%vreg7,%vreg8
    Successors according to CFG: BB#3(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	B <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#1 BB#3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Peephole Optimizations:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BNE %vreg7, %vreg8, <BB#1>, %AT<imp-def>; GPR32:%vreg7,%vreg8
    Successors according to CFG: BB#3(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	B <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#1 BB#3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Remove dead machine instructions:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BNE %vreg7, %vreg8, <BB#1>, %AT<imp-def>; GPR32:%vreg7,%vreg8
    Successors according to CFG: BB#3(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	B <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#1 BB#3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Process Implicit Definitions:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
	%vreg3<def> = COPY %A1; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0; GPR32:%vreg7
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BNE %vreg7, %vreg8, <BB#1>, %AT<imp-def>; GPR32:%vreg7,%vreg8
    Successors according to CFG: BB#3(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#3: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	B <BB#2>, %AT<imp-def>
    Successors according to CFG: BB#2(?%)

BB#1: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %5
    Predecessors according to CFG: BB#1 BB#3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg0, <BB#1>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1; GPR32:%vreg1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Live Variable Analysis:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg4
	%vreg3<def> = COPY %A1<kill>; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0<kill>; GPR32:%vreg7
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BNE %vreg7<kill>, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = LW %vreg4<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3<kill>; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9<kill>; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0<kill>; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10<kill>, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4<kill>, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<kill,tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Predecessors according to CFG: BB#2 BB#1
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg0, <BB#2>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1<kill>; GPR32:%vreg1
	RetRA %V0<imp-use,kill>

# End machine code for function output_51.

# After Machine Natural Loop Construction:
# Machine code for function output_51: SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg4
	%vreg3<def> = COPY %A1<kill>; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0<kill>; GPR32:%vreg7
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BNE %vreg7<kill>, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = LW %vreg4<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3<kill>; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9<kill>; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0<kill>; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10<kill>, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4<kill>, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<kill,tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Predecessors according to CFG: BB#2 BB#1
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg0, <BB#2>; GPR32:%vreg1,%vreg5,%vreg0
	%V0<def> = COPY %vreg1<kill>; GPR32:%vreg1
	RetRA %V0<imp-use,kill>

# End machine code for function output_51.

# After Eliminate PHI nodes for register allocation:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg4
	%vreg3<def> = COPY %A1<kill>; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0<kill>; GPR32:%vreg7
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BNE %vreg7<kill>, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = LW %vreg4<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg17<def> = COPY %vreg5<kill>; GPR32:%vreg17,%vreg5
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3<kill>; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9<kill>; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0<kill>; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10<kill>, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4<kill>, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg12<kill,tied0>; GPR32:%vreg14,%vreg13,%vreg11,%vreg12
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
	%vreg17<def> = COPY %vreg0<kill>; GPR32:%vreg17,%vreg0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Predecessors according to CFG: BB#2 BB#1
	%vreg1<def> = COPY %vreg17<kill>; GPR32:%vreg1,%vreg17
	%V0<def> = COPY %vreg1<kill>; GPR32:%vreg1
	RetRA %V0<imp-use,kill>

# End machine code for function output_51.

# After Two-Address instruction pass:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%vreg4<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg4
	%vreg3<def> = COPY %A1<kill>; GPR32:%vreg3
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
	%A0<def> = COPY %vreg3; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg6<kill>; GPR32:%vreg6
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg7<def> = COPY %V0<kill>; GPR32:%vreg7
	%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
	BNE %vreg7<kill>, %vreg8<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg5<def> = LW %vreg4<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg5,%vreg4
	%vreg17<def> = COPY %vreg5<kill>; GPR32:%vreg17,%vreg5
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
	%A0<def> = COPY %vreg3<kill>; GPR32:%vreg3
	%GP<def> = COPY %vreg4; GPR32:%vreg4
	%T9<def> = COPY %vreg9<kill>; GPR32:%vreg9
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = COPY %V0<kill>; GPR32:%vreg10
	%vreg11<def> = XORi %vreg10<kill>, 4; GPR32:%vreg11,%vreg10
	%vreg12<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg12,%vreg4
	%vreg13<def> = ADDiu %vreg4<kill>, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
	%vreg14<def> = COPY %vreg12<kill>; GPR32:%vreg14,%vreg12
	%vreg14<def,tied3> = MOVZ_I_I %vreg13<kill>, %vreg11<kill>, %vreg14<tied0>; GPR32:%vreg14,%vreg13,%vreg11
	%vreg0<def> = LW %vreg14<kill>, 0; mem:LD4[<unknown>] GPR32:%vreg0,%vreg14
	%vreg17<def> = COPY %vreg0<kill>; GPR32:%vreg17,%vreg0
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Predecessors according to CFG: BB#2 BB#1
	%vreg1<def> = COPY %vreg17<kill>; GPR32:%vreg1,%vreg17
	%V0<def> = COPY %vreg1<kill>; GPR32:%vreg1
	RetRA %V0<imp-use,kill>

# End machine code for function output_51.

# After Simple Register Coalescing:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A1 %T9 %V0
16B		%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
32B		%vreg3<def> = COPY %A1; GPR32:%vreg3
48B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
64B		%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
80B		%A0<def> = COPY %vreg3; GPR32:%vreg3
96B		%GP<def> = COPY %vreg4; GPR32:%vreg4
112B		%T9<def> = COPY %vreg6; GPR32:%vreg6
128B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
160B		%vreg7<def> = COPY %V0; GPR32:%vreg7
176B		%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
192B		BNE %vreg7, %vreg8, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

208B	BB#1: 
	    Predecessors according to CFG: BB#0
224B		%vreg17<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg17,%vreg4
256B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(?%)

272B	BB#2: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
288B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
304B		%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
320B		%A0<def> = COPY %vreg3; GPR32:%vreg3
336B		%GP<def> = COPY %vreg4; GPR32:%vreg4
352B		%T9<def> = COPY %vreg9; GPR32:%vreg9
368B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
384B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
400B		%vreg10<def> = COPY %V0; GPR32:%vreg10
416B		%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
432B		%vreg14<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg14,%vreg4
448B		%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
480B		%vreg14<def,tied3> = MOVZ_I_I %vreg13, %vreg11, %vreg14<tied0>; GPR32:%vreg14,%vreg13,%vreg11
496B		%vreg17<def> = LW %vreg14, 0; mem:LD4[<unknown>] GPR32:%vreg17,%vreg14
	    Successors according to CFG: BB#3(?%)

528B	BB#3: derived from LLVM BB %5
	    Predecessors according to CFG: BB#2 BB#1
560B		%V0<def> = COPY %vreg17; GPR32:%vreg17
576B		RetRA %V0<imp-use>

# End machine code for function output_51.

# After Machine Instruction Scheduler:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A1 %T9 %V0
16B		%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
32B		%vreg3<def> = COPY %A1; GPR32:%vreg3
48B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
64B		%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
80B		%A0<def> = COPY %vreg3; GPR32:%vreg3
96B		%GP<def> = COPY %vreg4; GPR32:%vreg4
112B		%T9<def> = COPY %vreg6; GPR32:%vreg6
128B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
160B		%vreg7<def> = COPY %V0; GPR32:%vreg7
176B		%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
192B		BNE %vreg7, %vreg8, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

208B	BB#1: 
	    Predecessors according to CFG: BB#0
224B		%vreg17<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg17,%vreg4
256B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(?%)

272B	BB#2: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
288B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
304B		%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
320B		%A0<def> = COPY %vreg3; GPR32:%vreg3
336B		%GP<def> = COPY %vreg4; GPR32:%vreg4
352B		%T9<def> = COPY %vreg9; GPR32:%vreg9
368B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
384B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
400B		%vreg10<def> = COPY %V0; GPR32:%vreg10
416B		%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
432B		%vreg14<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg14,%vreg4
448B		%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
480B		%vreg14<def,tied3> = MOVZ_I_I %vreg13, %vreg11, %vreg14<tied0>; GPR32:%vreg14,%vreg13,%vreg11
496B		%vreg17<def> = LW %vreg14, 0; mem:LD4[<unknown>] GPR32:%vreg17,%vreg14
	    Successors according to CFG: BB#3(?%)

528B	BB#3: derived from LLVM BB %5
	    Predecessors according to CFG: BB#2 BB#1
560B		%V0<def> = COPY %vreg17; GPR32:%vreg17
576B		RetRA %V0<imp-use>

# End machine code for function output_51.

# After Greedy Register Allocator:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1 in %vreg3, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A1 %T9 %V0
16B		%vreg4<def> = ADDu %V0, %T9; GPR32:%vreg4
32B		%vreg3<def> = COPY %A1; GPR32:%vreg3
48B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
64B		%vreg6<def> = LW %vreg4, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg6,%vreg4
80B		%A0<def> = COPY %vreg3; GPR32:%vreg3
96B		%GP<def> = COPY %vreg4; GPR32:%vreg4
112B		%T9<def> = COPY %vreg6; GPR32:%vreg6
128B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
160B		%vreg7<def> = COPY %V0; GPR32:%vreg7
176B		%vreg8<def> = ADDiu %ZERO, 8; GPR32:%vreg8
192B		BNE %vreg7, %vreg8, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg7,%vreg8
	    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

208B	BB#1: 
	    Predecessors according to CFG: BB#0
224B		%vreg17<def> = LW %vreg4, <ga:@.str.2014>[TF=1]; mem:LD4[GOT] GPR32:%vreg17,%vreg4
256B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(?%)

272B	BB#2: derived from LLVM BB %2
	    Predecessors according to CFG: BB#0
288B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
304B		%vreg9<def> = LW %vreg4, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg9,%vreg4
320B		%A0<def> = COPY %vreg3; GPR32:%vreg3
336B		%GP<def> = COPY %vreg4; GPR32:%vreg4
352B		%T9<def> = COPY %vreg9; GPR32:%vreg9
368B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
384B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
400B		%vreg10<def> = COPY %V0; GPR32:%vreg10
416B		%vreg11<def> = XORi %vreg10, 4; GPR32:%vreg11,%vreg10
432B		%vreg14<def> = ADDiu %vreg4, <ga:@.str.75>[TF=1]; GPR32:%vreg14,%vreg4
448B		%vreg13<def> = ADDiu %vreg4, <ga:@.str.2015>[TF=1]; GPR32:%vreg13,%vreg4
480B		%vreg14<def,tied3> = MOVZ_I_I %vreg13, %vreg11, %vreg14<tied0>; GPR32:%vreg14,%vreg13,%vreg11
496B		%vreg17<def> = LW %vreg14, 0; mem:LD4[<unknown>] GPR32:%vreg17,%vreg14
	    Successors according to CFG: BB#3(?%)

528B	BB#3: derived from LLVM BB %5
	    Predecessors according to CFG: BB#2 BB#1
560B		%V0<def> = COPY %vreg17; GPR32:%vreg17
576B		RetRA %V0<imp-use>

# End machine code for function output_51.

# After Virtual Register Rewriter:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1, %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %A1 %T9 %V0
16B		%S0<def> = ADDu %V0, %T9
32B		%S1<def> = COPY %A1
48B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
64B		%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
80B		%A0<def> = COPY %S1
96B		%GP<def> = COPY %S0
128B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
144B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
176B		%AT<def> = ADDiu %ZERO, 8
192B		BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
	    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

208B	BB#1: 
	    Live Ins: %S0
	    Predecessors according to CFG: BB#0
224B		%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
256B		B <BB#3>, %AT<imp-def,dead>
	    Successors according to CFG: BB#3(?%)

272B	BB#2: derived from LLVM BB %2
	    Live Ins: %S0 %S1
	    Predecessors according to CFG: BB#0
288B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
304B		%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
320B		%A0<def> = COPY %S1<kill>
336B		%GP<def> = COPY %S0
368B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
384B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
416B		%AT<def> = XORi %V0<kill>, 4
432B		%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
448B		%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
480B		%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
496B		%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
	    Successors according to CFG: BB#3(?%)

528B	BB#3: derived from LLVM BB %5
	    Live Ins: %V0
	    Predecessors according to CFG: BB#2 BB#1
576B		RetRA %V0<imp-use>

# End machine code for function output_51.

# After Stack Slot Coloring:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Machine Loop Invariant Code Motion:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Shrink Wrapping analysis:
# Machine code for function output_51: Post SSA
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A1
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A1
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Machine Copy Propagation Pass:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = COPY %A1
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = COPY %S1<kill>
	%GP<def> = COPY %S0
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	RetRA %V0<imp-use>

# End machine code for function output_51.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A1, %ZERO
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1, %ZERO
	%GP<def> = OR %S0, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	%GP<def> = OR %S0, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	PseudoReturn %RA

# End machine code for function output_51.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function output_51: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A1, %ZERO
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1, %ZERO
	%GP<def> = OR %S0, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	%GP<def> = OR %S0, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	PseudoReturn %RA

# End machine code for function output_51.

# After Mips Delay Slot Filler:
# Machine code for function output_51: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A1, %ZERO
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function output_51.

# After Mips Long Branch:
# Machine code for function output_51: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A1, %ZERO
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function output_51.

# After Mips Constant Islands:
# Machine code for function output_51: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A1, %ZERO
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function output_51.

# After Contiguously Lay Out Funclets:
# Machine code for function output_51: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A1, %ZERO
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function output_51.

# After StackMap Liveness Analysis:
# Machine code for function output_51: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A1, %ZERO
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function output_51.

# After Live DEBUG_VALUE analysis:
# Machine code for function output_51: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %A1, %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %A1 %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%S0<def> = ADDu %V0, %T9
	%S1<def> = OR %A1, %ZERO
	%T9<def> = LW %S0, <ga:@get_attr_type>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = ADDiu %ZERO, 8
	BNE %V0<kill>, %AT<kill>, <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(0x40000000 / 0x80000000 = 50.00%) BB#2(0x40000000 / 0x80000000 = 50.00%)

BB#1: 
    Live Ins: %S0
    Predecessors according to CFG: BB#0
	%V0<def> = LW %S0<kill>, <ga:@.str.2014>[TF=1]; mem:LD4[GOT]
	B <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#3(?%)

BB#2: derived from LLVM BB %2
    Live Ins: %S0 %S1
    Predecessors according to CFG: BB#0
	%T9<def> = LW %S0, <ga:@get_attr_mode>[TF=3]; mem:LD4[GlobalValueCallEntry]
	%A0<def> = OR %S1<kill>, %ZERO
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def>
	  * %GP<def> = OR %S0, %ZERO
	%AT<def> = XORi %V0<kill>, 4
	%V0<def> = ADDiu %S0, <ga:@.str.75>[TF=1]
	%V1<def> = ADDiu %S0<kill>, <ga:@.str.2015>[TF=1]
	%V0<def,tied3> = MOVZ_I_I %V1<kill>, %AT<kill>, %V0<kill,tied0>
	%V0<def> = LW %V0<kill>, 0; mem:LD4[<unknown>]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %5
    Live Ins: %V0
    Predecessors according to CFG: BB#2 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function output_51.

