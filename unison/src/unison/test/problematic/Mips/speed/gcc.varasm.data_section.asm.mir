--- |
  ; ModuleID = 'gcc.varasm.data_section.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips--linux-gnu"
  
  %struct._IO_FILE.171 = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker.172*, %struct._IO_FILE.171*, i32, i32, i32, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i32, i32, [40 x i8] }
  %struct._IO_marker.172 = type { %struct._IO_marker.172*, %struct._IO_FILE.171*, i32 }
  
  @in_section = external hidden unnamed_addr global i32, align 4
  @asm_out_file = external global %struct._IO_FILE.171*, align 4
  @.str = external hidden unnamed_addr constant [4 x i8], align 1
  @.str.3 = external hidden unnamed_addr constant [7 x i8], align 1
  
  ; Function Attrs: nounwind
  declare i32 @fprintf(%struct._IO_FILE.171* nocapture, i8* nocapture readonly, ...) #0
  
  ; Function Attrs: nounwind
  define void @data_section() #0 {
    %1 = load i32, i32* @in_section, align 4
    %2 = icmp eq i32 %1, 2
    br i1 %2, label %6, label %3
  
  ; <label>:3                                       ; preds = %0
    %4 = load %struct._IO_FILE.171*, %struct._IO_FILE.171** @asm_out_file, align 4
    %5 = tail call i32 (%struct._IO_FILE.171*, i8*, ...) @fprintf(%struct._IO_FILE.171* %4, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
    store i32 2, i32* @in_section, align 4
    br label %6
  
  ; <label>:6                                       ; preds = %3, %0
    ret void
  }
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32r2" "unsafe-fp-math"="false" "use-soft-float"="false" }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0 (http://llvm.org/git/clang.git 2d49f0a0ae8366964a93e3b7b26e29679bee7160) (http://llvm.org/git/llvm.git 60bc66b44837125843b58ed3e0fd2e6bb948d839)"}

...
---
name:            data_section
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           false
tracksRegLiveness: false
tracksSubRegLiveness: false
liveins:         
  - { reg: '%t9' }
  - { reg: '%v0' }
calleeSavedRegisters: [ '%fp', '%ra', '%d10', '%d11', '%d12', '%d13', '%d14', 
                        '%d15', '%f20', '%f21', '%f22', '%f23', '%f24', 
                        '%f25', '%f26', '%f27', '%f28', '%f29', '%f30', 
                        '%f31', '%s0', '%s1', '%s2', '%s3', '%s4', '%s5', 
                        '%s6', '%s7' ]
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       32
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, type: spill-slot, offset: -4, size: 4, alignment: 4, callee-saved-register: '%ra' }
  - { id: 1, type: spill-slot, offset: -8, size: 4, alignment: 4, callee-saved-register: '%s1' }
  - { id: 2, type: spill-slot, offset: -12, size: 4, alignment: 4, callee-saved-register: '%s0' }
body:             |
  bb.0 (%ir-block.0, freq 16):
    successors: %bb.1(50), %bb.3(50)
    liveins: %t9, %ra, %s1, %s0
  
    %v0 = LUi target-flags(<unknown>) $_gp_disp
    %v0 = ADDiu %v0, target-flags(<unknown>) $_gp_disp
    %sp = ADDiu %sp, -32
    CFI_INSTRUCTION .cfi_def_cfa_offset 32
    SW killed %ra, %sp, 28 :: (store 4 into %stack.0)
    SW killed %s1, %sp, 24 :: (store 4 into %stack.1)
    SW killed %s0, %sp, 20 :: (store 4 into %stack.2)
    CFI_INSTRUCTION .cfi_offset %ra_64, -4
    CFI_INSTRUCTION .cfi_offset %s1_64, -8
    CFI_INSTRUCTION .cfi_offset %s0_64, -12
    %gp = ADDu %v0, %t9
    %s0 = LW %gp, target-flags(<unknown>) @in_section :: (load 4 from got)
    %at = LW %s0, 0 :: (load 4 from @in_section)
    %s1 = ADDiu %zero, 2
    BEQ killed %at, %s1, %bb.3, implicit-def dead %at {
      NOP
    }
  
  bb.1 (%ir-block.0, freq 8):
    successors: %bb.2(100)
  
    B %bb.2, implicit-def dead %at {
      NOP
    }
  
  bb.2 (%ir-block.3, freq 8):
    successors: %bb.3(100)
    liveins: %gp, %s0, %s1
  
    %at = LW %gp, target-flags(<unknown>) @asm_out_file :: (load 4 from got)
    %a1 = LW %gp, target-flags(<unknown>) @.str :: (load 4 from got)
    %a2 = LW %gp, target-flags(<unknown>) @.str.3 :: (load 4 from got)
    %t9 = LW %gp, target-flags(<unknown>) @fprintf :: (load 4 from call-entry @fprintf)
    JALRPseudo %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %a2, implicit %gp, implicit-def %sp, implicit-def dead %v0 {
      %a0 = LW killed %at, 0 :: (load 4 from @asm_out_file)
    }
    SW killed %s1, killed %s0, 0 :: (store 4 into @in_section)
  
  bb.3 (%ir-block.6, freq 16):
    liveouts:
  
    %s0 = LW %sp, 20 :: (load 4 from %stack.2)
    %s1 = LW %sp, 24 :: (load 4 from %stack.1)
    %ra = LW %sp, 28 :: (load 4 from %stack.0)
    PseudoReturn %ra {
      %sp = ADDiu %sp, 32
    }

...
