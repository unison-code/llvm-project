# After Instruction Selection:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %vreg8<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg8
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = COPY %V0; GPR32:%vreg9
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Expand ISel Pseudo-instructions:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	JALRPseudo %vreg8<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...; GPR32:%vreg8
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = COPY %V0; GPR32:%vreg9
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Mips OptimizePICCall:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = COPY %V0; GPR32:%vreg9
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Tail Duplication:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = COPY %V0; GPR32:%vreg9
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Optimize machine instruction PHIs:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = COPY %V0; GPR32:%vreg9
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Merge disjoint stack slots:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = COPY %V0; GPR32:%vreg9
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Local Stack Slot Allocation:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg9<def> = COPY %V0; GPR32:%vreg9
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Remove dead machine instructions:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Machine Loop Invariant Code Motion:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1<kill>, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3<kill>, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	%vreg10<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg10,%vreg0
	%vreg11<def> = ADDiu %ZERO, 2; GPR32:%vreg11
	SW %vreg11<kill>, %vreg10<kill>, 0; mem:ST4[@in_section] GPR32:%vreg11,%vreg10
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Machine Common Subexpression Elimination:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3, %vreg1, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Machine code sinking:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3, %vreg1, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Peephole Optimizations:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3, %vreg1, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Remove dead machine instructions:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3, %vreg1, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Process Implicit Definitions:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5; GPR32:%vreg5
	%A1<def> = COPY %vreg6; GPR32:%vreg6
	%A2<def> = COPY %vreg7; GPR32:%vreg7
	%GP<def> = COPY %vreg0; GPR32:%vreg0
	%T9<def> = COPY %vreg8; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3, %vreg1, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Live Variable Analysis:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5<kill>; GPR32:%vreg5
	%A1<def> = COPY %vreg6<kill>; GPR32:%vreg6
	%A2<def> = COPY %vreg7<kill>; GPR32:%vreg7
	%GP<def> = COPY %vreg0<kill>; GPR32:%vreg0
	%T9<def> = COPY %vreg8<kill>; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def,dead>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3<kill>, %vreg1<kill>, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Machine Natural Loop Construction:
# Machine code for function data_section: SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5<kill>; GPR32:%vreg5
	%A1<def> = COPY %vreg6<kill>; GPR32:%vreg6
	%A2<def> = COPY %vreg7<kill>; GPR32:%vreg7
	%GP<def> = COPY %vreg0<kill>; GPR32:%vreg0
	%T9<def> = COPY %vreg8<kill>; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def,dead>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3<kill>, %vreg1<kill>, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Eliminate PHI nodes for register allocation:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5<kill>; GPR32:%vreg5
	%A1<def> = COPY %vreg6<kill>; GPR32:%vreg6
	%A2<def> = COPY %vreg7<kill>; GPR32:%vreg7
	%GP<def> = COPY %vreg0<kill>; GPR32:%vreg0
	%T9<def> = COPY %vreg8<kill>; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def,dead>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3<kill>, %vreg1<kill>, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Two-Address instruction pass:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%vreg0<def> = ADDu %V0<kill>, %T9<kill>; GPR32:%vreg0
	%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
	%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
	%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
	BEQ %vreg2<kill>, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Predecessors according to CFG: BB#0
	%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
	%vreg5<def> = LW %vreg4<kill>, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
	%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
	%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
	%A0<def> = COPY %vreg5<kill>; GPR32:%vreg5
	%A1<def> = COPY %vreg6<kill>; GPR32:%vreg6
	%A2<def> = COPY %vreg7<kill>; GPR32:%vreg7
	%GP<def> = COPY %vreg0<kill>; GPR32:%vreg0
	%T9<def> = COPY %vreg8<kill>; GPR32:%vreg8
	JALRPseudo %T9<kill>, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def,dead>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %vreg3<kill>, %vreg1<kill>, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Simple Register Coalescing:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
32B		%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
48B		%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
64B		%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
80B		BEQ %vreg2, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

112B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
128B		%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
144B		%vreg5<def> = LW %vreg4, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
160B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
176B		%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
192B		%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
208B		%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
224B		%A0<def> = COPY %vreg5; GPR32:%vreg5
240B		%A1<def> = COPY %vreg6; GPR32:%vreg6
256B		%A2<def> = COPY %vreg7; GPR32:%vreg7
272B		%GP<def> = COPY %vreg0; GPR32:%vreg0
288B		%T9<def> = COPY %vreg8; GPR32:%vreg8
304B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def,dead>, ...
320B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
336B		SW %vreg3, %vreg1, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
	    Successors according to CFG: BB#2(?%)

352B	BB#2: derived from LLVM BB %6
	    Predecessors according to CFG: BB#0 BB#1
368B		RetRA

# End machine code for function data_section.

# After Machine Instruction Scheduler:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
32B		%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
48B		%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
64B		%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
80B		BEQ %vreg2, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

112B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
128B		%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
144B		%vreg5<def> = LW %vreg4, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
160B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
176B		%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
192B		%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
208B		%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
224B		%A0<def> = COPY %vreg5; GPR32:%vreg5
240B		%A1<def> = COPY %vreg6; GPR32:%vreg6
256B		%A2<def> = COPY %vreg7; GPR32:%vreg7
272B		%GP<def> = COPY %vreg0; GPR32:%vreg0
288B		%T9<def> = COPY %vreg8; GPR32:%vreg8
304B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use,kill>, %A1<imp-use,kill>, %A2<imp-use,kill>, %GP<imp-use,kill>, %SP<imp-def>, %V0<imp-def,dead>, ...
320B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
336B		SW %vreg3, %vreg1, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
	    Successors according to CFG: BB#2(?%)

352B	BB#2: derived from LLVM BB %6
	    Predecessors according to CFG: BB#0 BB#1
368B		RetRA

# End machine code for function data_section.

# After Greedy Register Allocator:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %T9 %V0
16B		%vreg0<def> = ADDu %V0, %T9; GPR32:%vreg0
32B		%vreg1<def> = LW %vreg0, <ga:@in_section>[TF=1]; mem:LD4[GOT] GPR32:%vreg1,%vreg0
48B		%vreg2<def> = LW %vreg1, 0; mem:LD4[@in_section] GPR32:%vreg2,%vreg1
64B		%vreg3<def> = ADDiu %ZERO, 2; GPR32:%vreg3
80B		BEQ %vreg2, %vreg3, <BB#2>, %AT<imp-def,dead>; GPR32:%vreg2,%vreg3
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

112B	BB#1: derived from LLVM BB %3
	    Predecessors according to CFG: BB#0
128B		%vreg4<def> = LW %vreg0, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT] GPR32:%vreg4,%vreg0
144B		%vreg5<def> = LW %vreg4, 0; mem:LD4[@asm_out_file] GPR32:%vreg5,%vreg4
160B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
176B		%vreg6<def> = LW %vreg0, <ga:@.str>[TF=1]; mem:LD4[GOT] GPR32:%vreg6,%vreg0
192B		%vreg7<def> = LW %vreg0, <ga:@.str.3>[TF=1]; mem:LD4[GOT] GPR32:%vreg7,%vreg0
208B		%vreg8<def> = LW %vreg0, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry] GPR32:%vreg8,%vreg0
224B		%A0<def> = COPY %vreg5; GPR32:%vreg5
240B		%A1<def> = COPY %vreg6; GPR32:%vreg6
256B		%A2<def> = COPY %vreg7; GPR32:%vreg7
272B		%GP<def> = COPY %vreg0; GPR32:%vreg0
288B		%T9<def> = COPY %vreg8; GPR32:%vreg8
304B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>, ...
320B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
336B		SW %vreg3, %vreg1, 0; mem:ST4[@in_section] GPR32:%vreg3,%vreg1
	    Successors according to CFG: BB#2(?%)

352B	BB#2: derived from LLVM BB %6
	    Predecessors according to CFG: BB#0 BB#1
368B		RetRA

# End machine code for function data_section.

# After Virtual Register Rewriter:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

0B	BB#0: derived from LLVM BB %0
	    Live Ins: %T9 %V0
16B		%GP<def> = ADDu %V0, %T9
32B		%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
48B		%AT<def> = LW %S0, 0; mem:LD4[@in_section]
64B		%S1<def> = ADDiu %ZERO, 2
80B		BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
96B		B <BB#1>, %AT<imp-def,dead>
	    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

112B	BB#1: derived from LLVM BB %3
	    Live Ins: %GP %S0 %S1
	    Predecessors according to CFG: BB#0
128B		%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
144B		%A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
160B		ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
176B		%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
192B		%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
208B		%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
304B		JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>, ...
320B		ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
336B		SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
	    Successors according to CFG: BB#2(?%)

352B	BB#2: derived from LLVM BB %6
	    Predecessors according to CFG: BB#0 BB#1
368B		RetRA

# End machine code for function data_section.

# After Stack Slot Coloring:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#0
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Machine Loop Invariant Code Motion:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#0
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Shrink Wrapping analysis:
# Machine code for function data_section: Post SSA
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#0
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	ADJCALLSTACKDOWN 16, %SP<imp-def,dead>, %SP<imp-use>
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>, ...
	ADJCALLSTACKUP 16, 0, %SP<imp-def,dead>, %SP<imp-use>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	RetRA

# End machine code for function data_section.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#0
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	RetRA

# End machine code for function data_section.

# After Machine Copy Propagation Pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#0
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	RetRA

# End machine code for function data_section.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#0
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	PseudoReturn %RA

# End machine code for function data_section.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function data_section: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
	B <BB#1>, %AT<imp-def,dead>
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#0
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	%SP<def> = ADDiu %SP, 32
	PseudoReturn %RA

# End machine code for function data_section.

# After Mips Delay Slot Filler:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %V0 %RA %S1 %S0
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#2>, %AT<imp-def,dead>
	  * NOP
	B <BB#1>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x40000000 / 0x80000000 = 50.00%) BB#1(0x40000000 / 0x80000000 = 50.00%)

BB#1: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#0
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	  * %A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#1
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function data_section.

# After Mips Long Branch:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#1
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	  * %A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %6
    Predecessors according to CFG: BB#2 BB#0
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function data_section.

# After Mips Constant Islands:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#1
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	  * %A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %6
    Predecessors according to CFG: BB#2 BB#0
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function data_section.

# After Contiguously Lay Out Funclets:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#1
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	  * %A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %6
    Predecessors according to CFG: BB#2 BB#0
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function data_section.

# After StackMap Liveness Analysis:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#1
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	  * %A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %6
    Predecessors according to CFG: BB#2 BB#0
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function data_section.

# After Live DEBUG_VALUE analysis:
# Machine code for function data_section: Post SSA, not tracking liveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
  fi#1: size=4, align=4, at location [SP-8]
  fi#2: size=4, align=4, at location [SP-12]
Function Live Ins: %T9, %V0

BB#0: derived from LLVM BB %0
    Live Ins: %T9 %RA %S1 %S0
	%V0<def> = LUi <es:_gp_disp>[TF=5]
	%V0<def> = ADDiu %V0, <es:_gp_disp>[TF=6]
	%SP<def> = ADDiu %SP, -32
	CFI_INSTRUCTION <call frame instruction>
	SW %RA<kill>, %SP, 28; mem:ST4[FixedStack0]
	SW %S1<kill>, %SP, 24; mem:ST4[FixedStack1]
	SW %S0<kill>, %SP, 20; mem:ST4[FixedStack2]
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	CFI_INSTRUCTION <call frame instruction>
	%GP<def> = ADDu %V0, %T9
	%S0<def> = LW %GP, <ga:@in_section>[TF=1]; mem:LD4[GOT]
	%AT<def> = LW %S0, 0; mem:LD4[@in_section]
	%S1<def> = ADDiu %ZERO, 2
	BEQ %AT<kill>, %S1, <BB#3>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#1(?%) BB#3(?%)

BB#1: derived from LLVM BB %0
    Predecessors according to CFG: BB#0
	B <BB#2>, %AT<imp-def,dead>
	  * NOP
    Successors according to CFG: BB#2(0x80000000 / 0x80000000 = 100.00%)

BB#2: derived from LLVM BB %3
    Live Ins: %GP %S0 %S1
    Predecessors according to CFG: BB#1
	%AT<def> = LW %GP, <ga:@asm_out_file>[TF=1]; mem:LD4[GOT]
	%A1<def> = LW %GP, <ga:@.str>[TF=1]; mem:LD4[GOT]
	%A2<def> = LW %GP, <ga:@.str.3>[TF=1]; mem:LD4[GOT]
	%T9<def> = LW %GP, <ga:@fprintf>[TF=3]; mem:LD4[GlobalValueCallEntry]
	JALRPseudo %T9, <regmask %FP %RA %D10 %D11 %D12 %D13 %D14 %D15 %F20 %F21 %F22 %F23 %F24 %F25 %F26 %F27 %F28 %F29 %F30 %F31 %S0 %S1 %S2 %S3 %S4 %S5 %S6 %S7>, %RA<imp-def,dead>, %A0<imp-use>, %A1<imp-use>, %A2<imp-use>, %GP<imp-use>, %SP<imp-def>, %V0<imp-def,dead>
	  * %A0<def> = LW %AT<kill>, 0; mem:LD4[@asm_out_file]
	SW %S1<kill>, %S0<kill>, 0; mem:ST4[@in_section]
    Successors according to CFG: BB#3(?%)

BB#3: derived from LLVM BB %6
    Predecessors according to CFG: BB#2 BB#0
	%S0<def> = LW %SP, 20; mem:LD4[FixedStack2]
	%S1<def> = LW %SP, 24; mem:LD4[FixedStack1]
	%RA<def> = LW %SP, 28; mem:LD4[FixedStack0]
	PseudoReturn %RA
	  * %SP<def> = ADDiu %SP, 32

# End machine code for function data_section.

