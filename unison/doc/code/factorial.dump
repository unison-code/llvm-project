# After Instruction Selection:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg7
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Expand ISel Pseudo-instructions:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg7
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Tail Duplication:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg7
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Optimize machine instruction PHIs:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg7
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Merge disjoint stack slots:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg7
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Local Stack Slot Allocation:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg7
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Remove dead machine instructions:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg7
	J2_jump <BB#1>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#0 BB#1
	%vreg0<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#0>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Machine Loop Invariant Code Motion:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7, <BB#2>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#3(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg6, <BB#3>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Machine Common Subexpression Elimination:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7, <BB#2>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#3(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg6, <BB#3>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Machine code sinking:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7, <BB#2>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#3(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg6, <BB#3>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Peephole Optimizations:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7, <BB#2>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#3(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg6, <BB#3>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Remove dead machine instructions:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7, <BB#2>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#3(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg6, <BB#3>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Hexagon Store Widening:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7, <BB#2>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#3(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg6, <BB#3>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Process Implicit Definitions:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7, <BB#2>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#3(0x50000000 / 0x80000000 = 62.50%) BB#2(0x30000000 / 0x80000000 = 37.50%)

BB#3: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#1(?%)

BB#1: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#1 BB#3
	%vreg0<def> = PHI %vreg6, <BB#3>, %vreg3, <BB#1>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#3>, %vreg2, <BB#1>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#1>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#2>, %PC<imp-def,dead>
    Successors according to CFG: BB#1(0x7c000000 / 0x80000000 = 96.88%) BB#2(0x04000000 / 0x80000000 = 3.12%)

BB#2: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#1
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#1>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Live Variable Analysis:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#3>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg6, <BB#1>, %vreg3, <BB#2>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg2, <BB#2>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0<kill>; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1<kill>, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#2>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4<kill>; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Machine Natural Loop Construction:
# Machine code for function factorial: SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	J2_jumpf %vreg7<kill>, <BB#3>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg0<def> = PHI %vreg6, <BB#1>, %vreg3, <BB#2>; IntRegs:%vreg0,%vreg6,%vreg3
	%vreg1<def> = PHI %vreg5, <BB#1>, %vreg2, <BB#2>; IntRegs:%vreg1,%vreg5,%vreg2
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0<kill>; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1<kill>, 1; PredRegs:%vreg8 IntRegs:%vreg1
	J2_jumpt %vreg8<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg4<def> = PHI %vreg6, <BB#0>, %vreg3, <BB#2>; IntRegs:%vreg4,%vreg6,%vreg3
	%R0<def> = COPY %vreg4<kill>; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Eliminate PHI nodes for register allocation:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	%vreg11<def> = COPY %vreg6; IntRegs:%vreg11,%vreg6
	J2_jumpf %vreg7<kill>, <BB#3>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg9<def> = COPY %vreg6<kill>; IntRegs:%vreg9,%vreg6
	%vreg10<def> = COPY %vreg5<kill>; IntRegs:%vreg10,%vreg5
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg1<def> = COPY %vreg10<kill>; IntRegs:%vreg1,%vreg10
	%vreg0<def> = COPY %vreg9<kill>; IntRegs:%vreg0,%vreg9
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0<kill>; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1<kill>, 1; PredRegs:%vreg8 IntRegs:%vreg1
	%vreg9<def> = COPY %vreg3; IntRegs:%vreg9,%vreg3
	%vreg10<def> = COPY %vreg2<kill>; IntRegs:%vreg10,%vreg2
	%vreg11<def> = COPY %vreg3<kill>; IntRegs:%vreg11,%vreg3
	J2_jumpt %vreg8<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg4<def> = COPY %vreg11<kill>; IntRegs:%vreg4,%vreg11
	%R0<def> = COPY %vreg4<kill>; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Two-Address instruction pass:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0 in %vreg5

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%vreg5<def> = COPY %R0<kill>; IntRegs:%vreg5
	%vreg6<def> = A2_tfrsi 1; IntRegs:%vreg6
	%vreg7<def> = C2_cmpgti %vreg5, 0; PredRegs:%vreg7 IntRegs:%vreg5
	%vreg11<def> = COPY %vreg6; IntRegs:%vreg11,%vreg6
	J2_jumpf %vreg7<kill>, <BB#3>, %PC<imp-def>; PredRegs:%vreg7
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Predecessors according to CFG: BB#0
	%vreg9<def> = COPY %vreg6<kill>; IntRegs:%vreg9,%vreg6
	%vreg10<def> = COPY %vreg5<kill>; IntRegs:%vreg10,%vreg5
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Predecessors according to CFG: BB#2 BB#1
	%vreg1<def> = COPY %vreg10<kill>; IntRegs:%vreg1,%vreg10
	%vreg0<def> = COPY %vreg9<kill>; IntRegs:%vreg0,%vreg9
	%vreg2<def> = A2_addi %vreg1, -1; IntRegs:%vreg2,%vreg1
	%vreg3<def> = M2_mpyi %vreg1, %vreg0<kill>; IntRegs:%vreg3,%vreg1,%vreg0
	%vreg8<def> = C2_cmpgti %vreg1<kill>, 1; PredRegs:%vreg8 IntRegs:%vreg1
	%vreg9<def> = COPY %vreg3; IntRegs:%vreg9,%vreg3
	%vreg10<def> = COPY %vreg2<kill>; IntRegs:%vreg10,%vreg2
	%vreg11<def> = COPY %vreg3<kill>; IntRegs:%vreg11,%vreg3
	J2_jumpt %vreg8<kill>, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg8
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Predecessors according to CFG: BB#0 BB#2
	%vreg4<def> = COPY %vreg11<kill>; IntRegs:%vreg4,%vreg11
	%R0<def> = COPY %vreg4<kill>; IntRegs:%vreg4
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Simple Register Coalescing:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0
16B		%vreg10<def> = COPY %R0; IntRegs:%vreg10
32B		%vreg11<def> = A2_tfrsi 1; IntRegs:%vreg11
48B		%vreg7<def> = C2_cmpgti %vreg10, 0; PredRegs:%vreg7 IntRegs:%vreg10
80B		J2_jumpf %vreg7, <BB#3>, %PC<imp-def>; PredRegs:%vreg7
	    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

96B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

144B	BB#2: derived from LLVM BB %while.body
	    Predecessors according to CFG: BB#2 BB#1
192B		%vreg2<def> = A2_addi %vreg10, -1; IntRegs:%vreg2,%vreg10
208B		%vreg11<def> = M2_mpyi %vreg10, %vreg11; IntRegs:%vreg11,%vreg10
224B		%vreg8<def> = C2_cmpgti %vreg10, 1; PredRegs:%vreg8 IntRegs:%vreg10
256B		%vreg10<def> = COPY %vreg2; IntRegs:%vreg10,%vreg2
288B		J2_jumpt %vreg8, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg8
304B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

320B	BB#3: derived from LLVM BB %while.end
	    Predecessors according to CFG: BB#0 BB#2
352B		%R0<def> = COPY %vreg11; IntRegs:%vreg11
368B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Hexagon Expand Condsets:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0
16B		%vreg10<def> = COPY %R0; IntRegs:%vreg10
32B		%vreg11<def> = A2_tfrsi 1; IntRegs:%vreg11
48B		%vreg7<def> = C2_cmpgti %vreg10, 0; PredRegs:%vreg7 IntRegs:%vreg10
80B		J2_jumpf %vreg7, <BB#3>, %PC<imp-def>; PredRegs:%vreg7
	    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

96B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

144B	BB#2: derived from LLVM BB %while.body
	    Predecessors according to CFG: BB#2 BB#1
192B		%vreg2<def> = A2_addi %vreg10, -1; IntRegs:%vreg2,%vreg10
208B		%vreg11<def> = M2_mpyi %vreg10, %vreg11; IntRegs:%vreg11,%vreg10
224B		%vreg8<def> = C2_cmpgti %vreg10, 1; PredRegs:%vreg8 IntRegs:%vreg10
256B		%vreg10<def> = COPY %vreg2; IntRegs:%vreg10,%vreg2
288B		J2_jumpt %vreg8, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg8
304B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

320B	BB#3: derived from LLVM BB %while.end
	    Predecessors according to CFG: BB#0 BB#2
352B		%R0<def> = COPY %vreg11; IntRegs:%vreg11
368B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Machine Instruction Scheduler:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0
16B		%vreg10<def> = COPY %R0; IntRegs:%vreg10
32B		%vreg11<def> = A2_tfrsi 1; IntRegs:%vreg11
48B		%vreg7<def> = C2_cmpgti %vreg10, 0; PredRegs:%vreg7 IntRegs:%vreg10
80B		J2_jumpf %vreg7, <BB#3>, %PC<imp-def>; PredRegs:%vreg7
	    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

96B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

144B	BB#2: derived from LLVM BB %while.body
	    Predecessors according to CFG: BB#2 BB#1
192B		%vreg2<def> = A2_addi %vreg10, -1; IntRegs:%vreg2,%vreg10
208B		%vreg11<def> = M2_mpyi %vreg10, %vreg11; IntRegs:%vreg11,%vreg10
224B		%vreg8<def> = C2_cmpgti %vreg10, 1; PredRegs:%vreg8 IntRegs:%vreg10
256B		%vreg10<def> = COPY %vreg2; IntRegs:%vreg10,%vreg2
288B		J2_jumpt %vreg8, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg8
304B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

320B	BB#3: derived from LLVM BB %while.end
	    Predecessors according to CFG: BB#0 BB#2
352B		%R0<def> = COPY %vreg11; IntRegs:%vreg11
368B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Greedy Register Allocator:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0 in %vreg5

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0
16B		%vreg10<def> = COPY %R0; IntRegs:%vreg10
32B		%vreg11<def> = A2_tfrsi 1; IntRegs:%vreg11
48B		%vreg7<def> = C2_cmpgti %vreg10, 0; PredRegs:%vreg7 IntRegs:%vreg10
80B		J2_jumpf %vreg7, <BB#3>, %PC<imp-def>; PredRegs:%vreg7
	    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

96B	BB#1: 
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

144B	BB#2: derived from LLVM BB %while.body
	    Predecessors according to CFG: BB#2 BB#1
192B		%vreg2<def> = A2_addi %vreg10, -1; IntRegs:%vreg2,%vreg10
208B		%vreg11<def> = M2_mpyi %vreg10, %vreg11; IntRegs:%vreg11,%vreg10
224B		%vreg8<def> = C2_cmpgti %vreg10, 1; PredRegs:%vreg8 IntRegs:%vreg10
256B		%vreg10<def> = COPY %vreg2; IntRegs:%vreg10,%vreg2
288B		J2_jumpt %vreg8, <BB#2>, %PC<imp-def,dead>; PredRegs:%vreg8
304B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

320B	BB#3: derived from LLVM BB %while.end
	    Predecessors according to CFG: BB#0 BB#2
352B		%R0<def> = COPY %vreg11; IntRegs:%vreg11
368B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Virtual Register Rewriter:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %R0
16B		%R1<def> = COPY %R0
32B		%R0<def> = A2_tfrsi 1
48B		%P0<def> = C2_cmpgti %R1, 0
80B		J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
	    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

96B	BB#1: 
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#0
	    Successors according to CFG: BB#2(?%)

144B	BB#2: derived from LLVM BB %while.body
	    Live Ins: %R0 %R1
	    Predecessors according to CFG: BB#2 BB#1
192B		%R2<def> = A2_addi %R1, -1
208B		%R0<def> = M2_mpyi %R1, %R0<kill>
224B		%P0<def> = C2_cmpgti %R1<kill>, 1
256B		%R1<def> = COPY %R2<kill>
288B		J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
304B		J2_jump <BB#3>, %PC<imp-def,dead>
	    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

320B	BB#3: derived from LLVM BB %while.end
	    Live Ins: %R0
	    Predecessors according to CFG: BB#0 BB#2
368B		JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Stack Slot Coloring:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = COPY %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = COPY %R2<kill>
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Machine Loop Invariant Code Motion:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = COPY %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = COPY %R2<kill>
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31, %PC<imp-def,dead>, %R0<imp-use>

# End machine code for function factorial.

# After Hexagon RDF optimizations:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = COPY %R0<kill>
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = COPY %R2<kill>
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Shrink Wrapping analysis:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = COPY %R0<kill>
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = COPY %R2<kill>
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Prologue/Epilogue Insertion & Frame Finalization:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = COPY %R0<kill>
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = COPY %R2<kill>
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Machine Copy Propagation Pass:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = COPY %R0<kill>
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = COPY %R2<kill>
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Post-RA pseudo instruction expansion pass:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = A2_tfr %R2
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Hexagon Copy-To-Combine Pass:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = A2_tfr %R2
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Hexagon Split Const32s and Const64s:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = A2_tfr %R2
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Analyze Machine Code For Garbage Collection:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = A2_tfr %R2
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Hexagon NewValueJump:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = A2_tfr %R2
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Hexagon Expand Predicate Spill Code:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = A2_tfr %R2
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Hexagon generate mux instructions:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	%R1<def> = A2_tfr %R0
	%R0<def> = A2_tfrsi 1
	%P0<def> = C2_cmpgti %R1, 0
	J2_jumpf %P0<kill>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	%R2<def> = A2_addi %R1, -1
	%R0<def> = M2_mpyi %R1, %R0<kill>
	%P0<def> = C2_cmpgti %R1<kill>, 1
	%R1<def> = A2_tfr %R2
	J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Hexagon Packetizer:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi 1
	BUNDLE %P0<imp-def,dead>, %PC<imp-def>, %R1<imp-use>
	  * %P0<def> = C2_cmpgti %R1, 0
	  * J2_jumpfnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R2<imp-def>, %R0<imp-def>, %P0<imp-def>, %R1<imp-use,kill>, %R0<imp-use,kill>
	  * %R2<def> = A2_addi %R1, -1
	  * %R0<def> = M2_mpyi %R1, %R0<kill>
	  * %P0<def> = C2_cmpgti %R1<kill>, 1
	BUNDLE %R1<imp-def>, %PC<imp-def,dead>, %R2<imp-use>, %P0<imp-use,kill>
	  * %R1<def> = A2_tfr %R2
	  * J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Hexagon call frame information:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi 1
	BUNDLE %P0<imp-def,dead>, %PC<imp-def>, %R1<imp-use>
	  * %P0<def> = C2_cmpgti %R1, 0
	  * J2_jumpfnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R2<imp-def>, %R0<imp-def>, %P0<imp-def>, %R1<imp-use,kill>, %R0<imp-use,kill>
	  * %R2<def> = A2_addi %R1, -1
	  * %R0<def> = M2_mpyi %R1, %R0<kill>
	  * %P0<def> = C2_cmpgti %R1<kill>, 1
	BUNDLE %R1<imp-def>, %PC<imp-def,dead>, %R2<imp-use>, %P0<imp-use,kill>
	  * %R1<def> = A2_tfr %R2
	  * J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Contiguously Lay Out Funclets:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi 1
	BUNDLE %P0<imp-def,dead>, %PC<imp-def>, %R1<imp-use>
	  * %P0<def> = C2_cmpgti %R1, 0
	  * J2_jumpfnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R2<imp-def>, %R0<imp-def>, %P0<imp-def>, %R1<imp-use,kill>, %R0<imp-use,kill>
	  * %R2<def> = A2_addi %R1, -1
	  * %R0<def> = M2_mpyi %R1, %R0<kill>
	  * %P0<def> = C2_cmpgti %R1<kill>, 1
	BUNDLE %R1<imp-def>, %PC<imp-def,dead>, %R2<imp-use>, %P0<imp-use,kill>
	  * %R1<def> = A2_tfr %R2
	  * J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After StackMap Liveness Analysis:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi 1
	BUNDLE %P0<imp-def,dead>, %PC<imp-def>, %R1<imp-use>
	  * %P0<def> = C2_cmpgti %R1, 0
	  * J2_jumpfnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R2<imp-def>, %R0<imp-def>, %P0<imp-def>, %R1<imp-use,kill>, %R0<imp-use,kill>
	  * %R2<def> = A2_addi %R1, -1
	  * %R0<def> = M2_mpyi %R1, %R0<kill>
	  * %P0<def> = C2_cmpgti %R1<kill>, 1
	BUNDLE %R1<imp-def>, %PC<imp-def,dead>, %R2<imp-use>, %P0<imp-use,kill>
	  * %R1<def> = A2_tfr %R2
	  * J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

# After Live DEBUG_VALUE analysis:
# Machine code for function factorial: Post SSA
Function Live Ins: %R0

BB#0: derived from LLVM BB %entry
    Live Ins: %R0
	BUNDLE %R1<imp-def>, %R0<imp-def>, %R0<imp-use>
	  * %R1<def> = A2_tfr %R0
	  * %R0<def> = A2_tfrsi 1
	BUNDLE %P0<imp-def,dead>, %PC<imp-def>, %R1<imp-use>
	  * %P0<def> = C2_cmpgti %R1, 0
	  * J2_jumpfnew %P0<kill,internal>, <BB#3>, %PC<imp-def>
    Successors according to CFG: BB#1(0x50000000 / 0x80000000 = 62.50%) BB#3(0x30000000 / 0x80000000 = 37.50%)

BB#1: 
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#0
    Successors according to CFG: BB#2(?%)

BB#2: derived from LLVM BB %while.body
    Live Ins: %R0 %R1
    Predecessors according to CFG: BB#2 BB#1
	BUNDLE %R2<imp-def>, %R0<imp-def>, %P0<imp-def>, %R1<imp-use,kill>, %R0<imp-use,kill>
	  * %R2<def> = A2_addi %R1, -1
	  * %R0<def> = M2_mpyi %R1, %R0<kill>
	  * %P0<def> = C2_cmpgti %R1<kill>, 1
	BUNDLE %R1<imp-def>, %PC<imp-def,dead>, %R2<imp-use>, %P0<imp-use,kill>
	  * %R1<def> = A2_tfr %R2
	  * J2_jumpt %P0<kill>, <BB#2>, %PC<imp-def,dead>
	J2_jump <BB#3>, %PC<imp-def,dead>
    Successors according to CFG: BB#2(0x7c000000 / 0x80000000 = 96.88%) BB#3(0x04000000 / 0x80000000 = 3.12%)

BB#3: derived from LLVM BB %while.end
    Live Ins: %R0
    Predecessors according to CFG: BB#0 BB#2
	JMPret %R31<kill>, %PC<imp-def,dead>, %R0<imp-use,kill>

# End machine code for function factorial.

